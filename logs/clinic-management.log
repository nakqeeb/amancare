2025-08-28 01:20:00 [HikariPool-4:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-4 - Thread starvation or clock leap detected (housekeeper delta=1h36m12s332ms).
2025-08-28 02:43:44 [HikariPool-4:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-4 - Thread starvation or clock leap detected (housekeeper delta=1h23m43s136ms).
2025-08-28 04:24:21 [HikariPool-4:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-4 - Thread starvation or clock leap detected (housekeeper delta=1h40m37s578ms).
2025-08-28 05:41:13 [HikariPool-4:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-4 - Thread starvation or clock leap detected (housekeeper delta=1h16m51s626ms).
2025-08-28 05:41:42 [HikariPool-4:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-4 - Retrograde clock change detected (housekeeper delta=29s694ms), soft-evicting connections from pool.
2025-08-28 07:25:41 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-08-28 07:25:41 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-08-28 07:25:41 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 07:25:41 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Shutdown initiated...
2025-08-28 07:25:41 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Shutdown completed.
2025-08-28 07:25:44 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 68052 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-08-28 07:25:44 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-28 07:25:44 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-28 07:25:44 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-28 07:25:45 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28 07:25:45 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 34 ms. Found 11 JPA repository interfaces.
2025-08-28 07:25:45 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-28 07:25:45 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-28 07:25:45 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-08-28 07:25:45 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-28 07:25:45 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 959 ms
2025-08-28 07:25:45 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28 07:25:45 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-08-28 07:25:45 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-28 07:25:45 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28 07:25:45 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-28 07:25:45 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@350fc806
2025-08-28 07:25:45 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-28 07:25:45 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-28 07:25:45 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-28 07:25:46 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-28 07:25:46 [restartedMain] DEBUG org.hibernate.SQL - 
    create table doctor_schedules (
        id bigint not null auto_increment,
        created_at datetime(6) not null,
        updated_at datetime(6),
        break_end_time time(6),
        break_start_time time(6),
        day_of_week enum ('FRIDAY','MONDAY','SATURDAY','SUNDAY','THURSDAY','TUESDAY','WEDNESDAY') not null,
        effective_date date,
        end_date date,
        end_time time(6) not null,
        is_active bit,
        notes varchar(255),
        schedule_type enum ('EMERGENCY','HOLIDAY_COVERAGE','REGULAR','TEMPORARY'),
        start_time time(6) not null,
        doctor_id bigint not null,
        primary key (id)
    ) engine=InnoDB
2025-08-28 07:25:46 [restartedMain] DEBUG org.hibernate.SQL - 
    create table doctor_unavailability (
        id bigint not null auto_increment,
        created_at datetime(6) not null,
        updated_at datetime(6),
        end_time time(6),
        is_recurring bit,
        reason varchar(255),
        recurrence_end_date date,
        start_time time(6),
        unavailability_type enum ('CONFERENCE','EMERGENCY','OTHER','PERSONAL','SICK_LEAVE','TRAINING','VACATION'),
        unavailable_date date not null,
        doctor_id bigint not null,
        primary key (id)
    ) engine=InnoDB
2025-08-28 07:25:46 [restartedMain] DEBUG org.hibernate.SQL - 
    create index idx_doctor_day 
       on doctor_schedules (doctor_id, day_of_week)
2025-08-28 07:25:46 [restartedMain] DEBUG org.hibernate.SQL - 
    create index idx_doctor_date 
       on doctor_schedules (doctor_id, effective_date)
2025-08-28 07:25:46 [restartedMain] DEBUG org.hibernate.SQL - 
    create index idx_doctor_unavailable_date 
       on doctor_unavailability (doctor_id, unavailable_date)
2025-08-28 07:25:46 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table doctor_schedules 
       add constraint FK4abj2md08eyas4y9h4rjtucka 
       foreign key (doctor_id) 
       references users (id)
2025-08-28 07:25:46 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table doctor_unavailability 
       add constraint FKahkwfkf1056gxkxj28xt827d7 
       foreign key (doctor_id) 
       references users (id)
2025-08-28 07:25:46 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 07:25:46 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28 07:25:48 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-08-28 07:25:48 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-28 07:25:48 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-28 07:25:48 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-08-28 07:25:49 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-08-28 07:25:49 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 4.787 seconds (process running for 5.055)
2025-08-28 07:26:49 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-28 07:26:49 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-08-28 07:26:49 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 10 ms
2025-08-28 07:26:49 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui.html
2025-08-28 07:26:49 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 07:26:49 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 07:26:49 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui.html
2025-08-28 07:26:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.html
2025-08-28 07:26:49 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 07:26:49 [http-nio-8080-exec-2] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 07:26:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.html
2025-08-28 07:26:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-bundle.js
2025-08-28 07:26:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.css
2025-08-28 07:26:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui.css
2025-08-28 07:26:49 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 07:26:49 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 07:26:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-bundle.js
2025-08-28 07:26:49 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 07:26:49 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 07:26:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui.css
2025-08-28 07:26:49 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 07:26:49 [http-nio-8080-exec-4] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 07:26:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.css
2025-08-28 07:26:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-standalone-preset.js
2025-08-28 07:26:49 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 07:26:49 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-initializer.js
2025-08-28 07:26:49 [http-nio-8080-exec-6] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 07:26:49 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 07:26:49 [http-nio-8080-exec-7] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 07:26:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-standalone-preset.js
2025-08-28 07:26:49 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-initializer.js
2025-08-28 07:26:49 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs/swagger-config
2025-08-28 07:26:49 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 07:26:49 [http-nio-8080-exec-8] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 07:26:49 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs/swagger-config
2025-08-28 07:26:49 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs
2025-08-28 07:26:49 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 07:26:49 [http-nio-8080-exec-9] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 07:26:49 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs
2025-08-28 07:26:50 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 647 ms
2025-08-28 07:27:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-08-28 07:27:21 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 07:27:21 [http-nio-8080-exec-10] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 07:27:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-08-28 07:27:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-08-28 07:27:22 [http-nio-8080-exec-10] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-08-28 07:27:43 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/all
2025-08-28 07:27:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 07:27:43 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/all
2025-08-28 07:27:43 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:27:43 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:27:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor.clinic.id = :clinicId 
        AND ds.isActive = true */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            d1_0.clinic_id=? 
            and ds1_0.is_active=1
2025-08-28 07:41:18 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/all
2025-08-28 07:41:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 07:41:18 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/all
2025-08-28 07:41:18 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:41:18 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:41:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor.clinic.id = :clinicId 
        AND ds.isActive = true */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            d1_0.clinic_id=? 
            and ds1_0.is_active=1
2025-08-28 07:44:01 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /schedules/doctor
2025-08-28 07:44:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 07:44:01 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /schedules/doctor
2025-08-28 07:44:01 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.createDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateDoctorScheduleRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:44:01 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.createDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateDoctorScheduleRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:44:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 07:44:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ds1_0.id,
        ds1_0.break_end_time,
        ds1_0.break_start_time,
        ds1_0.created_at,
        ds1_0.day_of_week,
        ds1_0.doctor_id,
        ds1_0.effective_date,
        ds1_0.end_date,
        ds1_0.end_time,
        ds1_0.is_active,
        ds1_0.notes,
        ds1_0.schedule_type,
        ds1_0.start_time,
        ds1_0.updated_at 
    from
        doctor_schedules ds1_0 
    where
        ds1_0.doctor_id=? 
        and ds1_0.day_of_week=? 
        and ds1_0.is_active
2025-08-28 07:44:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.DoctorSchedule */insert 
    into
        doctor_schedules (break_end_time, break_start_time, created_at, day_of_week, doctor_id, effective_date, end_date, end_time, is_active, notes, schedule_type, start_time, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-28 07:44:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ds1_0.id,
        ds1_0.break_end_time,
        ds1_0.break_start_time,
        ds1_0.created_at,
        ds1_0.day_of_week,
        ds1_0.doctor_id,
        ds1_0.effective_date,
        ds1_0.end_date,
        ds1_0.end_time,
        ds1_0.is_active,
        ds1_0.notes,
        ds1_0.schedule_type,
        ds1_0.start_time,
        ds1_0.updated_at 
    from
        doctor_schedules ds1_0 
    where
        ds1_0.doctor_id=? 
        and ds1_0.day_of_week=? 
        and ds1_0.is_active
2025-08-28 07:44:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.DoctorSchedule */insert 
    into
        doctor_schedules (break_end_time, break_start_time, created_at, day_of_week, doctor_id, effective_date, end_date, end_time, is_active, notes, schedule_type, start_time, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-28 07:44:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ds1_0.id,
        ds1_0.break_end_time,
        ds1_0.break_start_time,
        ds1_0.created_at,
        ds1_0.day_of_week,
        ds1_0.doctor_id,
        ds1_0.effective_date,
        ds1_0.end_date,
        ds1_0.end_time,
        ds1_0.is_active,
        ds1_0.notes,
        ds1_0.schedule_type,
        ds1_0.start_time,
        ds1_0.updated_at 
    from
        doctor_schedules ds1_0 
    where
        ds1_0.doctor_id=? 
        and ds1_0.day_of_week=? 
        and ds1_0.is_active
2025-08-28 07:44:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.DoctorSchedule */insert 
    into
        doctor_schedules (break_end_time, break_start_time, created_at, day_of_week, doctor_id, effective_date, end_date, end_time, is_active, notes, schedule_type, start_time, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-28 07:44:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /schedules/doctor
2025-08-28 07:44:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 07:44:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /schedules/doctor
2025-08-28 07:44:38 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.createDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateDoctorScheduleRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:44:38 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.createDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateDoctorScheduleRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:44:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 07:44:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /schedules/doctor
2025-08-28 07:44:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 07:44:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /schedules/doctor
2025-08-28 07:44:49 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.createDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateDoctorScheduleRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:44:49 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.createDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateDoctorScheduleRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:44:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 07:44:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ds1_0.id,
        ds1_0.break_end_time,
        ds1_0.break_start_time,
        ds1_0.created_at,
        ds1_0.day_of_week,
        ds1_0.doctor_id,
        ds1_0.effective_date,
        ds1_0.end_date,
        ds1_0.end_time,
        ds1_0.is_active,
        ds1_0.notes,
        ds1_0.schedule_type,
        ds1_0.start_time,
        ds1_0.updated_at 
    from
        doctor_schedules ds1_0 
    where
        ds1_0.doctor_id=? 
        and ds1_0.day_of_week=? 
        and ds1_0.is_active
2025-08-28 07:44:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.DoctorSchedule */insert 
    into
        doctor_schedules (break_end_time, break_start_time, created_at, day_of_week, doctor_id, effective_date, end_date, end_time, is_active, notes, schedule_type, start_time, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-28 07:44:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ds1_0.id,
        ds1_0.break_end_time,
        ds1_0.break_start_time,
        ds1_0.created_at,
        ds1_0.day_of_week,
        ds1_0.doctor_id,
        ds1_0.effective_date,
        ds1_0.end_date,
        ds1_0.end_time,
        ds1_0.is_active,
        ds1_0.notes,
        ds1_0.schedule_type,
        ds1_0.start_time,
        ds1_0.updated_at 
    from
        doctor_schedules ds1_0 
    where
        ds1_0.doctor_id=? 
        and ds1_0.day_of_week=? 
        and ds1_0.is_active
2025-08-28 07:44:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.DoctorSchedule */insert 
    into
        doctor_schedules (break_end_time, break_start_time, created_at, day_of_week, doctor_id, effective_date, end_date, end_time, is_active, notes, schedule_type, start_time, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-28 07:44:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ds1_0.id,
        ds1_0.break_end_time,
        ds1_0.break_start_time,
        ds1_0.created_at,
        ds1_0.day_of_week,
        ds1_0.doctor_id,
        ds1_0.effective_date,
        ds1_0.end_date,
        ds1_0.end_time,
        ds1_0.is_active,
        ds1_0.notes,
        ds1_0.schedule_type,
        ds1_0.start_time,
        ds1_0.updated_at 
    from
        doctor_schedules ds1_0 
    where
        ds1_0.doctor_id=? 
        and ds1_0.day_of_week=? 
        and ds1_0.is_active
2025-08-28 07:44:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.DoctorSchedule */insert 
    into
        doctor_schedules (break_end_time, break_start_time, created_at, day_of_week, doctor_id, effective_date, end_date, end_time, is_active, notes, schedule_type, start_time, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-28 07:46:20 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-08-28 07:46:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 07:46:20 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-08-28 07:46:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-08-28 07:46:20 [http-nio-8080-exec-3] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /schedules/doctor
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /schedules/doctor
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.createDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateDoctorScheduleRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.createDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateDoctorScheduleRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ds1_0.id,
        ds1_0.break_end_time,
        ds1_0.break_start_time,
        ds1_0.created_at,
        ds1_0.day_of_week,
        ds1_0.doctor_id,
        ds1_0.effective_date,
        ds1_0.end_date,
        ds1_0.end_time,
        ds1_0.is_active,
        ds1_0.notes,
        ds1_0.schedule_type,
        ds1_0.start_time,
        ds1_0.updated_at 
    from
        doctor_schedules ds1_0 
    where
        ds1_0.doctor_id=? 
        and ds1_0.day_of_week=? 
        and ds1_0.is_active
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.DoctorSchedule */insert 
    into
        doctor_schedules (break_end_time, break_start_time, created_at, day_of_week, doctor_id, effective_date, end_date, end_time, is_active, notes, schedule_type, start_time, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* delete for com.nakqeeb.amancare.entity.DoctorSchedule */delete 
    from
        doctor_schedules 
    where
        id=?
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ds1_0.id,
        ds1_0.break_end_time,
        ds1_0.break_start_time,
        ds1_0.created_at,
        ds1_0.day_of_week,
        ds1_0.doctor_id,
        ds1_0.effective_date,
        ds1_0.end_date,
        ds1_0.end_time,
        ds1_0.is_active,
        ds1_0.notes,
        ds1_0.schedule_type,
        ds1_0.start_time,
        ds1_0.updated_at 
    from
        doctor_schedules ds1_0 
    where
        ds1_0.doctor_id=? 
        and ds1_0.day_of_week=? 
        and ds1_0.is_active
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.DoctorSchedule */insert 
    into
        doctor_schedules (break_end_time, break_start_time, created_at, day_of_week, doctor_id, effective_date, end_date, end_time, is_active, notes, schedule_type, start_time, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* delete for com.nakqeeb.amancare.entity.DoctorSchedule */delete 
    from
        doctor_schedules 
    where
        id=?
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ds1_0.id,
        ds1_0.break_end_time,
        ds1_0.break_start_time,
        ds1_0.created_at,
        ds1_0.day_of_week,
        ds1_0.doctor_id,
        ds1_0.effective_date,
        ds1_0.end_date,
        ds1_0.end_time,
        ds1_0.is_active,
        ds1_0.notes,
        ds1_0.schedule_type,
        ds1_0.start_time,
        ds1_0.updated_at 
    from
        doctor_schedules ds1_0 
    where
        ds1_0.doctor_id=? 
        and ds1_0.day_of_week=? 
        and ds1_0.is_active
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.DoctorSchedule */insert 
    into
        doctor_schedules (break_end_time, break_start_time, created_at, day_of_week, doctor_id, effective_date, end_date, end_time, is_active, notes, schedule_type, start_time, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-28 07:46:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* delete for com.nakqeeb.amancare.entity.DoctorSchedule */delete 
    from
        doctor_schedules 
    where
        id=?
2025-08-28 07:47:03 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /schedules/doctor
2025-08-28 07:47:03 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 07:47:03 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /schedules/doctor
2025-08-28 07:47:03 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.createDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateDoctorScheduleRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:47:03 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.createDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateDoctorScheduleRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 07:47:03 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:00:18 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-08-28 08:00:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:00:18 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-08-28 08:00:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-08-28 08:00:18 [http-nio-8080-exec-9] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-08-28 08:00:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/all
2025-08-28 08:00:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:00:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/all
2025-08-28 08:00:38 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:00:38 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:00:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor.clinic.id = :clinicId 
        AND ds.isActive = true */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            d1_0.clinic_id=? 
            and ds1_0.is_active=1
2025-08-28 08:00:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-08-28 08:00:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:00:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-08-28 08:00:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-08-28 08:00:55 [http-nio-8080-exec-6] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-08-28 08:01:11 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/all
2025-08-28 08:01:11 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:01:11 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/all
2025-08-28 08:01:11 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:01:11 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:01:11 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor.clinic.id = :clinicId 
        AND ds.isActive = true */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            d1_0.clinic_id=? 
            and ds1_0.is_active=1
2025-08-28 08:02:46 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-01&time=09%2F01%2F2025%2006%3A01%3A58%20AM
2025-08-28 08:02:46 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:02:46 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-01&time=09%2F01%2F2025%2006%3A01%3A58%20AM
2025-08-28 08:02:46 [http-nio-8080-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'time': Failed to convert value of type 'java.lang.String' to required type 'java.time.LocalTime'; Failed to convert from type [java.lang.String] to type [@io.swagger.v3.oas.annotations.Parameter @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.time.LocalTime] for value [09/01/2025 06:01:58 AM]]
2025-08-28 08:02:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-01&time=09%2F01%2F2025%2006%3A01%3A58%20AM
2025-08-28 08:02:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:02:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-01&time=09%2F01%2F2025%2006%3A01%3A58%20AM
2025-08-28 08:02:54 [http-nio-8080-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'time': Failed to convert value of type 'java.lang.String' to required type 'java.time.LocalTime'; Failed to convert from type [java.lang.String] to type [@io.swagger.v3.oas.annotations.Parameter @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.time.LocalTime] for value [09/01/2025 06:01:58 AM]]
2025-08-28 08:03:04 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-01&time=09%2F01%2F2026%2006%3A01%3A58%20AM
2025-08-28 08:03:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:03:04 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-01&time=09%2F01%2F2026%2006%3A01%3A58%20AM
2025-08-28 08:03:04 [http-nio-8080-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'time': Failed to convert value of type 'java.lang.String' to required type 'java.time.LocalTime'; Failed to convert from type [java.lang.String] to type [@io.swagger.v3.oas.annotations.Parameter @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.time.LocalTime] for value [09/01/2026 06:01:58 AM]]
2025-08-28 08:03:17 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-01&time=09%2F01%2F2025%2010%3A01%3A58%20AM
2025-08-28 08:03:17 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:03:17 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-01&time=09%2F01%2F2025%2010%3A01%3A58%20AM
2025-08-28 08:03:17 [http-nio-8080-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'time': Failed to convert value of type 'java.lang.String' to required type 'java.time.LocalTime'; Failed to convert from type [java.lang.String] to type [@io.swagger.v3.oas.annotations.Parameter @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.time.LocalTime] for value [09/01/2025 10:01:58 AM]]
2025-08-28 08:03:48 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-01&time=2025-08-28T06%3A01%3A58Z
2025-08-28 08:03:48 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:03:48 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-01&time=2025-08-28T06%3A01%3A58Z
2025-08-28 08:03:48 [http-nio-8080-exec-9] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'time': Failed to convert value of type 'java.lang.String' to required type 'java.time.LocalTime'; Failed to convert from type [java.lang.String] to type [@io.swagger.v3.oas.annotations.Parameter @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.time.LocalTime] for value [2025-08-28T06:01:58Z]]
2025-08-28 08:24:13 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-08-28 08:24:13 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-08-28 08:24:13 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 08:24:13 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-08-28 08:24:13 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-08-28 08:24:14 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 95592 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-08-28 08:24:14 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-28 08:24:15 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-28 08:24:15 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-28 08:24:15 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28 08:24:15 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 48 ms. Found 11 JPA repository interfaces.
2025-08-28 08:24:16 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-28 08:24:16 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-28 08:24:16 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-08-28 08:24:16 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-28 08:24:16 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1329 ms
2025-08-28 08:24:16 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28 08:24:16 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-08-28 08:24:16 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-28 08:24:16 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28 08:24:16 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-28 08:24:16 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6c199e5b
2025-08-28 08:24:16 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-28 08:24:16 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-28 08:24:16 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-28 08:24:17 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-28 08:24:17 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 08:24:17 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28 08:24:18 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-08-28 08:24:18 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-28 08:24:19 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-28 08:24:19 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-08-28 08:24:19 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-08-28 08:24:19 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 5.287 seconds (process running for 5.672)
2025-08-28 08:25:43 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-28 08:25:43 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-08-28 08:25:43 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-08-28 08:25:43 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-01&time=2025-08-28T06%3A25%3A16Z
2025-08-28 08:25:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:25:43 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-01&time=2025-08-28T06%3A25%3A16Z
2025-08-28 08:25:44 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'time': Failed to convert value of type 'java.lang.String' to required type 'java.time.LocalTime'; Failed to convert from type [java.lang.String] to type [@io.swagger.v3.oas.annotations.Parameter @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.time.LocalTime] for value [2025-08-28T06:25:16Z]]
2025-08-28 08:31:13 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-08-28 08:31:13 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-08-28 08:31:13 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 08:31:13 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-08-28 08:31:13 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-08-28 08:31:15 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 99034 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-08-28 08:31:15 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-28 08:31:15 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-28 08:31:15 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-28 08:31:16 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28 08:31:16 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 42 ms. Found 11 JPA repository interfaces.
2025-08-28 08:31:16 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-28 08:31:16 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-28 08:31:16 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-08-28 08:31:16 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-28 08:31:16 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 962 ms
2025-08-28 08:31:16 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28 08:31:16 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-08-28 08:31:16 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-28 08:31:16 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28 08:31:16 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-28 08:31:16 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@50f2e51c
2025-08-28 08:31:16 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-28 08:31:16 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-28 08:31:16 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-28 08:31:17 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-28 08:31:17 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 08:31:17 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28 08:31:19 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-08-28 08:31:19 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-28 08:31:19 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-28 08:31:20 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-08-28 08:31:20 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-08-28 08:31:20 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 4.755 seconds (process running for 5.001)
2025-08-28 08:32:22 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-28 08:32:22 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-08-28 08:32:22 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-08-28 08:32:22 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/2
2025-08-28 08:32:22 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:32:22 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/2
2025-08-28 08:32:22 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:32:22 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:32:22 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:32:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/6
2025-08-28 08:32:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:32:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/6
2025-08-28 08:32:29 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:32:29 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:32:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:32:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ds1_0.id,
        ds1_0.break_end_time,
        ds1_0.break_start_time,
        ds1_0.created_at,
        ds1_0.day_of_week,
        ds1_0.doctor_id,
        ds1_0.effective_date,
        ds1_0.end_date,
        ds1_0.end_time,
        ds1_0.is_active,
        ds1_0.notes,
        ds1_0.schedule_type,
        ds1_0.start_time,
        ds1_0.updated_at 
    from
        doctor_schedules ds1_0 
    where
        ds1_0.doctor_id=? 
        and ds1_0.is_active 
    order by
        ds1_0.day_of_week
2025-08-28 08:32:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/8
2025-08-28 08:32:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:32:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/8
2025-08-28 08:32:55 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:32:55 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:32:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:32:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ds1_0.id,
        ds1_0.break_end_time,
        ds1_0.break_start_time,
        ds1_0.created_at,
        ds1_0.day_of_week,
        ds1_0.doctor_id,
        ds1_0.effective_date,
        ds1_0.end_date,
        ds1_0.end_time,
        ds1_0.is_active,
        ds1_0.notes,
        ds1_0.schedule_type,
        ds1_0.start_time,
        ds1_0.updated_at 
    from
        doctor_schedules ds1_0 
    where
        ds1_0.doctor_id=? 
        and ds1_0.is_active 
    order by
        ds1_0.day_of_week
2025-08-28 08:33:26 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/6/unavailability?startDate=2024-09-01&endDate=2024-09-30
2025-08-28 08:33:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:33:26 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/6/unavailability?startDate=2024-09-01&endDate=2024-09-30
2025-08-28 08:33:26 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:33:26 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:33:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:33:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        du 
    FROM
        DoctorUnavailability du 
    WHERE
        du.doctor = :doctor 
        AND du.unavailableDate BETWEEN :startDate AND :endDate 
    ORDER BY
        du.unavailableDate,
        du.startTime */ select
            du1_0.id,
            du1_0.created_at,
            du1_0.doctor_id,
            du1_0.end_time,
            du1_0.is_recurring,
            du1_0.reason,
            du1_0.recurrence_end_date,
            du1_0.start_time,
            du1_0.unavailability_type,
            du1_0.unavailable_date,
            du1_0.updated_at 
        from
            doctor_unavailability du1_0 
        where
            du1_0.doctor_id=? 
            and du1_0.unavailable_date between ? and ? 
        order by
            du1_0.unavailable_date,
            du1_0.start_time
2025-08-28 08:33:40 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/6/unavailability?startDate=2025-09-01&endDate=2024-09-30
2025-08-28 08:33:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:33:40 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/6/unavailability?startDate=2025-09-01&endDate=2024-09-30
2025-08-28 08:33:40 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:33:40 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:33:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:33:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        du 
    FROM
        DoctorUnavailability du 
    WHERE
        du.doctor = :doctor 
        AND du.unavailableDate BETWEEN :startDate AND :endDate 
    ORDER BY
        du.unavailableDate,
        du.startTime */ select
            du1_0.id,
            du1_0.created_at,
            du1_0.doctor_id,
            du1_0.end_time,
            du1_0.is_recurring,
            du1_0.reason,
            du1_0.recurrence_end_date,
            du1_0.start_time,
            du1_0.unavailability_type,
            du1_0.unavailable_date,
            du1_0.updated_at 
        from
            doctor_unavailability du1_0 
        where
            du1_0.doctor_id=? 
            and du1_0.unavailable_date between ? and ? 
        order by
            du1_0.unavailable_date,
            du1_0.start_time
2025-08-28 08:33:48 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/8/unavailability?startDate=2025-09-01&endDate=2024-09-30
2025-08-28 08:33:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:33:48 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/8/unavailability?startDate=2025-09-01&endDate=2024-09-30
2025-08-28 08:33:48 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:33:48 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:33:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:33:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        du 
    FROM
        DoctorUnavailability du 
    WHERE
        du.doctor = :doctor 
        AND du.unavailableDate BETWEEN :startDate AND :endDate 
    ORDER BY
        du.unavailableDate,
        du.startTime */ select
            du1_0.id,
            du1_0.created_at,
            du1_0.doctor_id,
            du1_0.end_time,
            du1_0.is_recurring,
            du1_0.reason,
            du1_0.recurrence_end_date,
            du1_0.start_time,
            du1_0.unavailability_type,
            du1_0.unavailable_date,
            du1_0.updated_at 
        from
            doctor_unavailability du1_0 
        where
            du1_0.doctor_id=? 
            and du1_0.unavailable_date between ? and ? 
        order by
            du1_0.unavailable_date,
            du1_0.start_time
2025-08-28 08:34:42 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/6/available-slots?date=2024-09-15&durationMinutes=30
2025-08-28 08:34:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:34:42 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/6/available-slots?date=2024-09-15&durationMinutes=30
2025-08-28 08:34:42 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableTimeSlots(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,int); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:34:42 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableTimeSlots(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,int); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:34:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:34:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 08:34:48 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/8/available-slots?date=2024-09-15&durationMinutes=30
2025-08-28 08:34:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:34:48 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/8/available-slots?date=2024-09-15&durationMinutes=30
2025-08-28 08:34:48 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableTimeSlots(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,int); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:34:48 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableTimeSlots(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,int); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:34:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:34:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 08:34:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/8/available-slots?date=2025-09-15&durationMinutes=30
2025-08-28 08:34:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:34:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/8/available-slots?date=2025-09-15&durationMinutes=30
2025-08-28 08:34:55 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableTimeSlots(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,int); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:34:55 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableTimeSlots(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,int); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:34:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:34:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 08:35:18 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/all
2025-08-28 08:35:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 08:35:18 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/all
2025-08-28 08:35:18 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:35:18 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 08:35:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor.clinic.id = :clinicId 
        AND ds.isActive = true */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            d1_0.clinic_id=? 
            and ds1_0.is_active=1
2025-08-28 09:02:41 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /schedules/unavailability
2025-08-28 09:02:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:02:41 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /schedules/unavailability
2025-08-28 09:02:41 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.addUnavailability(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateUnavailabilityRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:02:41 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.addUnavailability(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateUnavailabilityRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:02:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:02:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.DoctorUnavailability */insert 
    into
        doctor_unavailability (created_at, doctor_id, end_time, is_recurring, reason, recurrence_end_date, start_time, unavailability_type, unavailable_date, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-28 09:02:57 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/all
2025-08-28 09:02:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:02:57 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/all
2025-08-28 09:02:57 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:02:57 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:02:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor.clinic.id = :clinicId 
        AND ds.isActive = true */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            d1_0.clinic_id=? 
            and ds1_0.is_active=1
2025-08-28 09:04:46 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-08-28 09:04:46 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-08-28 09:04:46 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:04:46 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-08-28 09:04:46 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-08-28 09:04:48 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 15241 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-08-28 09:04:48 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-28 09:04:48 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-28 09:04:48 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-28 09:04:48 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28 09:04:48 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 34 ms. Found 11 JPA repository interfaces.
2025-08-28 09:04:49 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-28 09:04:49 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-28 09:04:49 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-08-28 09:04:49 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-28 09:04:49 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 953 ms
2025-08-28 09:04:49 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28 09:04:49 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-08-28 09:04:49 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-28 09:04:49 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28 09:04:49 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-28 09:04:49 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@366a3d77
2025-08-28 09:04:49 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-28 09:04:49 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-28 09:04:49 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-28 09:04:50 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-28 09:04:50 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:04:50 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28 09:04:51 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-08-28 09:04:51 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-28 09:04:52 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-28 09:04:52 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-08-28 09:04:52 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-08-28 09:04:52 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 4.633 seconds (process running for 4.869)
2025-08-28 09:04:59 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-28 09:04:59 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-08-28 09:04:59 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-08-28 09:04:59 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/all
2025-08-28 09:05:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:05:00 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/all
2025-08-28 09:05:00 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:05:00 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:05:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor.clinic.id = :clinicId 
        AND ds.isActive = true */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            d1_0.clinic_id=? 
            and ds1_0.is_active=1
2025-08-28 09:05:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:05:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:07:59 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/8/unavailability?startDate=2025-09-01&endDate=2024-09-30
2025-08-28 09:07:59 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:07:59 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/8/unavailability?startDate=2025-09-01&endDate=2024-09-30
2025-08-28 09:07:59 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:07:59 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:07:59 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:07:59 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        du 
    FROM
        DoctorUnavailability du 
    WHERE
        du.doctor = :doctor 
        AND du.unavailableDate BETWEEN :startDate AND :endDate 
    ORDER BY
        du.unavailableDate,
        du.startTime */ select
            du1_0.id,
            du1_0.created_at,
            du1_0.doctor_id,
            du1_0.end_time,
            du1_0.is_recurring,
            du1_0.reason,
            du1_0.recurrence_end_date,
            du1_0.start_time,
            du1_0.unavailability_type,
            du1_0.unavailable_date,
            du1_0.updated_at 
        from
            doctor_unavailability du1_0 
        where
            du1_0.doctor_id=? 
            and du1_0.unavailable_date between ? and ? 
        order by
            du1_0.unavailable_date,
            du1_0.start_time
2025-08-28 09:08:07 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/8/unavailability?startDate=2025-09-01&endDate=2025-09-30
2025-08-28 09:08:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:08:07 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/8/unavailability?startDate=2025-09-01&endDate=2025-09-30
2025-08-28 09:08:07 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:08:07 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:08:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:08:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        du 
    FROM
        DoctorUnavailability du 
    WHERE
        du.doctor = :doctor 
        AND du.unavailableDate BETWEEN :startDate AND :endDate 
    ORDER BY
        du.unavailableDate,
        du.startTime */ select
            du1_0.id,
            du1_0.created_at,
            du1_0.doctor_id,
            du1_0.end_time,
            du1_0.is_recurring,
            du1_0.reason,
            du1_0.recurrence_end_date,
            du1_0.start_time,
            du1_0.unavailability_type,
            du1_0.unavailable_date,
            du1_0.updated_at 
        from
            doctor_unavailability du1_0 
        where
            du1_0.doctor_id=? 
            and du1_0.unavailable_date between ? and ? 
        order by
            du1_0.unavailable_date,
            du1_0.start_time
2025-08-28 09:09:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/8
2025-08-28 09:09:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:09:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/8
2025-08-28 09:09:35 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:09:35 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorSchedule(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:09:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:09:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ds1_0.id,
        ds1_0.break_end_time,
        ds1_0.break_start_time,
        ds1_0.created_at,
        ds1_0.day_of_week,
        ds1_0.doctor_id,
        ds1_0.effective_date,
        ds1_0.end_date,
        ds1_0.end_time,
        ds1_0.is_active,
        ds1_0.notes,
        ds1_0.schedule_type,
        ds1_0.start_time,
        ds1_0.updated_at 
    from
        doctor_schedules ds1_0 
    where
        ds1_0.doctor_id=? 
        and ds1_0.is_active 
    order by
        ds1_0.day_of_week
2025-08-28 09:10:30 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing DELETE /schedules/1
2025-08-28 09:10:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:10:30 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured DELETE /schedules/1
2025-08-28 09:10:30 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.deleteSchedule(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:10:30 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.deleteSchedule(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:10:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        ds1_0.id,
        ds1_0.break_end_time,
        ds1_0.break_start_time,
        ds1_0.created_at,
        ds1_0.day_of_week,
        ds1_0.doctor_id,
        d1_0.id,
        d1_0.clinic_id,
        d1_0.created_at,
        d1_0.email,
        d1_0.first_name,
        d1_0.is_active,
        d1_0.last_name,
        d1_0.password_hash,
        d1_0.phone,
        d1_0.role,
        d1_0.specialization,
        d1_0.updated_at,
        d1_0.username,
        ds1_0.effective_date,
        ds1_0.end_date,
        ds1_0.end_time,
        ds1_0.is_active,
        ds1_0.notes,
        ds1_0.schedule_type,
        ds1_0.start_time,
        ds1_0.updated_at 
    from
        doctor_schedules ds1_0 
    join
        users d1_0 
            on d1_0.id=ds1_0.doctor_id 
    where
        ds1_0.id=?
2025-08-28 09:10:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* delete for com.nakqeeb.amancare.entity.DoctorSchedule */delete 
    from
        doctor_schedules 
    where
        id=?
2025-08-28 09:11:34 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing DELETE /schedules/unavailability/1
2025-08-28 09:11:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:11:34 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured DELETE /schedules/unavailability/1
2025-08-28 09:11:34 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.deleteUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:11:34 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.deleteUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:11:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.id=?
2025-08-28 09:11:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:11:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* delete for com.nakqeeb.amancare.entity.DoctorUnavailability */delete 
    from
        doctor_unavailability 
    where
        id=?
2025-08-28 09:14:32 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-08-28 09:14:32 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-08-28 09:14:32 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:14:32 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-08-28 09:14:32 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-08-28 09:14:35 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 19929 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-08-28 09:14:35 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-28 09:14:35 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-28 09:14:35 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-28 09:14:35 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28 09:14:36 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 34 ms. Found 11 JPA repository interfaces.
2025-08-28 09:14:36 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-28 09:14:36 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-28 09:14:36 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-08-28 09:14:36 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-28 09:14:36 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1032 ms
2025-08-28 09:14:36 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28 09:14:36 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-08-28 09:14:36 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-28 09:14:36 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28 09:14:36 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-28 09:14:36 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@60d1b7c8
2025-08-28 09:14:36 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-28 09:14:36 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-28 09:14:36 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-28 09:14:37 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-28 09:14:37 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:14:37 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28 09:14:39 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-08-28 09:14:39 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-28 09:14:39 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-28 09:14:39 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-08-28 09:14:39 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-08-28 09:14:39 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 4.862 seconds (process running for 5.129)
2025-08-28 09:15:11 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-08-28 09:15:11 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-08-28 09:15:11 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:15:11 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-08-28 09:15:11 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-08-28 09:15:13 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 20252 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-08-28 09:15:13 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-28 09:15:13 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-28 09:15:13 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-28 09:15:14 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28 09:15:14 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 37 ms. Found 11 JPA repository interfaces.
2025-08-28 09:15:14 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-28 09:15:14 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-28 09:15:14 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-08-28 09:15:14 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-28 09:15:14 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1031 ms
2025-08-28 09:15:15 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28 09:15:15 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-08-28 09:15:15 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-28 09:15:15 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28 09:15:15 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-28 09:15:15 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@366a3d77
2025-08-28 09:15:15 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-28 09:15:15 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-28 09:15:15 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-28 09:15:15 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-28 09:15:16 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:15:16 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28 09:15:17 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-08-28 09:15:17 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-28 09:15:17 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-28 09:15:18 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-08-28 09:15:18 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-08-28 09:15:18 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 4.675 seconds (process running for 4.91)
2025-08-28 09:15:24 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-28 09:15:24 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-08-28 09:15:24 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-08-28 09:15:24 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.html
2025-08-28 09:15:24 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:15:24 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:15:24 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.html
2025-08-28 09:15:24 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-standalone-preset.js
2025-08-28 09:15:24 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui.css
2025-08-28 09:15:24 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:15:24 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:15:24 [http-nio-8080-exec-2] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:15:24 [http-nio-8080-exec-4] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:15:24 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui.css
2025-08-28 09:15:24 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-standalone-preset.js
2025-08-28 09:15:24 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-bundle.js
2025-08-28 09:15:24 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:15:24 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-initializer.js
2025-08-28 09:15:24 [http-nio-8080-exec-6] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:15:24 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.css
2025-08-28 09:15:24 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-bundle.js
2025-08-28 09:15:24 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:15:24 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:15:24 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:15:24 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.css
2025-08-28 09:15:24 [http-nio-8080-exec-7] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:15:24 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-initializer.js
2025-08-28 09:15:24 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs/swagger-config
2025-08-28 09:15:24 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/favicon-32x32.png
2025-08-28 09:15:24 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:15:24 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:15:24 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:15:24 [http-nio-8080-exec-8] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:15:24 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/favicon-32x32.png
2025-08-28 09:15:24 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs/swagger-config
2025-08-28 09:15:24 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs
2025-08-28 09:15:24 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:15:24 [http-nio-8080-exec-9] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:15:24 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs
2025-08-28 09:15:25 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 588 ms
2025-08-28 09:15:42 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-08-28 09:15:42 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:15:42 [http-nio-8080-exec-6] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:15:42 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-08-28 09:15:43 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-08-28 09:15:43 [http-nio-8080-exec-6] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-08-28 09:16:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-15&time=10%3A30%3A00
2025-08-28 09:16:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:16:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-15&time=10%3A30%3A00
2025-08-28 09:16:13 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.lang.String); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:16:13 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.lang.String); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:16:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT ds.doctor 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.dayOfWeek = :dayOfWeek 
        AND ds.startTime <= :time 
        AND ds.endTime > :time 
        AND ds.isActive = true 
        AND ds.doctor.clinic.id = :clinicId 
        AND (
            ds.breakStartTime IS NULL 
            OR :time < ds.breakStartTime 
            OR :time >= ds.breakEndTime
        ) 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) */ select
            distinct d1_0.id,
            d1_0.clinic_id,
            d1_0.created_at,
            d1_0.email,
            d1_0.first_name,
            d1_0.is_active,
            d1_0.last_name,
            d1_0.password_hash,
            d1_0.phone,
            d1_0.role,
            d1_0.specialization,
            d1_0.updated_at,
            d1_0.username 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            ds1_0.day_of_week=? 
            and ds1_0.start_time<=? 
            and ds1_0.end_time>? 
            and ds1_0.is_active=1 
            and d1_0.clinic_id=? 
            and (
                ds1_0.break_start_time is null 
                or ?<ds1_0.break_start_time 
                or ?>=ds1_0.break_end_time
            ) 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            )
2025-08-28 09:16:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 09:16:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:16:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 09:16:56 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.lang.String); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:16:56 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.lang.String); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:16:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT ds.doctor 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.dayOfWeek = :dayOfWeek 
        AND ds.startTime <= :time 
        AND ds.endTime > :time 
        AND ds.isActive = true 
        AND ds.doctor.clinic.id = :clinicId 
        AND (
            ds.breakStartTime IS NULL 
            OR :time < ds.breakStartTime 
            OR :time >= ds.breakEndTime
        ) 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) */ select
            distinct d1_0.id,
            d1_0.clinic_id,
            d1_0.created_at,
            d1_0.email,
            d1_0.first_name,
            d1_0.is_active,
            d1_0.last_name,
            d1_0.password_hash,
            d1_0.phone,
            d1_0.role,
            d1_0.specialization,
            d1_0.updated_at,
            d1_0.username 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            ds1_0.day_of_week=? 
            and ds1_0.start_time<=? 
            and ds1_0.end_time>? 
            and ds1_0.is_active=1 
            and d1_0.clinic_id=? 
            and (
                ds1_0.break_start_time is null 
                or ?<ds1_0.break_start_time 
                or ?>=ds1_0.break_end_time
            ) 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            )
2025-08-28 09:17:05 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 09:17:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:17:05 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 09:17:05 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.lang.String); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:17:05 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.lang.String); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:17:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT ds.doctor 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.dayOfWeek = :dayOfWeek 
        AND ds.startTime <= :time 
        AND ds.endTime > :time 
        AND ds.isActive = true 
        AND ds.doctor.clinic.id = :clinicId 
        AND (
            ds.breakStartTime IS NULL 
            OR :time < ds.breakStartTime 
            OR :time >= ds.breakEndTime
        ) 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) */ select
            distinct d1_0.id,
            d1_0.clinic_id,
            d1_0.created_at,
            d1_0.email,
            d1_0.first_name,
            d1_0.is_active,
            d1_0.last_name,
            d1_0.password_hash,
            d1_0.phone,
            d1_0.role,
            d1_0.specialization,
            d1_0.updated_at,
            d1_0.username 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            ds1_0.day_of_week=? 
            and ds1_0.start_time<=? 
            and ds1_0.end_time>? 
            and ds1_0.is_active=1 
            and d1_0.clinic_id=? 
            and (
                ds1_0.break_start_time is null 
                or ?<ds1_0.break_start_time 
                or ?>=ds1_0.break_end_time
            ) 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            )
2025-08-28 09:17:05 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 09:17:05 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:17:05 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 09:17:05 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.lang.String); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:17:05 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.lang.String); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:17:05 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT ds.doctor 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.dayOfWeek = :dayOfWeek 
        AND ds.startTime <= :time 
        AND ds.endTime > :time 
        AND ds.isActive = true 
        AND ds.doctor.clinic.id = :clinicId 
        AND (
            ds.breakStartTime IS NULL 
            OR :time < ds.breakStartTime 
            OR :time >= ds.breakEndTime
        ) 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) */ select
            distinct d1_0.id,
            d1_0.clinic_id,
            d1_0.created_at,
            d1_0.email,
            d1_0.first_name,
            d1_0.is_active,
            d1_0.last_name,
            d1_0.password_hash,
            d1_0.phone,
            d1_0.role,
            d1_0.specialization,
            d1_0.updated_at,
            d1_0.username 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            ds1_0.day_of_week=? 
            and ds1_0.start_time<=? 
            and ds1_0.end_time>? 
            and ds1_0.is_active=1 
            and d1_0.clinic_id=? 
            and (
                ds1_0.break_start_time is null 
                or ?<ds1_0.break_start_time 
                or ?>=ds1_0.break_end_time
            ) 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            )
2025-08-28 09:17:30 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-08-28 09:17:30 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-08-28 09:17:30 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:17:30 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-08-28 09:17:30 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-08-28 09:17:33 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 21354 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-08-28 09:17:33 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-28 09:17:33 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-28 09:17:33 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-28 09:17:33 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28 09:17:33 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 40 ms. Found 11 JPA repository interfaces.
2025-08-28 09:17:34 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-28 09:17:34 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-28 09:17:34 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-08-28 09:17:34 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-28 09:17:34 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1004 ms
2025-08-28 09:17:34 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28 09:17:34 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-08-28 09:17:34 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-28 09:17:34 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28 09:17:34 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-28 09:17:34 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4747feff
2025-08-28 09:17:34 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-28 09:17:34 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-28 09:17:34 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-28 09:17:35 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-28 09:17:35 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:17:35 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28 09:17:36 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-08-28 09:17:36 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-28 09:17:36 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-28 09:17:37 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-08-28 09:17:37 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-08-28 09:17:37 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 4.786 seconds (process running for 5.038)
2025-08-28 09:17:41 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-28 09:17:41 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-08-28 09:17:41 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-08-28 09:17:41 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 09:17:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:17:41 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 09:17:41 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.lang.String); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:17:41 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.lang.String); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:17:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT ds.doctor 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.dayOfWeek = :dayOfWeek 
        AND ds.startTime <= :time 
        AND ds.endTime > :time 
        AND ds.isActive = true 
        AND ds.doctor.clinic.id = :clinicId 
        AND (
            ds.breakStartTime IS NULL 
            OR :time < ds.breakStartTime 
            OR :time >= ds.breakEndTime
        ) 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) */ select
            distinct d1_0.id,
            d1_0.clinic_id,
            d1_0.created_at,
            d1_0.email,
            d1_0.first_name,
            d1_0.is_active,
            d1_0.last_name,
            d1_0.password_hash,
            d1_0.phone,
            d1_0.role,
            d1_0.specialization,
            d1_0.updated_at,
            d1_0.username 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            ds1_0.day_of_week=? 
            and ds1_0.start_time<=? 
            and ds1_0.end_time>? 
            and ds1_0.is_active=1 
            and d1_0.clinic_id=? 
            and (
                ds1_0.break_start_time is null 
                or ?<ds1_0.break_start_time 
                or ?>=ds1_0.break_end_time
            ) 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            )
2025-08-28 09:36:19 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-08-28 09:36:19 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-08-28 09:36:19 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:36:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-08-28 09:36:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-08-28 09:36:21 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 30376 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-08-28 09:36:21 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-28 09:36:22 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-28 09:36:22 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-28 09:36:22 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28 09:36:22 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 35 ms. Found 11 JPA repository interfaces.
2025-08-28 09:36:22 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-28 09:36:22 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-28 09:36:22 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-08-28 09:36:22 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-28 09:36:22 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 895 ms
2025-08-28 09:36:22 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28 09:36:23 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-08-28 09:36:23 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-28 09:36:23 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28 09:36:23 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-28 09:36:23 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@60d1b7c8
2025-08-28 09:36:23 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-28 09:36:23 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-28 09:36:23 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-28 09:36:23 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-28 09:36:24 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:36:24 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28 09:36:25 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-08-28 09:36:25 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-28 09:36:25 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-28 09:36:26 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-08-28 09:36:26 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-08-28 09:36:26 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 4.686 seconds (process running for 4.934)
2025-08-28 09:36:33 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-28 09:36:33 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-08-28 09:36:33 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-08-28 09:36:33 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 09:36:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:36:34 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 09:36:34 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:36:34 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:36:34 [http-nio-8080-exec-1] INFO  c.n.a.service.DoctorScheduleService - Searching for doctors with params: clinicId=2, dayOfWeek=MONDAY, time=10:30, date=2025-09-01
2025-08-28 09:36:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT ds.doctor 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.dayOfWeek = :dayOfWeek 
        AND ds.startTime <= :time 
        AND ds.endTime > :time 
        AND ds.isActive = true 
        AND ds.doctor.clinic.id = :clinicId 
        AND (
            ds.breakStartTime IS NULL 
            OR :time < ds.breakStartTime 
            OR :time >= ds.breakEndTime
        ) 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) */ select
            distinct d1_0.id,
            d1_0.clinic_id,
            d1_0.created_at,
            d1_0.email,
            d1_0.first_name,
            d1_0.is_active,
            d1_0.last_name,
            d1_0.password_hash,
            d1_0.phone,
            d1_0.role,
            d1_0.specialization,
            d1_0.updated_at,
            d1_0.username 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            ds1_0.day_of_week=? 
            and ds1_0.start_time<=? 
            and ds1_0.end_time>? 
            and ds1_0.is_active=1 
            and d1_0.clinic_id=? 
            and (
                ds1_0.break_start_time is null 
                or ?<ds1_0.break_start_time 
                or ?>=ds1_0.break_end_time
            ) 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            )
2025-08-28 09:41:58 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-08-28 09:41:58 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-08-28 09:41:58 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:41:58 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-08-28 09:41:58 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-08-28 09:42:00 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 33049 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-08-28 09:42:00 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-28 09:42:00 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-28 09:42:00 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-28 09:42:00 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28 09:42:00 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 33 ms. Found 11 JPA repository interfaces.
2025-08-28 09:42:01 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-28 09:42:01 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-28 09:42:01 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-08-28 09:42:01 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-28 09:42:01 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 909 ms
2025-08-28 09:42:01 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28 09:42:01 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-08-28 09:42:01 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-28 09:42:01 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28 09:42:01 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-28 09:42:01 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@60d1b7c8
2025-08-28 09:42:01 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-28 09:42:01 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-28 09:42:01 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-28 09:42:02 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-28 09:42:02 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:42:02 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28 09:42:03 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-08-28 09:42:03 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-28 09:42:03 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-28 09:42:04 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-08-28 09:42:04 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-08-28 09:42:04 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 4.418 seconds (process running for 4.674)
2025-08-28 09:42:09 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-28 09:42:09 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-08-28 09:42:09 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-08-28 09:42:09 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 09:42:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:42:09 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 09:42:09 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:42:09 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:42:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT ds.doctor 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.dayOfWeek = :dayOfWeek 
        AND ds.startTime <= :time 
        AND ds.endTime > :time 
        AND ds.isActive = true 
        AND ds.doctor.clinic.id = :clinicId 
        AND (
            ds.breakStartTime IS NULL 
            OR :time NOT BETWEEN ds.breakStartTime AND ds.breakEndTime
        ) 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) */ select
            distinct d1_0.id,
            d1_0.clinic_id,
            d1_0.created_at,
            d1_0.email,
            d1_0.first_name,
            d1_0.is_active,
            d1_0.last_name,
            d1_0.password_hash,
            d1_0.phone,
            d1_0.role,
            d1_0.specialization,
            d1_0.updated_at,
            d1_0.username 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            ds1_0.day_of_week=? 
            and ds1_0.start_time<=? 
            and ds1_0.end_time>? 
            and ds1_0.is_active=1 
            and d1_0.clinic_id=? 
            and (
                ds1_0.break_start_time is null 
                or ? not between ds1_0.break_start_time and ds1_0.break_end_time
            ) 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            )
2025-08-28 09:54:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-02&time=10%3A30%3A00
2025-08-28 09:54:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:54:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-02&time=10%3A30%3A00
2025-08-28 09:54:58 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:54:58 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:54:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT ds.doctor 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.dayOfWeek = :dayOfWeek 
        AND ds.startTime <= :time 
        AND ds.endTime > :time 
        AND ds.isActive = true 
        AND ds.doctor.clinic.id = :clinicId 
        AND (
            ds.breakStartTime IS NULL 
            OR :time NOT BETWEEN ds.breakStartTime AND ds.breakEndTime
        ) 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) */ select
            distinct d1_0.id,
            d1_0.clinic_id,
            d1_0.created_at,
            d1_0.email,
            d1_0.first_name,
            d1_0.is_active,
            d1_0.last_name,
            d1_0.password_hash,
            d1_0.phone,
            d1_0.role,
            d1_0.specialization,
            d1_0.updated_at,
            d1_0.username 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            ds1_0.day_of_week=? 
            and ds1_0.start_time<=? 
            and ds1_0.end_time>? 
            and ds1_0.is_active=1 
            and d1_0.clinic_id=? 
            and (
                ds1_0.break_start_time is null 
                or ? not between ds1_0.break_start_time and ds1_0.break_end_time
            ) 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            )
2025-08-28 09:54:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 09:54:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 09:54:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 09:54:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 09:55:18 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-03&time=10%3A30%3A00
2025-08-28 09:55:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:55:18 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-03&time=10%3A30%3A00
2025-08-28 09:55:18 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:55:18 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:55:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT ds.doctor 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.dayOfWeek = :dayOfWeek 
        AND ds.startTime <= :time 
        AND ds.endTime > :time 
        AND ds.isActive = true 
        AND ds.doctor.clinic.id = :clinicId 
        AND (
            ds.breakStartTime IS NULL 
            OR :time NOT BETWEEN ds.breakStartTime AND ds.breakEndTime
        ) 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) */ select
            distinct d1_0.id,
            d1_0.clinic_id,
            d1_0.created_at,
            d1_0.email,
            d1_0.first_name,
            d1_0.is_active,
            d1_0.last_name,
            d1_0.password_hash,
            d1_0.phone,
            d1_0.role,
            d1_0.specialization,
            d1_0.updated_at,
            d1_0.username 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            ds1_0.day_of_week=? 
            and ds1_0.start_time<=? 
            and ds1_0.end_time>? 
            and ds1_0.is_active=1 
            and d1_0.clinic_id=? 
            and (
                ds1_0.break_start_time is null 
                or ? not between ds1_0.break_start_time and ds1_0.break_end_time
            ) 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            )
2025-08-28 09:55:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-04&time=10%3A30%3A00
2025-08-28 09:55:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:55:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-04&time=10%3A30%3A00
2025-08-28 09:55:21 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:55:21 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:55:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT ds.doctor 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.dayOfWeek = :dayOfWeek 
        AND ds.startTime <= :time 
        AND ds.endTime > :time 
        AND ds.isActive = true 
        AND ds.doctor.clinic.id = :clinicId 
        AND (
            ds.breakStartTime IS NULL 
            OR :time NOT BETWEEN ds.breakStartTime AND ds.breakEndTime
        ) 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) */ select
            distinct d1_0.id,
            d1_0.clinic_id,
            d1_0.created_at,
            d1_0.email,
            d1_0.first_name,
            d1_0.is_active,
            d1_0.last_name,
            d1_0.password_hash,
            d1_0.phone,
            d1_0.role,
            d1_0.specialization,
            d1_0.updated_at,
            d1_0.username 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            ds1_0.day_of_week=? 
            and ds1_0.start_time<=? 
            and ds1_0.end_time>? 
            and ds1_0.is_active=1 
            and d1_0.clinic_id=? 
            and (
                ds1_0.break_start_time is null 
                or ? not between ds1_0.break_start_time and ds1_0.break_end_time
            ) 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            )
2025-08-28 09:55:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 09:55:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 09:55:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 09:55:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 09:55:44 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-08-28 09:55:44 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-08-28 09:55:44 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:55:44 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-08-28 09:55:44 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-08-28 09:55:46 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 39646 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-08-28 09:55:46 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-28 09:55:46 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-28 09:55:46 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-28 09:55:46 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28 09:55:46 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 34 ms. Found 11 JPA repository interfaces.
2025-08-28 09:55:47 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-28 09:55:47 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-28 09:55:47 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-08-28 09:55:47 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-28 09:55:47 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 869 ms
2025-08-28 09:55:47 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28 09:55:47 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-08-28 09:55:47 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-28 09:55:47 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28 09:55:47 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-28 09:55:47 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@e4f6771
2025-08-28 09:55:47 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-28 09:55:47 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-28 09:55:47 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-28 09:55:48 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-28 09:55:48 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 09:55:48 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28 09:55:49 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-08-28 09:55:49 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-28 09:55:50 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-28 09:55:50 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-08-28 09:55:50 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-08-28 09:55:50 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 4.729 seconds (process running for 4.969)
2025-08-28 09:55:51 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-28 09:55:51 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-08-28 09:55:51 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-08-28 09:55:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.html
2025-08-28 09:55:51 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:55:51 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:55:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.html
2025-08-28 09:55:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui.css
2025-08-28 09:55:51 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:55:51 [http-nio-8080-exec-2] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:55:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui.css
2025-08-28 09:55:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.css
2025-08-28 09:55:51 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:55:51 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:55:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.css
2025-08-28 09:55:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-bundle.js
2025-08-28 09:55:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-standalone-preset.js
2025-08-28 09:55:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-initializer.js
2025-08-28 09:55:51 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:55:51 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:55:51 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:55:51 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:55:51 [http-nio-8080-exec-6] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:55:51 [http-nio-8080-exec-4] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:55:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-initializer.js
2025-08-28 09:55:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-standalone-preset.js
2025-08-28 09:55:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-bundle.js
2025-08-28 09:55:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs/swagger-config
2025-08-28 09:55:51 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:55:51 [http-nio-8080-exec-7] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:55:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs/swagger-config
2025-08-28 09:55:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/favicon-32x32.png
2025-08-28 09:55:51 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:55:51 [http-nio-8080-exec-8] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:55:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/favicon-32x32.png
2025-08-28 09:55:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs
2025-08-28 09:55:51 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:55:51 [http-nio-8080-exec-9] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:55:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs
2025-08-28 09:55:52 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 594 ms
2025-08-28 09:56:06 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-08-28 09:56:06 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 09:56:06 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 09:56:06 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-08-28 09:56:06 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-08-28 09:56:07 [http-nio-8080-exec-5] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-08-28 09:56:29 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/all
2025-08-28 09:56:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:56:29 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/all
2025-08-28 09:56:29 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:56:29 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 09:56:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor.clinic.id = :clinicId 
        AND ds.isActive = true */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            d1_0.clinic_id=? 
            and ds1_0.is_active=1
2025-08-28 09:56:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 09:56:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:10:22 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-08-28 10:10:22 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-08-28 10:10:22 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 10:10:22 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-08-28 10:10:22 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-08-28 10:10:24 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 46584 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-08-28 10:10:24 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-28 10:10:24 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-28 10:10:24 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-28 10:10:25 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28 10:10:25 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 36 ms. Found 11 JPA repository interfaces.
2025-08-28 10:10:25 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-28 10:10:25 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-28 10:10:25 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-08-28 10:10:26 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-28 10:10:26 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1071 ms
2025-08-28 10:10:26 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28 10:10:26 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-08-28 10:10:26 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-28 10:10:26 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28 10:10:26 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-28 10:10:26 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@e4f6771
2025-08-28 10:10:26 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-28 10:10:26 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-28 10:10:26 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-28 10:10:27 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-28 10:10:27 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 10:10:27 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28 10:10:28 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-08-28 10:10:28 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-28 10:10:28 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-28 10:10:29 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-08-28 10:10:29 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-08-28 10:10:29 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 4.687 seconds (process running for 4.924)
2025-08-28 10:10:31 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-08-28 10:10:31 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-08-28 10:10:31 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 10:10:31 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-08-28 10:10:31 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-08-28 10:10:32 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 46651 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-08-28 10:10:32 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-28 10:10:32 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-28 10:10:32 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-28 10:10:33 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28 10:10:33 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 36 ms. Found 11 JPA repository interfaces.
2025-08-28 10:10:33 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-28 10:10:33 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-28 10:10:33 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-08-28 10:10:33 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-28 10:10:33 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1014 ms
2025-08-28 10:10:33 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28 10:10:33 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-08-28 10:10:33 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-28 10:10:33 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28 10:10:34 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-28 10:10:34 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@60d1b7c8
2025-08-28 10:10:34 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-28 10:10:34 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-28 10:10:34 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-28 10:10:34 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-28 10:10:34 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 10:10:34 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28 10:10:36 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-08-28 10:10:36 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-28 10:10:36 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-28 10:10:36 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-08-28 10:10:36 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-08-28 10:10:36 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 4.741 seconds (process running for 4.992)
2025-08-28 10:10:40 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-28 10:10:40 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-08-28 10:10:40 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-08-28 10:10:40 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.html
2025-08-28 10:10:40 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:10:40 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:10:40 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.html
2025-08-28 10:10:40 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui.css
2025-08-28 10:10:40 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:10:40 [http-nio-8080-exec-2] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:10:40 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui.css
2025-08-28 10:10:40 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.css
2025-08-28 10:10:40 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:10:40 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:10:40 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.css
2025-08-28 10:10:40 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-standalone-preset.js
2025-08-28 10:10:40 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-bundle.js
2025-08-28 10:10:40 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:10:40 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:10:40 [http-nio-8080-exec-4] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:10:40 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:10:40 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-bundle.js
2025-08-28 10:10:40 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-initializer.js
2025-08-28 10:10:40 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-standalone-preset.js
2025-08-28 10:10:40 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:10:40 [http-nio-8080-exec-6] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:10:40 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-initializer.js
2025-08-28 10:10:40 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs/swagger-config
2025-08-28 10:10:40 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:10:40 [http-nio-8080-exec-7] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:10:40 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs/swagger-config
2025-08-28 10:10:40 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/favicon-32x32.png
2025-08-28 10:10:40 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:10:40 [http-nio-8080-exec-8] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:10:40 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/favicon-32x32.png
2025-08-28 10:10:40 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs
2025-08-28 10:10:40 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:10:40 [http-nio-8080-exec-10] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:10:40 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs
2025-08-28 10:10:41 [http-nio-8080-exec-10] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 550 ms
2025-08-28 10:10:58 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-08-28 10:10:58 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:10:58 [http-nio-8080-exec-4] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:10:58 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-08-28 10:10:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-08-28 10:10:59 [http-nio-8080-exec-4] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-08-28 10:11:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-15&time=10%3A30%3A00
2025-08-28 10:11:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:11:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-15&time=10%3A30%3A00
2025-08-28 10:11:21 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:11:21 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:11:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT ds.doctor 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.dayOfWeek = :dayOfWeek 
        AND ds.startTime <= :time 
        AND ds.endTime > :time 
        AND ds.isActive = true 
        AND ds.doctor.clinic.id = :clinicId 
        AND (
            ds.breakStartTime IS NULL 
            OR :time < ds.breakStartTime 
            OR :time >= ds.breakEndTime
        ) 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) */ select
            distinct d1_0.id,
            d1_0.clinic_id,
            d1_0.created_at,
            d1_0.email,
            d1_0.first_name,
            d1_0.is_active,
            d1_0.last_name,
            d1_0.password_hash,
            d1_0.phone,
            d1_0.role,
            d1_0.specialization,
            d1_0.updated_at,
            d1_0.username 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            ds1_0.day_of_week=? 
            and ds1_0.start_time<=? 
            and ds1_0.end_time>? 
            and ds1_0.is_active=1 
            and d1_0.clinic_id=? 
            and (
                ds1_0.break_start_time is null 
                or ?<ds1_0.break_start_time 
                or ?>=ds1_0.break_end_time
            ) 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            )
2025-08-28 10:11:33 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-1&time=10%3A30%3A00
2025-08-28 10:11:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:11:33 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-1&time=10%3A30%3A00
2025-08-28 10:11:33 [http-nio-8080-exec-9] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'date': Failed to convert value of type 'java.lang.String' to required type 'java.time.LocalDate'; Failed to convert from type [java.lang.String] to type [@io.swagger.v3.oas.annotations.Parameter @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.time.LocalDate] for value [2025-09-1]]
2025-08-28 10:11:44 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 10:11:44 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:11:44 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-01&time=10%3A30%3A00
2025-08-28 10:11:44 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:11:44 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:11:44 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT ds.doctor 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.dayOfWeek = :dayOfWeek 
        AND ds.startTime <= :time 
        AND ds.endTime > :time 
        AND ds.isActive = true 
        AND ds.doctor.clinic.id = :clinicId 
        AND (
            ds.breakStartTime IS NULL 
            OR :time < ds.breakStartTime 
            OR :time >= ds.breakEndTime
        ) 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) */ select
            distinct d1_0.id,
            d1_0.clinic_id,
            d1_0.created_at,
            d1_0.email,
            d1_0.first_name,
            d1_0.is_active,
            d1_0.last_name,
            d1_0.password_hash,
            d1_0.phone,
            d1_0.role,
            d1_0.specialization,
            d1_0.updated_at,
            d1_0.username 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            ds1_0.day_of_week=? 
            and ds1_0.start_time<=? 
            and ds1_0.end_time>? 
            and ds1_0.is_active=1 
            and d1_0.clinic_id=? 
            and (
                ds1_0.break_start_time is null 
                or ?<ds1_0.break_start_time 
                or ?>=ds1_0.break_end_time
            ) 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            )
2025-08-28 10:11:50 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/available-doctors?date=2025-09-02&time=10%3A30%3A00
2025-08-28 10:11:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:11:50 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/available-doctors?date=2025-09-02&time=10%3A30%3A00
2025-08-28 10:11:50 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:11:50 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:11:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT ds.doctor 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.dayOfWeek = :dayOfWeek 
        AND ds.startTime <= :time 
        AND ds.endTime > :time 
        AND ds.isActive = true 
        AND ds.doctor.clinic.id = :clinicId 
        AND (
            ds.breakStartTime IS NULL 
            OR :time < ds.breakStartTime 
            OR :time >= ds.breakEndTime
        ) 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) */ select
            distinct d1_0.id,
            d1_0.clinic_id,
            d1_0.created_at,
            d1_0.email,
            d1_0.first_name,
            d1_0.is_active,
            d1_0.last_name,
            d1_0.password_hash,
            d1_0.phone,
            d1_0.role,
            d1_0.specialization,
            d1_0.updated_at,
            d1_0.username 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            ds1_0.day_of_week=? 
            and ds1_0.start_time<=? 
            and ds1_0.end_time>? 
            and ds1_0.is_active=1 
            and d1_0.clinic_id=? 
            and (
                ds1_0.break_start_time is null 
                or ?<ds1_0.break_start_time 
                or ?>=ds1_0.break_end_time
            ) 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            )
2025-08-28 10:11:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:11:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:11:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:11:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:13:01 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-08-28 10:13:01 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-08-28 10:13:01 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 10:13:01 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-08-28 10:13:01 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-08-28 10:13:03 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 47866 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-08-28 10:13:03 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-08-28 10:13:04 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-08-28 10:13:04 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-08-28 10:13:04 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28 10:13:04 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 34 ms. Found 11 JPA repository interfaces.
2025-08-28 10:13:04 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-28 10:13:04 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-28 10:13:04 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-08-28 10:13:04 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-08-28 10:13:04 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 949 ms
2025-08-28 10:13:05 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28 10:13:05 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-08-28 10:13:05 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-28 10:13:05 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28 10:13:05 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-28 10:13:05 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@e4f6771
2025-08-28 10:13:05 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-28 10:13:05 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-28 10:13:05 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-08-28 10:13:05 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-28 10:13:06 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28 10:13:06 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28 10:13:07 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-08-28 10:13:07 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-08-28 10:13:07 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-08-28 10:13:08 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-08-28 10:13:08 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-08-28 10:13:08 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 4.872 seconds (process running for 5.11)
2025-08-28 10:13:14 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-28 10:13:14 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-08-28 10:13:14 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-08-28 10:13:14 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.html
2025-08-28 10:13:14 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:13:14 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:13:14 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.html
2025-08-28 10:13:14 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-standalone-preset.js
2025-08-28 10:13:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui.css
2025-08-28 10:13:14 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:13:14 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:13:14 [http-nio-8080-exec-2] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:13:14 [http-nio-8080-exec-4] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:13:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui.css
2025-08-28 10:13:14 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-standalone-preset.js
2025-08-28 10:13:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-initializer.js
2025-08-28 10:13:14 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.css
2025-08-28 10:13:14 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:13:14 [http-nio-8080-exec-6] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:13:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-initializer.js
2025-08-28 10:13:14 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:13:14 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:13:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-bundle.js
2025-08-28 10:13:14 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.css
2025-08-28 10:13:14 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:13:14 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:13:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-bundle.js
2025-08-28 10:13:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/favicon-32x32.png
2025-08-28 10:13:14 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:13:14 [http-nio-8080-exec-8] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:13:14 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs/swagger-config
2025-08-28 10:13:14 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:13:14 [http-nio-8080-exec-7] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:13:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/favicon-32x32.png
2025-08-28 10:13:14 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs/swagger-config
2025-08-28 10:13:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs
2025-08-28 10:13:14 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-08-28 10:13:14 [http-nio-8080-exec-9] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-08-28 10:13:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs
2025-08-28 10:13:15 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 565 ms
2025-08-28 10:13:33 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/2/availability?date=2024-09-15&time=10%3A30%3A00
2025-08-28 10:13:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:13:33 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/2/availability?date=2024-09-15&time=10%3A30%3A00
2025-08-28 10:13:33 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.checkDoctorAvailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:13:33 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.checkDoctorAvailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:13:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:13:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:13:56 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/6/availability?date=2024-09-15&time=10%3A30%3A00
2025-08-28 10:13:56 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:13:56 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/6/availability?date=2024-09-15&time=10%3A30%3A00
2025-08-28 10:13:56 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.checkDoctorAvailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:13:56 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.checkDoctorAvailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:13:56 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:13:56 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:03 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/6/availability?date=2025-09-15&time=10%3A30%3A00
2025-08-28 10:14:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:14:03 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/6/availability?date=2025-09-15&time=10%3A30%3A00
2025-08-28 10:14:03 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.checkDoctorAvailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:14:03 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.checkDoctorAvailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:14:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:14:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:14 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/6/availability?date=2025-09-02&time=10%3A30%3A00
2025-08-28 10:14:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:14:14 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/6/availability?date=2025-09-02&time=10%3A30%3A00
2025-08-28 10:14:14 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.checkDoctorAvailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:14:14 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.checkDoctorAvailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalTime); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:14:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:14:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:14:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:14:45 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/6/available-slots?date=2025-09-15&durationMinutes=30
2025-08-28 10:14:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:14:45 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/6/available-slots?date=2025-09-15&durationMinutes=30
2025-08-28 10:14:45 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableTimeSlots(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,int); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:14:45 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableTimeSlots(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,int); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:14:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:14:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/6/available-slots?date=2025-09-02&durationMinutes=30
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/6/available-slots?date=2025-09-02&durationMinutes=30
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableTimeSlots(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,int); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAvailableTimeSlots(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,int); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-08-28 10:14:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-08-28 10:15:28 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/2/unavailability?startDate=2024-09-01&endDate=2024-09-30
2025-08-28 10:15:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:15:28 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/2/unavailability?startDate=2024-09-01&endDate=2024-09-30
2025-08-28 10:15:28 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:15:28 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:15:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:15:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/6/unavailability?startDate=2024-09-01&endDate=2024-09-30
2025-08-28 10:15:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:15:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/6/unavailability?startDate=2024-09-01&endDate=2024-09-30
2025-08-28 10:15:35 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:15:35 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:15:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:15:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        du 
    FROM
        DoctorUnavailability du 
    WHERE
        du.doctor = :doctor 
        AND du.unavailableDate BETWEEN :startDate AND :endDate 
    ORDER BY
        du.unavailableDate,
        du.startTime */ select
            du1_0.id,
            du1_0.created_at,
            du1_0.doctor_id,
            du1_0.end_time,
            du1_0.is_recurring,
            du1_0.reason,
            du1_0.recurrence_end_date,
            du1_0.start_time,
            du1_0.unavailability_type,
            du1_0.unavailable_date,
            du1_0.updated_at 
        from
            doctor_unavailability du1_0 
        where
            du1_0.doctor_id=? 
            and du1_0.unavailable_date between ? and ? 
        order by
            du1_0.unavailable_date,
            du1_0.start_time
2025-08-28 10:15:42 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/6/unavailability?startDate=2025-09-01&endDate=2025-09-30
2025-08-28 10:15:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:15:42 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/6/unavailability?startDate=2025-09-01&endDate=2025-09-30
2025-08-28 10:15:42 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:15:42 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:15:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:15:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        du 
    FROM
        DoctorUnavailability du 
    WHERE
        du.doctor = :doctor 
        AND du.unavailableDate BETWEEN :startDate AND :endDate 
    ORDER BY
        du.unavailableDate,
        du.startTime */ select
            du1_0.id,
            du1_0.created_at,
            du1_0.doctor_id,
            du1_0.end_time,
            du1_0.is_recurring,
            du1_0.reason,
            du1_0.recurrence_end_date,
            du1_0.start_time,
            du1_0.unavailability_type,
            du1_0.unavailable_date,
            du1_0.updated_at 
        from
            doctor_unavailability du1_0 
        where
            du1_0.doctor_id=? 
            and du1_0.unavailable_date between ? and ? 
        order by
            du1_0.unavailable_date,
            du1_0.start_time
2025-08-28 10:15:55 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/5/unavailability?startDate=2025-09-01&endDate=2025-09-30
2025-08-28 10:15:55 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:15:55 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/5/unavailability?startDate=2025-09-01&endDate=2025-09-30
2025-08-28 10:15:55 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:15:55 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:15:55 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:16:01 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/8/unavailability?startDate=2025-09-01&endDate=2025-09-30
2025-08-28 10:16:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:16:01 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/8/unavailability?startDate=2025-09-01&endDate=2025-09-30
2025-08-28 10:16:01 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:16:01 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:16:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:16:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        du 
    FROM
        DoctorUnavailability du 
    WHERE
        du.doctor = :doctor 
        AND du.unavailableDate BETWEEN :startDate AND :endDate 
    ORDER BY
        du.unavailableDate,
        du.startTime */ select
            du1_0.id,
            du1_0.created_at,
            du1_0.doctor_id,
            du1_0.end_time,
            du1_0.is_recurring,
            du1_0.reason,
            du1_0.recurrence_end_date,
            du1_0.start_time,
            du1_0.unavailability_type,
            du1_0.unavailable_date,
            du1_0.updated_at 
        from
            doctor_unavailability du1_0 
        where
            du1_0.doctor_id=? 
            and du1_0.unavailable_date between ? and ? 
        order by
            du1_0.unavailable_date,
            du1_0.start_time
2025-08-28 10:18:28 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/8/unavailability?startDate=2025-08-01&endDate=2025-09-30
2025-08-28 10:18:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:18:28 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/8/unavailability?startDate=2025-08-01&endDate=2025-09-30
2025-08-28 10:18:28 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:18:28 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:18:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:18:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        du 
    FROM
        DoctorUnavailability du 
    WHERE
        du.doctor = :doctor 
        AND du.unavailableDate BETWEEN :startDate AND :endDate 
    ORDER BY
        du.unavailableDate,
        du.startTime */ select
            du1_0.id,
            du1_0.created_at,
            du1_0.doctor_id,
            du1_0.end_time,
            du1_0.is_recurring,
            du1_0.reason,
            du1_0.recurrence_end_date,
            du1_0.start_time,
            du1_0.unavailability_type,
            du1_0.unavailable_date,
            du1_0.updated_at 
        from
            doctor_unavailability du1_0 
        where
            du1_0.doctor_id=? 
            and du1_0.unavailable_date between ? and ? 
        order by
            du1_0.unavailable_date,
            du1_0.start_time
2025-08-28 10:18:39 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/8/unavailability?startDate=2025-09-02&endDate=2025-09-30
2025-08-28 10:18:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:18:39 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/8/unavailability?startDate=2025-09-02&endDate=2025-09-30
2025-08-28 10:18:39 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:18:39 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:18:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:18:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        du 
    FROM
        DoctorUnavailability du 
    WHERE
        du.doctor = :doctor 
        AND du.unavailableDate BETWEEN :startDate AND :endDate 
    ORDER BY
        du.unavailableDate,
        du.startTime */ select
            du1_0.id,
            du1_0.created_at,
            du1_0.doctor_id,
            du1_0.end_time,
            du1_0.is_recurring,
            du1_0.reason,
            du1_0.recurrence_end_date,
            du1_0.start_time,
            du1_0.unavailability_type,
            du1_0.unavailable_date,
            du1_0.updated_at 
        from
            doctor_unavailability du1_0 
        where
            du1_0.doctor_id=? 
            and du1_0.unavailable_date between ? and ? 
        order by
            du1_0.unavailable_date,
            du1_0.start_time
2025-08-28 10:18:44 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/8/unavailability?startDate=2025-09-02&endDate=2025-09-02
2025-08-28 10:18:44 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:18:44 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/8/unavailability?startDate=2025-09-02&endDate=2025-09-02
2025-08-28 10:18:44 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:18:44 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:18:44 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:18:44 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        du 
    FROM
        DoctorUnavailability du 
    WHERE
        du.doctor = :doctor 
        AND du.unavailableDate BETWEEN :startDate AND :endDate 
    ORDER BY
        du.unavailableDate,
        du.startTime */ select
            du1_0.id,
            du1_0.created_at,
            du1_0.doctor_id,
            du1_0.end_time,
            du1_0.is_recurring,
            du1_0.reason,
            du1_0.recurrence_end_date,
            du1_0.start_time,
            du1_0.unavailability_type,
            du1_0.unavailable_date,
            du1_0.updated_at 
        from
            doctor_unavailability du1_0 
        where
            du1_0.doctor_id=? 
            and du1_0.unavailable_date between ? and ? 
        order by
            du1_0.unavailable_date,
            du1_0.start_time
2025-08-28 10:25:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /schedules/unavailability
2025-08-28 10:25:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:25:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /schedules/unavailability
2025-08-28 10:25:20 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.addUnavailability(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateUnavailabilityRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:25:20 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.addUnavailability(com.nakqeeb.amancare.security.UserPrincipal,com.nakqeeb.amancare.dto.request.CreateUnavailabilityRequest); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:25:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:25:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.DoctorUnavailability */insert 
    into
        doctor_unavailability (created_at, doctor_id, end_time, is_recurring, reason, recurrence_end_date, start_time, unavailability_type, unavailable_date, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-08-28 10:25:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/8/unavailability?startDate=2025-09-02&endDate=2025-09-30
2025-08-28 10:25:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:25:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/8/unavailability?startDate=2025-09-02&endDate=2025-09-30
2025-08-28 10:25:44 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:25:44 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:25:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:25:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        du 
    FROM
        DoctorUnavailability du 
    WHERE
        du.doctor = :doctor 
        AND du.unavailableDate BETWEEN :startDate AND :endDate 
    ORDER BY
        du.unavailableDate,
        du.startTime */ select
            du1_0.id,
            du1_0.created_at,
            du1_0.doctor_id,
            du1_0.end_time,
            du1_0.is_recurring,
            du1_0.reason,
            du1_0.recurrence_end_date,
            du1_0.start_time,
            du1_0.unavailability_type,
            du1_0.unavailable_date,
            du1_0.updated_at 
        from
            doctor_unavailability du1_0 
        where
            du1_0.doctor_id=? 
            and du1_0.unavailable_date between ? and ? 
        order by
            du1_0.unavailable_date,
            du1_0.start_time
2025-08-28 10:25:49 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/doctor/6/unavailability?startDate=2025-09-02&endDate=2025-09-30
2025-08-28 10:25:49 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:25:49 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/doctor/6/unavailability?startDate=2025-09-02&endDate=2025-09-30
2025-08-28 10:25:49 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:25:49 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getDoctorUnavailability(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.time.LocalDate); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-08-28 10:25:49 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-08-28 10:25:49 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        du 
    FROM
        DoctorUnavailability du 
    WHERE
        du.doctor = :doctor 
        AND du.unavailableDate BETWEEN :startDate AND :endDate 
    ORDER BY
        du.unavailableDate,
        du.startTime */ select
            du1_0.id,
            du1_0.created_at,
            du1_0.doctor_id,
            du1_0.end_time,
            du1_0.is_recurring,
            du1_0.reason,
            du1_0.recurrence_end_date,
            du1_0.start_time,
            du1_0.unavailability_type,
            du1_0.unavailable_date,
            du1_0.updated_at 
        from
            doctor_unavailability du1_0 
        where
            du1_0.doctor_id=? 
            and du1_0.unavailable_date between ? and ? 
        order by
            du1_0.unavailable_date,
            du1_0.start_time
