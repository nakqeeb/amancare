2025-10-11 00:03:45 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3m46s189ms).
2025-10-11 00:10:01 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=6m15s592ms).
2025-10-11 00:11:30 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /public/doctors/available
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/doctors/available
2025-10-11 00:11:30 [http-nio-8080-exec-3] INFO  c.n.amancare.service.PublicService - Fetching available doctors for clinic: null
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role=? 
        and u1_0.is_active
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:11:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:16:06 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=6m5s273ms).
2025-10-11 00:27:46 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=11m40s312ms).
2025-10-11 00:27:58 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /public/announcements/active
2025-10-11 00:27:58 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/announcements/active
2025-10-11 00:27:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 00:27:58 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/announcements/active
2025-10-11 00:27:58 [http-nio-8080-exec-9] INFO  c.n.amancare.service.PublicService - Fetching active announcements
2025-10-11 00:27:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Announcement a 
    WHERE
        a.isActive = true 
        AND a.startDate <= :today 
        AND (
            a.endDate IS NULL 
            OR a.endDate >= :today
        ) 
    ORDER BY
        a.priority DESC,
        a.createdAt DESC */ select
            a1_0.id,
            a1_0.action_text,
            a1_0.action_url,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.doctor_id,
            a1_0.end_date,
            a1_0.image_url,
            a1_0.is_active,
            a1_0.message,
            a1_0.priority,
            a1_0.start_date,
            a1_0.title,
            a1_0.type,
            a1_0.updated_at 
        from
            announcements a1_0 
        where
            a1_0.is_active=1 
            and a1_0.start_date<=? 
            and (
                a1_0.end_date is null 
                or a1_0.end_date>=?
            ) 
        order by
            a1_0.priority desc,
            a1_0.created_at desc
2025-10-11 00:34:17 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=6m30s164ms).
2025-10-11 00:51:40 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=17m23s165ms).
2025-10-11 00:51:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /public/doctors/available
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/doctors/available
2025-10-11 00:51:53 [http-nio-8080-exec-1] INFO  c.n.amancare.service.PublicService - Fetching available doctors for clinic: null
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role=? 
        and u1_0.is_active
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:51:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 00:59:01 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=7m20s791ms).
2025-10-11 01:02:21 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3m20s647ms).
2025-10-11 01:04:32 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m11s61ms).
2025-10-11 01:06:49 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m17s10ms).
2025-10-11 01:07:00 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /public/doctors/available
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/doctors/available
2025-10-11 01:07:00 [http-nio-8080-exec-6] INFO  c.n.amancare.service.PublicService - Fetching available doctors for clinic: null
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role=? 
        and u1_0.is_active
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:07:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 01:43:12 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=36m22s395ms).
2025-10-11 02:55:29 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h12m17s167ms).
2025-10-11 04:00:26 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h4m56s869ms).
2025-10-11 05:18:01 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h17m34s957ms).
2025-10-11 05:35:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /public/doctors/available
2025-10-11 05:35:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /public/announcements/active
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available
2025-10-11 05:35:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/announcements/active
2025-10-11 05:35:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 05:35:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/announcements/active
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/doctors/available
2025-10-11 05:35:51 [http-nio-8080-exec-9] INFO  c.n.amancare.service.PublicService - Fetching active announcements
2025-10-11 05:35:51 [http-nio-8080-exec-2] INFO  c.n.amancare.service.PublicService - Fetching available doctors for clinic: null
2025-10-11 05:35:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Announcement a 
    WHERE
        a.isActive = true 
        AND a.startDate <= :today 
        AND (
            a.endDate IS NULL 
            OR a.endDate >= :today
        ) 
    ORDER BY
        a.priority DESC,
        a.createdAt DESC */ select
            a1_0.id,
            a1_0.action_text,
            a1_0.action_url,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.doctor_id,
            a1_0.end_date,
            a1_0.image_url,
            a1_0.is_active,
            a1_0.message,
            a1_0.priority,
            a1_0.start_date,
            a1_0.title,
            a1_0.type,
            a1_0.updated_at 
        from
            announcements a1_0 
        where
            a1_0.is_active=1 
            and a1_0.start_date<=? 
            and (
                a1_0.end_date is null 
                or a1_0.end_date>=?
            ) 
        order by
            a1_0.priority desc,
            a1_0.created_at desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role=? 
        and u1_0.is_active
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 05:35:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 06:38:21 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h20m19s930ms).
2025-10-11 07:49:02 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h10m40s959ms).
2025-10-11 09:07:22 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h18m20s158ms).
2025-10-11 10:23:30 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h16m7s959ms).
2025-10-11 10:39:53 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /public/doctors/available
2025-10-11 10:39:53 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available
2025-10-11 10:39:53 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 10:39:53 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/refresh
2025-10-11 10:39:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/refresh
2025-10-11 10:39:53 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 10:39:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/refresh
2025-10-11 10:39:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 11:42:43 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h19m13s641ms).
2025-10-11 12:53:58 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h11m14s683ms).
2025-10-11 13:27:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/validate-reset-token?token=8Ht0gLrB4HGNtHpa146q_zBVPdSmDNSP1bfi5CSc385doh6gxEcILSBrON5h4wLGGb4FhpLpEsLdqs6cmUMTTQ
2025-10-11 13:27:49 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:27:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/validate-reset-token?token=8Ht0gLrB4HGNtHpa146q_zBVPdSmDNSP1bfi5CSc385doh6gxEcILSBrON5h4wLGGb4FhpLpEsLdqs6cmUMTTQ
2025-10-11 13:27:49 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        prt1_0.id,
        prt1_0.created_at,
        prt1_0.email,
        prt1_0.expiry_date,
        prt1_0.token,
        prt1_0.used 
    from
        password_reset_tokens prt1_0 
    where
        prt1_0.token=?
2025-10-11 13:27:49 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /guest/confirm-appointment?token=4OfzT61tAaRCRdM_AdnLNfaOQev_rMjVSUIK2e5bfNc
2025-10-11 13:27:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /guest/confirm-appointment?token=4OfzT61tAaRCRdM_AdnLNfaOQev_rMjVSUIK2e5bfNc
2025-10-11 13:27:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:27:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /guest/confirm-appointment?token=4OfzT61tAaRCRdM_AdnLNfaOQev_rMjVSUIK2e5bfNc
2025-10-11 13:27:49 [http-nio-8080-exec-2] INFO  c.n.a.service.ClinicContextService - SYSTEM_ADMIN acting as clinic 9 - Reason: %D8%B7%D9%84%D8%A8%20%D9%85%D9%86%20%D8%A5%D8%AF%D8%A7%D8%B1%D8%A9%20%D8%A7%D9%84%D8%B9%D9%8A%D8%A7%D8%AF%D8%A9
2025-10-11 13:27:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* select
        count(*) 
    from
        Clinic x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            clinics c1_0 
        where
            c1_0.id=?
2025-10-11 13:27:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.SystemAdminAction */insert 
    into
        system_admin_actions (action_type, admin_user_id, created_at, ip_address, reason, request_body, request_method, request_path, response_status, target_clinic_id, target_resource_id, target_resource_type, user_agent) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-11 13:27:49 [http-nio-8080-exec-2] INFO  c.n.a.service.ClinicContextService - System Admin Action Logged: User 2 performed CONTEXT_SWITCH on clinic 9 - %D8%B7%D9%84%D8%A8%20%D9%85%D9%86%20%D8%A5%D8%AF%D8%A7%D8%B1%D8%A9%20%D8%A7%D9%84%D8%B9%D9%8A%D8%A7%D8%AF%D8%A9
2025-10-11 13:27:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        act1_0.id,
        act1_0.appointment_id,
        act1_0.confirmed_at,
        act1_0.created_at,
        act1_0.expiry_date,
        act1_0.is_used,
        act1_0.token 
    from
        appointment_confirmation_tokens act1_0 
    where
        act1_0.token=?
2025-10-11 13:27:49 [http-nio-8080-exec-2] ERROR c.n.a.c.GuestBookingController - Error confirming appointment: انتهت صلاحية رابط التأكيد
2025-10-11 13:27:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:27:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 13:27:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.ActivityLog */insert 
    into
        activity_logs (action_type, clinic_id, clinic_name, created_at, description, duration_ms, endpoint, entity_id, entity_name, entity_type, error_message, http_method, ip_address, new_value, old_value, success, timestamp, updated_at, user_agent, user_full_name, user_id, user_role, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-11 13:27:50 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=9
2025-10-11 13:27:50 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/doctors?clinicId=9
2025-10-11 13:27:50 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors?clinicId=9
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=9
2025-10-11 13:27:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=9
2025-10-11 13:27:50 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors?clinicId=9
2025-10-11 13:27:50 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-11 13:27:50 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-11 13:27:50 [http-nio-8080-exec-7] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading appointments from clinic: 9
2025-10-11 13:27:50 [http-nio-8080-exec-10] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading doctors from clinic: 9
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 13:27:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.patient_id,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.clinic_id=? 
    order by
        a1_0.appointment_date desc 
    limit
        ?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(a1_0.id) 
    from
        appointments a1_0 
    where
        a1_0.clinic_id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:27:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:28:08 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=34m9s828ms).
2025-10-11 13:38:16 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=10m8s438ms).
2025-10-11 13:38:23 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinics
2025-10-11 13:38:23 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /public/doctors/available
2025-10-11 13:38:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /public/announcements/active
2025-10-11 13:38:23 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available
2025-10-11 13:38:23 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/announcements/active
2025-10-11 13:38:23 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinics
2025-10-11 13:38:23 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:38:23 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:38:23 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:38:23 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/refresh
2025-10-11 13:38:23 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/refresh
2025-10-11 13:38:23 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:38:23 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/refresh
2025-10-11 13:38:23 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:38:23 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/announcements/active
2025-10-11 13:38:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinics
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available
2025-10-11 13:38:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:38:23 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:38:23 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/announcements/active
2025-10-11 13:38:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinics
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/doctors/available
2025-10-11 13:38:23 [http-nio-8080-exec-6] INFO  c.n.amancare.service.PublicService - Fetching active announcements
2025-10-11 13:38:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT u.clinic 
    FROM
        User u 
    WHERE
        u.role = 'ADMIN' 
        AND u.isActive = true */ select
            distinct c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            u1_0.role='ADMIN' 
            and u1_0.is_active=1
2025-10-11 13:38:23 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Announcement a 
    WHERE
        a.isActive = true 
        AND a.startDate <= :today 
        AND (
            a.endDate IS NULL 
            OR a.endDate >= :today
        ) 
    ORDER BY
        a.priority DESC,
        a.createdAt DESC */ select
            a1_0.id,
            a1_0.action_text,
            a1_0.action_url,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.doctor_id,
            a1_0.end_date,
            a1_0.image_url,
            a1_0.is_active,
            a1_0.message,
            a1_0.priority,
            a1_0.start_date,
            a1_0.title,
            a1_0.type,
            a1_0.updated_at 
        from
            announcements a1_0 
        where
            a1_0.is_active=1 
            and a1_0.start_date<=? 
            and (
                a1_0.end_date is null 
                or a1_0.end_date>=?
            ) 
        order by
            a1_0.priority desc,
            a1_0.created_at desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] INFO  c.n.amancare.service.PublicService - Fetching available doctors for clinic: null
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role=? 
        and u1_0.is_active
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:27 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available
2025-10-11 13:38:27 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/announcements/active
2025-10-11 13:38:27 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinics
2025-10-11 13:38:28 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:38:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/doctors/available
2025-10-11 13:38:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinics
2025-10-11 13:38:28 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/announcements/active
2025-10-11 13:38:28 [http-nio-8080-exec-9] INFO  c.n.amancare.service.PublicService - Fetching active announcements
2025-10-11 13:38:28 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Announcement a 
    WHERE
        a.isActive = true 
        AND a.startDate <= :today 
        AND (
            a.endDate IS NULL 
            OR a.endDate >= :today
        ) 
    ORDER BY
        a.priority DESC,
        a.createdAt DESC */ select
            a1_0.id,
            a1_0.action_text,
            a1_0.action_url,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.doctor_id,
            a1_0.end_date,
            a1_0.image_url,
            a1_0.is_active,
            a1_0.message,
            a1_0.priority,
            a1_0.start_date,
            a1_0.title,
            a1_0.type,
            a1_0.updated_at 
        from
            announcements a1_0 
        where
            a1_0.is_active=1 
            and a1_0.start_date<=? 
            and (
                a1_0.end_date is null 
                or a1_0.end_date>=?
            ) 
        order by
            a1_0.priority desc,
            a1_0.created_at desc
2025-10-11 13:38:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT u.clinic 
    FROM
        User u 
    WHERE
        u.role = 'ADMIN' 
        AND u.isActive = true */ select
            distinct c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            u1_0.role='ADMIN' 
            and u1_0.is_active=1
2025-10-11 13:38:28 [http-nio-8080-exec-1] INFO  c.n.amancare.service.PublicService - Fetching available doctors for clinic: null
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role=? 
        and u1_0.is_active
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:38:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:39:43 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinics
2025-10-11 13:39:43 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinics
2025-10-11 13:39:43 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:39:43 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinics
2025-10-11 13:39:43 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT u.clinic 
    FROM
        User u 
    WHERE
        u.role = 'ADMIN' 
        AND u.isActive = true */ select
            distinct c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            u1_0.role='ADMIN' 
            and u1_0.is_active=1
2025-10-11 13:40:02 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /guest/clinics/9/doctors
2025-10-11 13:40:02 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /guest/clinics/9/doctors
2025-10-11 13:40:02 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:40:02 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /guest/clinics/9/doctors
2025-10-11 13:42:24 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /guest/clinics/9/doctors/18/available-slots?date=2025-10-11&durationMinutes=30
2025-10-11 13:42:24 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /guest/clinics/9/doctors/18/available-slots?date=2025-10-11&durationMinutes=30
2025-10-11 13:42:24 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:42:24 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /guest/clinics/9/doctors/18/available-slots?date=2025-10-11&durationMinutes=30
2025-10-11 13:42:24 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* select
        count(*) 
    from
        Clinic x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            clinics c1_0 
        where
            c1_0.id=?
2025-10-11 13:42:24 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:42:24 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:42:29 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /guest/clinics/9/doctors/18/available-slots?date=2025-10-14&durationMinutes=30
2025-10-11 13:42:29 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /guest/clinics/9/doctors/18/available-slots?date=2025-10-14&durationMinutes=30
2025-10-11 13:42:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:42:29 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /guest/clinics/9/doctors/18/available-slots?date=2025-10-14&durationMinutes=30
2025-10-11 13:42:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* select
        count(*) 
    from
        Clinic x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            clinics c1_0 
        where
            c1_0.id=?
2025-10-11 13:42:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:42:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:42:32 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /guest/clinics/9/doctors/18/available-slots?date=2025-10-16&durationMinutes=30
2025-10-11 13:42:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /guest/clinics/9/doctors/18/available-slots?date=2025-10-16&durationMinutes=30
2025-10-11 13:42:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:42:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /guest/clinics/9/doctors/18/available-slots?date=2025-10-16&durationMinutes=30
2025-10-11 13:43:03 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /guest/book-appointment
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /guest/book-appointment
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /guest/book-appointment
2025-10-11 13:43:03 [http-nio-8080-exec-5] INFO  c.n.a.service.GuestBookingService - Processing guest booking for clinic: 9, doctor: 18
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        du1_0.id,
        du1_0.created_at,
        du1_0.doctor_id,
        du1_0.end_time,
        du1_0.is_recurring,
        du1_0.reason,
        du1_0.recurrence_end_date,
        du1_0.start_time,
        du1_0.unavailability_type,
        du1_0.unavailable_date,
        du1_0.updated_at 
    from
        doctor_unavailability du1_0 
    where
        du1_0.doctor_id=? 
        and du1_0.unavailable_date=?
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.patient_id,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.doctor_id=? 
        and a1_0.appointment_date=?
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.phone=? 
        and p1_0.clinic_id=?
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.email=? 
        and p1_0.clinic_id=?
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id 
    from
        patients p1_0 
    where
        p1_0.clinic_id=? 
        and p1_0.patient_number=? 
    limit
        ?
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.Patient */insert 
    into
        patients (address, allergies, blood_type, chronic_diseases, clinic_id, created_at, date_of_birth, email, emergency_contact_name, emergency_contact_phone, first_name, gender, is_active, last_name, notes, patient_number, phone, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-11 13:43:03 [http-nio-8080-exec-5] INFO  c.n.a.service.GuestBookingService - Created new patient: P2025100008
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.Appointment */insert 
    into
        appointments (appointment_date, appointment_time, appointment_type, chief_complaint, clinic_id, created_at, created_by, doctor_id, duration_minutes, notes, patient_id, status, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-11 13:43:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.AppointmentConfirmationToken */insert 
    into
        appointment_confirmation_tokens (appointment_id, confirmed_at, created_at, expiry_date, is_used, token) 
    values
        (?, ?, ?, ?, ?, ?)
2025-10-11 13:43:10 [http-nio-8080-exec-5] INFO  c.n.amancare.service.EmailService - تم إرسال البريد الإلكتروني HTML إلى: kjbn20000@gmail.com
2025-10-11 13:43:10 [http-nio-8080-exec-5] INFO  c.n.a.service.GuestBookingService - Guest booking created successfully. Appointment ID: 132, Patient Number: P2025100008
2025-10-11 13:43:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:43:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 13:43:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.ActivityLog */insert 
    into
        activity_logs (action_type, clinic_id, clinic_name, created_at, description, duration_ms, endpoint, entity_id, entity_name, entity_type, error_message, http_method, ip_address, new_value, old_value, success, timestamp, updated_at, user_agent, user_full_name, user_id, user_role, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-11 13:43:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=9
2025-10-11 13:43:36 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/doctors?clinicId=9
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=9
2025-10-11 13:43:36 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors?clinicId=9
2025-10-11 13:43:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:43:36 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors?clinicId=9
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=9
2025-10-11 13:43:36 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-11 13:43:36 [http-nio-8080-exec-8] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading appointments from clinic: 9
2025-10-11 13:43:36 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-11 13:43:36 [http-nio-8080-exec-7] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading doctors from clinic: 9
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 13:43:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.patient_id,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.clinic_id=? 
    order by
        a1_0.appointment_date desc 
    limit
        ?
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:43:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:43:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(a1_0.id) 
    from
        appointments a1_0 
    where
        a1_0.clinic_id=?
2025-10-11 13:43:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:43:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:43:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:43:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:43:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:43:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:43:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:43:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:43:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:44:36 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /guest/confirm-appointment?token=Y4lFqG3XHJlVxsxDsqHj5bJR56JmeTbxE4g8EJFjT3Y
2025-10-11 13:44:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /guest/confirm-appointment?token=Y4lFqG3XHJlVxsxDsqHj5bJR56JmeTbxE4g8EJFjT3Y
2025-10-11 13:44:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:44:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /guest/confirm-appointment?token=Y4lFqG3XHJlVxsxDsqHj5bJR56JmeTbxE4g8EJFjT3Y
2025-10-11 13:44:36 [http-nio-8080-exec-9] INFO  c.n.a.service.ClinicContextService - SYSTEM_ADMIN acting as clinic 9 - Reason: %D8%B7%D9%84%D8%A8%20%D9%85%D9%86%20%D8%A5%D8%AF%D8%A7%D8%B1%D8%A9%20%D8%A7%D9%84%D8%B9%D9%8A%D8%A7%D8%AF%D8%A9
2025-10-11 13:44:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* select
        count(*) 
    from
        Clinic x 
    WHERE
        x.id = :id */ select
            count(*) 
        from
            clinics c1_0 
        where
            c1_0.id=?
2025-10-11 13:44:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.SystemAdminAction */insert 
    into
        system_admin_actions (action_type, admin_user_id, created_at, ip_address, reason, request_body, request_method, request_path, response_status, target_clinic_id, target_resource_id, target_resource_type, user_agent) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-11 13:44:36 [http-nio-8080-exec-9] INFO  c.n.a.service.ClinicContextService - System Admin Action Logged: User 2 performed CONTEXT_SWITCH on clinic 9 - %D8%B7%D9%84%D8%A8%20%D9%85%D9%86%20%D8%A5%D8%AF%D8%A7%D8%B1%D8%A9%20%D8%A7%D9%84%D8%B9%D9%8A%D8%A7%D8%AF%D8%A9
2025-10-11 13:44:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        act1_0.id,
        act1_0.appointment_id,
        act1_0.confirmed_at,
        act1_0.created_at,
        act1_0.expiry_date,
        act1_0.is_used,
        act1_0.token 
    from
        appointment_confirmation_tokens act1_0 
    where
        act1_0.token=?
2025-10-11 13:44:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.patient_id,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.id=?
2025-10-11 13:44:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:44:36 [http-nio-8080-exec-9] INFO  c.n.a.service.GuestBookingService - Appointment confirmed: 132
2025-10-11 13:44:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* update
        for com.nakqeeb.amancare.entity.AppointmentConfirmationToken */update appointment_confirmation_tokens 
    set
        appointment_id=?,
        confirmed_at=?,
        expiry_date=?,
        is_used=?,
        token=? 
    where
        id=?
2025-10-11 13:44:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* update
        for com.nakqeeb.amancare.entity.Appointment */update appointments 
    set
        appointment_date=?,
        appointment_time=?,
        appointment_type=?,
        chief_complaint=?,
        clinic_id=?,
        created_by=?,
        doctor_id=?,
        duration_minutes=?,
        notes=?,
        patient_id=?,
        status=?,
        updated_at=? 
    where
        id=?
2025-10-11 13:44:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:44:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 13:44:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.ActivityLog */insert 
    into
        activity_logs (action_type, clinic_id, clinic_name, created_at, description, duration_ms, endpoint, entity_id, entity_name, entity_type, error_message, http_method, ip_address, new_value, old_value, success, timestamp, updated_at, user_agent, user_full_name, user_id, user_role, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-11 13:44:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/doctors?clinicId=9
2025-10-11 13:44:44 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=9
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=9
2025-10-11 13:44:44 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors?clinicId=9
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:44:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:44:44 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors?clinicId=9
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=9
2025-10-11 13:44:44 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-11 13:44:44 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-11 13:44:44 [http-nio-8080-exec-7] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading doctors from clinic: 9
2025-10-11 13:44:44 [http-nio-8080-exec-10] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading appointments from clinic: 9
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 13:44:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.patient_id,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.clinic_id=? 
    order by
        a1_0.appointment_date desc 
    limit
        ?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(a1_0.id) 
    from
        appointments a1_0 
    where
        a1_0.clinic_id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:44:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-11 13:45:09 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /guest/appointments?patientNumber=P2025100008
2025-10-11 13:45:09 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /guest/appointments?patientNumber=P2025100008
2025-10-11 13:45:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:45:09 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /guest/appointments?patientNumber=P2025100008
2025-10-11 13:45:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.patient_number=?
2025-10-11 13:45:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.patient_id,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-11 13:45:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:45:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:45:11 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /guest/appointments?patientNumber=P2025100008
2025-10-11 13:45:11 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:45:11 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /guest/appointments?patientNumber=P2025100008
2025-10-11 13:45:11 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.patient_number=?
2025-10-11 13:45:11 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.patient_id,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-11 13:45:11 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:45:11 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:45:16 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /guest/appointments?patientNumber=P2025100008
2025-10-11 13:45:16 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /guest/appointments?patientNumber=P2025100008
2025-10-11 13:45:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:45:16 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /guest/appointments?patientNumber=P2025100008
2025-10-11 13:45:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.patient_number=?
2025-10-11 13:45:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.patient_id,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-11 13:45:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-11 13:45:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:48:02 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinics
2025-10-11 13:48:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinics
2025-10-11 13:48:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:48:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinics
2025-10-11 13:48:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT u.clinic 
    FROM
        User u 
    WHERE
        u.role = 'ADMIN' 
        AND u.isActive = true */ select
            distinct c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            u1_0.role='ADMIN' 
            and u1_0.is_active=1
2025-10-11 13:51:36 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.html
2025-10-11 13:51:36 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:51:36 [http-nio-8080-exec-6] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:51:36 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.html
2025-10-11 13:51:36 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui.css
2025-10-11 13:51:36 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:51:36 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:51:36 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui.css
2025-10-11 13:51:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-bundle.js
2025-10-11 13:51:36 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:51:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-standalone-preset.js
2025-10-11 13:51:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.css
2025-10-11 13:51:36 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:51:36 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:51:36 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:51:36 [http-nio-8080-exec-9] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:51:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.css
2025-10-11 13:51:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-bundle.js
2025-10-11 13:51:36 [http-nio-8080-exec-2] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:51:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-standalone-preset.js
2025-10-11 13:51:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-initializer.js
2025-10-11 13:51:36 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:51:36 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:51:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-initializer.js
2025-10-11 13:51:36 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs/swagger-config
2025-10-11 13:51:36 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:51:36 [http-nio-8080-exec-7] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:51:36 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs/swagger-config
2025-10-11 13:51:36 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/favicon-32x32.png
2025-10-11 13:51:36 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:51:36 [http-nio-8080-exec-10] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:51:36 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/favicon-32x32.png
2025-10-11 13:51:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs
2025-10-11 13:51:36 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:51:36 [http-nio-8080-exec-8] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:51:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs
2025-10-11 13:51:38 [http-nio-8080-exec-8] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 1463 ms
2025-10-11 13:51:50 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available?clinicId=9
2025-10-11 13:51:50 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:51:50 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:52:31 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-11 13:52:31 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-11 13:52:32 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-11 13:52:32 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-11 13:52:32 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-11 13:52:34 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 62837 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-10-11 13:52:34 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-11 13:52:34 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-11 13:52:34 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-11 13:52:35 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-11 13:52:35 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45 ms. Found 18 JPA repository interfaces.
2025-10-11 13:52:35 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-11 13:52:35 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-11 13:52:35 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-11 13:52:35 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-10-11 13:52:35 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1099 ms
2025-10-11 13:52:35 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-11 13:52:35 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-11 13:52:35 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-11 13:52:35 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-11 13:52:35 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-11 13:52:36 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@30e82326
2025-10-11 13:52:36 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-11 13:52:36 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-11 13:52:36 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-11 13:52:36 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-11 13:52:36 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table activity_logs 
       modify column action_type enum ('CREATE','DELETE','PATCH','UPDATE') not null
2025-10-11 13:52:36 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table announcements 
       modify column priority enum ('HIGH','LOW','MEDIUM','URGENT')
2025-10-11 13:52:36 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table announcements 
       modify column type enum ('CLINIC_HOURS','DOCTOR_AVAILABLE','EMERGENCY','GENERAL','HEALTH_TIP','SPECIAL_OFFER') not null
2025-10-11 13:52:36 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table audit_logs 
       modify column severity enum ('CRITICAL','ERROR','INFO','WARNING')
2025-10-11 13:52:36 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table clinics 
       modify column working_days varchar(20)
2025-10-11 13:52:37 [restartedMain] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:576)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:516)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:334)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:233)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:112)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:280)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:144)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:141)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:324)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:463)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1517)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:66)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:419)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:400)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1873)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:691)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1725)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1690)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1752)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:230)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:184)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:179)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:164)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:271)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:245)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4464)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:203)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:412)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:870)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:438)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:128)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:107)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:517)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:219)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:193)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:167)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:621)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)
	at com.nakqeeb.amancare.AmancareApplication.main(AmancareApplication.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: java.sql.SQLException: Data truncated for column 'working_days' at row 13
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:114)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:837)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:685)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:95)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 125 common frames omitted
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoice_items 
       modify column category enum ('CONSULTATION','EQUIPMENT','LAB_TEST','MEDICATION','OTHER','PROCEDURE','RADIOLOGY','SURGERY','THERAPY','VACCINATION') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoices 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE')
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_diagnoses 
       modify column type enum ('DIFFERENTIAL','FINAL','PRIMARY','PROVISIONAL','RULED_OUT','SECONDARY') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column category enum ('BIOCHEMISTRY','CARDIOLOGY','COAGULATION','ENDOCRINOLOGY','GENETICS','HEMATOLOGY','HEPATOLOGY','IMMUNOLOGY','MICROBIOLOGY','NEPHROLOGY','ONCOLOGY','TOXICOLOGY') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_prescriptions 
       modify column route enum ('INHALATION','INJECTION','INTRAMUSCULAR','INTRAVENOUS','NASAL','OPHTHALMIC','ORAL','OTIC','RECTAL','SUBCUTANEOUS','SUBLINGUAL','TOPICAL') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_procedures 
       modify column category enum ('COSMETIC','DIAGNOSTIC','EMERGENCY','PREVENTIVE','REHABILITATION','SURGICAL','THERAPEUTIC') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column test_type enum ('ANGIOGRAPHY','BONE_SCAN','CT_SCAN','FLUOROSCOPY','MAMMOGRAPHY','MRI','NUCLEAR_MEDICINE','PET_SCAN','ULTRASOUND','X_RAY') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column priority enum ('EMERGENCY','ROUTINE','URGENT') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column referral_type enum ('DENTISTRY','EMERGENCY','ENT','HOSPITAL','LABORATORY','OPHTHALMOLOGY','PHYSIOTHERAPY','PSYCHIATRY','RADIOLOGY','SPECIALIST') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column status enum ('CANCELLED','COMPLETED','DRAFT','IN_PROGRESS','LOCKED','REVIEWED') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column visit_type enum ('CHRONIC_CARE','CONSULTATION','EMERGENCY','FOLLOW_UP','PREVENTIVE_CARE','PROCEDURE','REHABILITATION','ROUTINE_CHECKUP','SURGERY','VACCINATION') not null
2025-10-11 13:52:37 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table payments 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE') not null
2025-10-11 13:52:37 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-11 13:52:37 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-11 13:52:39 [restartedMain] INFO  c.n.a.config.WebConverterConfig - WebConverterConfig initialized - Custom converters will be registered
2025-10-11 13:52:39 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported BloodType formats: O+, O-, A+, A-, B+, B-, AB+, AB-, O_POSITIVE, etc.
2025-10-11 13:52:39 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported Gender formats: MALE, FEMALE, M, F, ذكر, أنثى
2025-10-11 13:52:39 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-11 13:52:39 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-11 13:52:40 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToBloodTypeConverter
2025-10-11 13:52:40 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToGenderConverter
2025-10-11 13:52:40 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-11 13:52:40 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-11 13:52:40 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-10-11 13:52:40 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 6.441 seconds (process running for 6.716)
2025-10-11 13:52:40 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        PasswordResetToken p 
    WHERE
        p.expiryDate < :now */ delete prt1_0 
    from
        password_reset_tokens prt1_0 
    where
        prt1_0.expiry_date<?
2025-10-11 13:52:40 [scheduling-1] INFO  c.n.a.service.PasswordResetService - تم تنظيف الرموز المنتهية الصلاحية
2025-10-11 13:52:40 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        EmailVerificationToken e 
    WHERE
        e.expiryDate < :now */ delete evt1_0 
    from
        email_verification_tokens evt1_0 
    where
        evt1_0.expiry_date<?
2025-10-11 13:52:40 [scheduling-1] INFO  c.n.a.s.EmailVerificationService - تم تنظيف رموز تأكيد البريد الإلكتروني المنتهية الصلاحية
2025-10-11 13:52:41 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-11 13:52:41 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-11 13:52:41 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-10-11 13:52:41 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available?clinicId=9
2025-10-11 13:52:41 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:52:41 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:52:41 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/doctors/available?clinicId=9
2025-10-11 13:52:41 [http-nio-8080-exec-1] INFO  c.n.amancare.service.PublicService - Fetching available doctors for clinic: 9
2025-10-11 13:52:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 13:52:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.clinic_id=? 
        and u1_0.role=? 
        and u1_0.is_active
2025-10-11 13:52:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:52:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available?clinicId=9
2025-10-11 13:52:54 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:52:54 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:52:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/doctors/available?clinicId=9
2025-10-11 13:52:54 [http-nio-8080-exec-3] INFO  c.n.amancare.service.PublicService - Fetching available doctors for clinic: 9
2025-10-11 13:52:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 13:52:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.clinic_id=? 
        and u1_0.role=? 
        and u1_0.is_active
2025-10-11 13:52:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:53:04 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available?clinicId=100
2025-10-11 13:53:04 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:53:04 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:53:04 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/doctors/available?clinicId=100
2025-10-11 13:53:04 [http-nio-8080-exec-5] INFO  c.n.amancare.service.PublicService - Fetching available doctors for clinic: 100
2025-10-11 13:53:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 13:53:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.clinic_id=? 
        and u1_0.role=? 
        and u1_0.is_active
2025-10-11 13:53:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:53:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 13:53:13 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/verify-email?token=usQZCXfmT0FhW7-fQPgbZsJzNXNmqKiFtv8NsrN9NXo
2025-10-11 13:53:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/verify-email?token=usQZCXfmT0FhW7-fQPgbZsJzNXNmqKiFtv8NsrN9NXo
2025-10-11 13:53:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-11 13:53:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/verify-email?token=usQZCXfmT0FhW7-fQPgbZsJzNXNmqKiFtv8NsrN9NXo
2025-10-11 13:53:13 [http-nio-8080-exec-8] WARN  c.n.a.aspect.ActivityLoggingAspect - Failed to get clinic ID: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
2025-10-11 13:53:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        evt1_0.id,
        evt1_0.created_at,
        evt1_0.email,
        evt1_0.expiry_date,
        evt1_0.token,
        evt1_0.used,
        evt1_0.user_id 
    from
        email_verification_tokens evt1_0 
    where
        evt1_0.token=?
2025-10-11 13:53:13 [http-nio-8080-exec-8] ERROR c.n.a.c.EmailVerificationController - خطأ في تفعيل الحساب: رمز التأكيد غير صحيح
2025-10-11 13:53:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/announcements/active
2025-10-11 13:53:36 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:53:36 [http-nio-8080-exec-9] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:53:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/announcements/active
2025-10-11 13:53:36 [http-nio-8080-exec-9] INFO  c.n.amancare.service.PublicService - Fetching active announcements
2025-10-11 13:53:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Announcement a 
    WHERE
        a.isActive = true 
        AND a.startDate <= :today 
        AND (
            a.endDate IS NULL 
            OR a.endDate >= :today
        ) 
    ORDER BY
        a.priority DESC,
        a.createdAt DESC */ select
            a1_0.id,
            a1_0.action_text,
            a1_0.action_url,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.doctor_id,
            a1_0.end_date,
            a1_0.image_url,
            a1_0.is_active,
            a1_0.message,
            a1_0.priority,
            a1_0.start_date,
            a1_0.title,
            a1_0.type,
            a1_0.updated_at 
        from
            announcements a1_0 
        where
            a1_0.is_active=1 
            and a1_0.start_date<=? 
            and (
                a1_0.end_date is null 
                or a1_0.end_date>=?
            ) 
        order by
            a1_0.priority desc,
            a1_0.created_at desc
2025-10-11 13:53:45 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/clinics
2025-10-11 13:53:45 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:53:45 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:53:45 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/clinics
2025-10-11 13:53:45 [http-nio-8080-exec-1] INFO  c.n.amancare.service.PublicService - Fetching active clinics for public
2025-10-11 13:53:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.is_active
2025-10-11 13:53:45 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class java.lang.Object]]
2025-10-11 13:53:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/clinics
2025-10-11 13:53:49 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:53:49 [http-nio-8080-exec-2] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:53:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/clinics
2025-10-11 13:53:49 [http-nio-8080-exec-2] INFO  c.n.amancare.service.PublicService - Fetching active clinics for public
2025-10-11 13:53:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.is_active
2025-10-11 13:53:49 [http-nio-8080-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class java.lang.Object]]
2025-10-11 13:54:07 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-11 13:54:07 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-11 13:54:07 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-11 13:54:07 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-11 13:54:07 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-11 13:54:09 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 63593 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-10-11 13:54:09 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-11 13:54:09 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-11 13:54:09 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-11 13:54:10 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-11 13:54:10 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 47 ms. Found 18 JPA repository interfaces.
2025-10-11 13:54:10 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-11 13:54:10 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-11 13:54:10 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-11 13:54:10 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-10-11 13:54:10 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1157 ms
2025-10-11 13:54:10 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-11 13:54:10 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-11 13:54:10 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-11 13:54:10 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-11 13:54:10 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-11 13:54:11 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@44158a2
2025-10-11 13:54:11 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-11 13:54:11 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-11 13:54:11 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-11 13:54:11 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-11 13:54:11 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table activity_logs 
       modify column action_type enum ('CREATE','DELETE','PATCH','UPDATE') not null
2025-10-11 13:54:11 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table announcements 
       modify column priority enum ('HIGH','LOW','MEDIUM','URGENT')
2025-10-11 13:54:11 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table announcements 
       modify column type enum ('CLINIC_HOURS','DOCTOR_AVAILABLE','EMERGENCY','GENERAL','HEALTH_TIP','SPECIAL_OFFER') not null
2025-10-11 13:54:11 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table audit_logs 
       modify column severity enum ('CRITICAL','ERROR','INFO','WARNING')
2025-10-11 13:54:11 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table clinics 
       modify column working_days varchar(20)
2025-10-11 13:54:12 [restartedMain] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:576)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:516)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:334)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:233)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:112)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:280)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:144)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:141)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:324)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:463)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1517)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:66)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:419)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:400)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1873)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:691)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1725)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1690)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1752)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:230)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:184)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:179)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:164)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:271)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:245)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4464)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:203)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:412)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:870)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:438)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:128)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:107)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:517)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:219)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:193)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:167)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:621)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)
	at com.nakqeeb.amancare.AmancareApplication.main(AmancareApplication.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: java.sql.SQLException: Data truncated for column 'working_days' at row 13
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:114)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:837)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:685)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:95)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 125 common frames omitted
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoice_items 
       modify column category enum ('CONSULTATION','EQUIPMENT','LAB_TEST','MEDICATION','OTHER','PROCEDURE','RADIOLOGY','SURGERY','THERAPY','VACCINATION') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoices 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE')
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_diagnoses 
       modify column type enum ('DIFFERENTIAL','FINAL','PRIMARY','PROVISIONAL','RULED_OUT','SECONDARY') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column category enum ('BIOCHEMISTRY','CARDIOLOGY','COAGULATION','ENDOCRINOLOGY','GENETICS','HEMATOLOGY','HEPATOLOGY','IMMUNOLOGY','MICROBIOLOGY','NEPHROLOGY','ONCOLOGY','TOXICOLOGY') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_prescriptions 
       modify column route enum ('INHALATION','INJECTION','INTRAMUSCULAR','INTRAVENOUS','NASAL','OPHTHALMIC','ORAL','OTIC','RECTAL','SUBCUTANEOUS','SUBLINGUAL','TOPICAL') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_procedures 
       modify column category enum ('COSMETIC','DIAGNOSTIC','EMERGENCY','PREVENTIVE','REHABILITATION','SURGICAL','THERAPEUTIC') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column test_type enum ('ANGIOGRAPHY','BONE_SCAN','CT_SCAN','FLUOROSCOPY','MAMMOGRAPHY','MRI','NUCLEAR_MEDICINE','PET_SCAN','ULTRASOUND','X_RAY') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column priority enum ('EMERGENCY','ROUTINE','URGENT') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column referral_type enum ('DENTISTRY','EMERGENCY','ENT','HOSPITAL','LABORATORY','OPHTHALMOLOGY','PHYSIOTHERAPY','PSYCHIATRY','RADIOLOGY','SPECIALIST') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column status enum ('CANCELLED','COMPLETED','DRAFT','IN_PROGRESS','LOCKED','REVIEWED') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column visit_type enum ('CHRONIC_CARE','CONSULTATION','EMERGENCY','FOLLOW_UP','PREVENTIVE_CARE','PROCEDURE','REHABILITATION','ROUTINE_CHECKUP','SURGERY','VACCINATION') not null
2025-10-11 13:54:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table payments 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE') not null
2025-10-11 13:54:12 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-11 13:54:12 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-11 13:54:13 [restartedMain] INFO  c.n.a.config.WebConverterConfig - WebConverterConfig initialized - Custom converters will be registered
2025-10-11 13:54:13 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported BloodType formats: O+, O-, A+, A-, B+, B-, AB+, AB-, O_POSITIVE, etc.
2025-10-11 13:54:13 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported Gender formats: MALE, FEMALE, M, F, ذكر, أنثى
2025-10-11 13:54:14 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-11 13:54:14 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-11 13:54:14 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToBloodTypeConverter
2025-10-11 13:54:14 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToGenderConverter
2025-10-11 13:54:14 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-11 13:54:15 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-11 13:54:15 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-10-11 13:54:15 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 6.123 seconds (process running for 6.401)
2025-10-11 13:54:15 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        PasswordResetToken p 
    WHERE
        p.expiryDate < :now */ delete prt1_0 
    from
        password_reset_tokens prt1_0 
    where
        prt1_0.expiry_date<?
2025-10-11 13:54:15 [scheduling-1] INFO  c.n.a.service.PasswordResetService - تم تنظيف الرموز المنتهية الصلاحية
2025-10-11 13:54:15 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        EmailVerificationToken e 
    WHERE
        e.expiryDate < :now */ delete evt1_0 
    from
        email_verification_tokens evt1_0 
    where
        evt1_0.expiry_date<?
2025-10-11 13:54:15 [scheduling-1] INFO  c.n.a.s.EmailVerificationService - تم تنظيف رموز تأكيد البريد الإلكتروني المنتهية الصلاحية
2025-10-11 13:54:17 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-11 13:54:17 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-11 13:54:17 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-10-11 13:54:17 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/clinics
2025-10-11 13:54:17 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 13:54:17 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 13:54:17 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/clinics
2025-10-11 13:54:17 [http-nio-8080-exec-1] INFO  c.n.amancare.service.PublicService - Fetching active clinics for public
2025-10-11 13:54:17 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.is_active
2025-10-11 13:54:17 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class java.lang.Object]]
2025-10-11 14:05:35 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-11 14:05:35 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-11 14:05:35 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-11 14:05:35 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-11 14:05:35 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-11 14:05:38 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 69147 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-10-11 14:05:38 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-11 14:05:38 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-11 14:05:38 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-11 14:05:38 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-11 14:05:38 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44 ms. Found 18 JPA repository interfaces.
2025-10-11 14:05:39 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-11 14:05:39 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-11 14:05:39 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-11 14:05:39 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-10-11 14:05:39 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1061 ms
2025-10-11 14:05:39 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-11 14:05:39 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-11 14:05:39 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-11 14:05:39 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-11 14:05:39 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-11 14:05:39 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@63d7ad80
2025-10-11 14:05:39 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-11 14:05:39 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-11 14:05:39 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-11 14:05:40 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table activity_logs 
       modify column action_type enum ('CREATE','DELETE','PATCH','UPDATE') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table announcements 
       modify column priority enum ('HIGH','LOW','MEDIUM','URGENT')
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table announcements 
       modify column type enum ('CLINIC_HOURS','DOCTOR_AVAILABLE','EMERGENCY','GENERAL','HEALTH_TIP','SPECIAL_OFFER') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table audit_logs 
       modify column severity enum ('CRITICAL','ERROR','INFO','WARNING')
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table clinics 
       modify column working_days varchar(20)
2025-10-11 14:05:40 [restartedMain] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:576)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:516)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:334)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:233)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:112)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:280)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:144)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:141)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:324)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:463)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1517)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:66)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:419)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:400)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1873)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:691)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1725)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1690)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1752)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:230)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:184)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:179)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:164)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:271)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:245)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4464)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:203)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:412)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:870)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:438)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:128)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:107)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:517)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:219)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:193)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:167)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:621)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)
	at com.nakqeeb.amancare.AmancareApplication.main(AmancareApplication.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: java.sql.SQLException: Data truncated for column 'working_days' at row 13
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:114)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:837)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:685)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:95)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 125 common frames omitted
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoice_items 
       modify column category enum ('CONSULTATION','EQUIPMENT','LAB_TEST','MEDICATION','OTHER','PROCEDURE','RADIOLOGY','SURGERY','THERAPY','VACCINATION') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoices 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE')
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_diagnoses 
       modify column type enum ('DIFFERENTIAL','FINAL','PRIMARY','PROVISIONAL','RULED_OUT','SECONDARY') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column category enum ('BIOCHEMISTRY','CARDIOLOGY','COAGULATION','ENDOCRINOLOGY','GENETICS','HEMATOLOGY','HEPATOLOGY','IMMUNOLOGY','MICROBIOLOGY','NEPHROLOGY','ONCOLOGY','TOXICOLOGY') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_prescriptions 
       modify column route enum ('INHALATION','INJECTION','INTRAMUSCULAR','INTRAVENOUS','NASAL','OPHTHALMIC','ORAL','OTIC','RECTAL','SUBCUTANEOUS','SUBLINGUAL','TOPICAL') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_procedures 
       modify column category enum ('COSMETIC','DIAGNOSTIC','EMERGENCY','PREVENTIVE','REHABILITATION','SURGICAL','THERAPEUTIC') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column test_type enum ('ANGIOGRAPHY','BONE_SCAN','CT_SCAN','FLUOROSCOPY','MAMMOGRAPHY','MRI','NUCLEAR_MEDICINE','PET_SCAN','ULTRASOUND','X_RAY') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column priority enum ('EMERGENCY','ROUTINE','URGENT') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column referral_type enum ('DENTISTRY','EMERGENCY','ENT','HOSPITAL','LABORATORY','OPHTHALMOLOGY','PHYSIOTHERAPY','PSYCHIATRY','RADIOLOGY','SPECIALIST') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column status enum ('CANCELLED','COMPLETED','DRAFT','IN_PROGRESS','LOCKED','REVIEWED') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column visit_type enum ('CHRONIC_CARE','CONSULTATION','EMERGENCY','FOLLOW_UP','PREVENTIVE_CARE','PROCEDURE','REHABILITATION','ROUTINE_CHECKUP','SURGERY','VACCINATION') not null
2025-10-11 14:05:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table payments 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE') not null
2025-10-11 14:05:40 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-11 14:05:41 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-11 14:05:42 [restartedMain] INFO  c.n.a.config.WebConverterConfig - WebConverterConfig initialized - Custom converters will be registered
2025-10-11 14:05:42 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported BloodType formats: O+, O-, A+, A-, B+, B-, AB+, AB-, O_POSITIVE, etc.
2025-10-11 14:05:42 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported Gender formats: MALE, FEMALE, M, F, ذكر, أنثى
2025-10-11 14:05:42 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-11 14:05:42 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-11 14:05:43 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToBloodTypeConverter
2025-10-11 14:05:43 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToGenderConverter
2025-10-11 14:05:43 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-11 14:05:43 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-11 14:05:43 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-10-11 14:05:43 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 5.846 seconds (process running for 6.094)
2025-10-11 14:05:43 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        PasswordResetToken p 
    WHERE
        p.expiryDate < :now */ delete prt1_0 
    from
        password_reset_tokens prt1_0 
    where
        prt1_0.expiry_date<?
2025-10-11 14:05:43 [scheduling-1] INFO  c.n.a.service.PasswordResetService - تم تنظيف الرموز المنتهية الصلاحية
2025-10-11 14:05:43 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        EmailVerificationToken e 
    WHERE
        e.expiryDate < :now */ delete evt1_0 
    from
        email_verification_tokens evt1_0 
    where
        evt1_0.expiry_date<?
2025-10-11 14:05:43 [scheduling-1] INFO  c.n.a.s.EmailVerificationService - تم تنظيف رموز تأكيد البريد الإلكتروني المنتهية الصلاحية
2025-10-11 14:05:46 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-11 14:05:46 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-11 14:05:46 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-11 14:05:46 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/clinics
2025-10-11 14:05:46 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 14:05:46 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 14:05:46 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/clinics
2025-10-11 14:05:46 [http-nio-8080-exec-1] INFO  c.n.amancare.service.PublicService - Fetching active clinics for public
2025-10-11 14:05:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Clinic c 
    WHERE
        c.isActive = true */ select
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start 
        from
            clinics c1_0 
        where
            c1_0.is_active=1
2025-10-11 14:05:46 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class java.lang.Object]]
2025-10-11 14:11:29 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-11 14:11:29 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-11 14:11:29 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-11 14:11:29 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-11 14:11:29 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-11 14:12:46 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 72559 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-10-11 14:12:46 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-11 14:12:46 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-11 14:12:46 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-11 14:12:47 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-11 14:12:47 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45 ms. Found 18 JPA repository interfaces.
2025-10-11 14:12:47 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-11 14:12:47 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-11 14:12:47 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-11 14:12:47 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-10-11 14:12:47 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1134 ms
2025-10-11 14:12:47 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-11 14:12:47 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-11 14:12:47 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-11 14:12:47 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-11 14:12:47 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-11 14:12:47 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@672f14c2
2025-10-11 14:12:47 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-11 14:12:48 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-11 14:12:48 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-11 14:12:48 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-11 14:12:48 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table activity_logs 
       modify column action_type enum ('CREATE','DELETE','PATCH','UPDATE') not null
2025-10-11 14:12:48 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table announcements 
       modify column priority enum ('HIGH','LOW','MEDIUM','URGENT')
2025-10-11 14:12:48 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table announcements 
       modify column type enum ('CLINIC_HOURS','DOCTOR_AVAILABLE','EMERGENCY','GENERAL','HEALTH_TIP','SPECIAL_OFFER') not null
2025-10-11 14:12:48 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table audit_logs 
       modify column severity enum ('CRITICAL','ERROR','INFO','WARNING')
2025-10-11 14:12:48 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table clinics 
       modify column working_days varchar(20)
2025-10-11 14:12:49 [restartedMain] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:576)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:516)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:334)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:233)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:112)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:280)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:144)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:141)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:324)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:463)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1517)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:66)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:419)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:400)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1873)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:691)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1725)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1690)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1752)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:230)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:184)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:179)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:164)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:271)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:245)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4464)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:203)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:412)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:870)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:438)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:128)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:107)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:517)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:219)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:193)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:167)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:621)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)
	at com.nakqeeb.amancare.AmancareApplication.main(AmancareApplication.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: java.sql.SQLException: Data truncated for column 'working_days' at row 13
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:114)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:837)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:685)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:95)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 125 common frames omitted
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoice_items 
       modify column category enum ('CONSULTATION','EQUIPMENT','LAB_TEST','MEDICATION','OTHER','PROCEDURE','RADIOLOGY','SURGERY','THERAPY','VACCINATION') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoices 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE')
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_diagnoses 
       modify column type enum ('DIFFERENTIAL','FINAL','PRIMARY','PROVISIONAL','RULED_OUT','SECONDARY') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column category enum ('BIOCHEMISTRY','CARDIOLOGY','COAGULATION','ENDOCRINOLOGY','GENETICS','HEMATOLOGY','HEPATOLOGY','IMMUNOLOGY','MICROBIOLOGY','NEPHROLOGY','ONCOLOGY','TOXICOLOGY') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_prescriptions 
       modify column route enum ('INHALATION','INJECTION','INTRAMUSCULAR','INTRAVENOUS','NASAL','OPHTHALMIC','ORAL','OTIC','RECTAL','SUBCUTANEOUS','SUBLINGUAL','TOPICAL') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_procedures 
       modify column category enum ('COSMETIC','DIAGNOSTIC','EMERGENCY','PREVENTIVE','REHABILITATION','SURGICAL','THERAPEUTIC') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column test_type enum ('ANGIOGRAPHY','BONE_SCAN','CT_SCAN','FLUOROSCOPY','MAMMOGRAPHY','MRI','NUCLEAR_MEDICINE','PET_SCAN','ULTRASOUND','X_RAY') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column priority enum ('EMERGENCY','ROUTINE','URGENT') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column referral_type enum ('DENTISTRY','EMERGENCY','ENT','HOSPITAL','LABORATORY','OPHTHALMOLOGY','PHYSIOTHERAPY','PSYCHIATRY','RADIOLOGY','SPECIALIST') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column status enum ('CANCELLED','COMPLETED','DRAFT','IN_PROGRESS','LOCKED','REVIEWED') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column visit_type enum ('CHRONIC_CARE','CONSULTATION','EMERGENCY','FOLLOW_UP','PREVENTIVE_CARE','PROCEDURE','REHABILITATION','ROUTINE_CHECKUP','SURGERY','VACCINATION') not null
2025-10-11 14:12:49 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table payments 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE') not null
2025-10-11 14:12:49 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-11 14:12:49 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-11 14:12:50 [restartedMain] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'activityLoggingAspect': Unsatisfied dependency expressed through field 'activityLogService': Error creating bean with name 'activityLogService': Unsatisfied dependency expressed through field 'clinicRepository': Error creating bean with name 'clinicRepository' defined in com.nakqeeb.amancare.repository.ClinicRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract org.springframework.data.domain.Page com.nakqeeb.amancare.repository.ClinicRepository.findByIsActiveTrue(); Reason: Paging query needs to have a Pageable parameter; Offending method: public abstract org.springframework.data.domain.Page com.nakqeeb.amancare.repository.ClinicRepository.findByIsActiveTrue()
2025-10-11 14:12:50 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-11 14:12:50 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-11 14:12:50 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-11 14:12:50 [restartedMain] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-10-11 14:12:50 [restartedMain] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-10-11 14:12:50 [restartedMain] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'activityLoggingAspect': Unsatisfied dependency expressed through field 'activityLogService': Error creating bean with name 'activityLogService': Unsatisfied dependency expressed through field 'clinicRepository': Error creating bean with name 'clinicRepository' defined in com.nakqeeb.amancare.repository.ClinicRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract org.springframework.data.domain.Page com.nakqeeb.amancare.repository.ClinicRepository.findByIsActiveTrue(); Reason: Paging query needs to have a Pageable parameter; Offending method: public abstract org.springframework.data.domain.Page com.nakqeeb.amancare.repository.ClinicRepository.findByIsActiveTrue()
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:788)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1222)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1188)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1123)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)
	at com.nakqeeb.amancare.AmancareApplication.main(AmancareApplication.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'activityLogService': Unsatisfied dependency expressed through field 'clinicRepository': Error creating bean with name 'clinicRepository' defined in com.nakqeeb.amancare.repository.ClinicRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract org.springframework.data.domain.Page com.nakqeeb.amancare.repository.ClinicRepository.findByIsActiveTrue(); Reason: Paging query needs to have a Pageable parameter; Offending method: public abstract org.springframework.data.domain.Page com.nakqeeb.amancare.repository.ClinicRepository.findByIsActiveTrue()
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:788)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1690)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	... 25 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'clinicRepository' defined in com.nakqeeb.amancare.repository.ClinicRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract org.springframework.data.domain.Page com.nakqeeb.amancare.repository.ClinicRepository.findByIsActiveTrue(); Reason: Paging query needs to have a Pageable parameter; Offending method: public abstract org.springframework.data.domain.Page com.nakqeeb.amancare.repository.ClinicRepository.findByIsActiveTrue()
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1826)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1690)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	... 38 common frames omitted
Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract org.springframework.data.domain.Page com.nakqeeb.amancare.repository.ClinicRepository.findByIsActiveTrue(); Reason: Paging query needs to have a Pageable parameter; Offending method: public abstract org.springframework.data.domain.Page com.nakqeeb.amancare.repository.ClinicRepository.findByIsActiveTrue()
	at org.springframework.data.repository.query.QueryCreationException.create(QueryCreationException.java:101)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:120)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:104)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:92)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.<init>(QueryExecutorMethodInterceptor.java:92)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:434)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$4(RepositoryFactoryBeanSupport.java:350)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:356)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1873)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1822)
	... 47 common frames omitted
Caused by: java.lang.IllegalArgumentException: Paging query needs to have a Pageable parameter; Offending method: public abstract org.springframework.data.domain.Page com.nakqeeb.amancare.repository.ClinicRepository.findByIsActiveTrue()
	at org.springframework.util.Assert.isTrue(Assert.java:116)
	at org.springframework.data.repository.query.QueryMethod.validate(QueryMethod.java:152)
	at org.springframework.data.repository.query.QueryMethod.<init>(QueryMethod.java:125)
	at org.springframework.data.jpa.repository.query.JpaQueryMethod.<init>(JpaQueryMethod.java:118)
	at org.springframework.data.jpa.repository.query.JpaQueryMethod.<init>(JpaQueryMethod.java:102)
	at org.springframework.data.jpa.repository.query.DefaultJpaQueryMethodFactory.build(DefaultJpaQueryMethodFactory.java:44)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:98)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:116)
	... 59 common frames omitted
2025-10-11 14:16:37 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 74418 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-10-11 14:16:37 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-11 14:16:37 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-11 14:16:37 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-11 14:16:37 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-11 14:16:37 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44 ms. Found 18 JPA repository interfaces.
2025-10-11 14:16:38 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-11 14:16:38 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-11 14:16:38 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-11 14:16:38 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-10-11 14:16:38 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1037 ms
2025-10-11 14:16:38 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-11 14:16:38 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-11 14:16:38 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-11 14:16:38 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-11 14:16:38 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-11 14:16:38 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@57cbb34f
2025-10-11 14:16:38 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-11 14:16:38 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-11 14:16:38 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-11 14:16:39 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-11 14:16:39 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table activity_logs 
       modify column action_type enum ('CREATE','DELETE','PATCH','UPDATE') not null
2025-10-11 14:16:39 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table announcements 
       modify column priority enum ('HIGH','LOW','MEDIUM','URGENT')
2025-10-11 14:16:39 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table announcements 
       modify column type enum ('CLINIC_HOURS','DOCTOR_AVAILABLE','EMERGENCY','GENERAL','HEALTH_TIP','SPECIAL_OFFER') not null
2025-10-11 14:16:39 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table audit_logs 
       modify column severity enum ('CRITICAL','ERROR','INFO','WARNING')
2025-10-11 14:16:39 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table clinics 
       modify column working_days varchar(20)
2025-10-11 14:16:40 [restartedMain] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:576)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:516)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:334)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:233)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:112)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:280)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:144)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:141)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:324)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:463)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1517)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:66)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:419)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:400)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1873)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:691)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1725)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1690)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1752)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:230)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:184)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:179)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:164)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:271)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:245)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4464)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:203)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:412)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:870)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:438)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:128)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:107)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:517)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:219)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:193)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:167)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:621)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)
	at com.nakqeeb.amancare.AmancareApplication.main(AmancareApplication.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: java.sql.SQLException: Data truncated for column 'working_days' at row 13
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:114)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:837)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:685)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:95)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 125 common frames omitted
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoice_items 
       modify column category enum ('CONSULTATION','EQUIPMENT','LAB_TEST','MEDICATION','OTHER','PROCEDURE','RADIOLOGY','SURGERY','THERAPY','VACCINATION') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoices 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE')
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_diagnoses 
       modify column type enum ('DIFFERENTIAL','FINAL','PRIMARY','PROVISIONAL','RULED_OUT','SECONDARY') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column category enum ('BIOCHEMISTRY','CARDIOLOGY','COAGULATION','ENDOCRINOLOGY','GENETICS','HEMATOLOGY','HEPATOLOGY','IMMUNOLOGY','MICROBIOLOGY','NEPHROLOGY','ONCOLOGY','TOXICOLOGY') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_prescriptions 
       modify column route enum ('INHALATION','INJECTION','INTRAMUSCULAR','INTRAVENOUS','NASAL','OPHTHALMIC','ORAL','OTIC','RECTAL','SUBCUTANEOUS','SUBLINGUAL','TOPICAL') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_procedures 
       modify column category enum ('COSMETIC','DIAGNOSTIC','EMERGENCY','PREVENTIVE','REHABILITATION','SURGICAL','THERAPEUTIC') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column test_type enum ('ANGIOGRAPHY','BONE_SCAN','CT_SCAN','FLUOROSCOPY','MAMMOGRAPHY','MRI','NUCLEAR_MEDICINE','PET_SCAN','ULTRASOUND','X_RAY') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column priority enum ('EMERGENCY','ROUTINE','URGENT') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column referral_type enum ('DENTISTRY','EMERGENCY','ENT','HOSPITAL','LABORATORY','OPHTHALMOLOGY','PHYSIOTHERAPY','PSYCHIATRY','RADIOLOGY','SPECIALIST') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column status enum ('CANCELLED','COMPLETED','DRAFT','IN_PROGRESS','LOCKED','REVIEWED') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column visit_type enum ('CHRONIC_CARE','CONSULTATION','EMERGENCY','FOLLOW_UP','PREVENTIVE_CARE','PROCEDURE','REHABILITATION','ROUTINE_CHECKUP','SURGERY','VACCINATION') not null
2025-10-11 14:16:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table payments 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE') not null
2025-10-11 14:16:40 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-11 14:16:40 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-11 14:16:41 [restartedMain] INFO  c.n.a.config.WebConverterConfig - WebConverterConfig initialized - Custom converters will be registered
2025-10-11 14:16:41 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported BloodType formats: O+, O-, A+, A-, B+, B-, AB+, AB-, O_POSITIVE, etc.
2025-10-11 14:16:41 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported Gender formats: MALE, FEMALE, M, F, ذكر, أنثى
2025-10-11 14:16:42 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-11 14:16:42 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-11 14:16:42 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToBloodTypeConverter
2025-10-11 14:16:42 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToGenderConverter
2025-10-11 14:16:42 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-11 14:16:43 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-11 14:16:43 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-10-11 14:16:43 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 6.138 seconds (process running for 6.39)
2025-10-11 14:16:43 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        PasswordResetToken p 
    WHERE
        p.expiryDate < :now */ delete prt1_0 
    from
        password_reset_tokens prt1_0 
    where
        prt1_0.expiry_date<?
2025-10-11 14:16:43 [scheduling-1] INFO  c.n.a.service.PasswordResetService - تم تنظيف الرموز المنتهية الصلاحية
2025-10-11 14:16:43 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        EmailVerificationToken e 
    WHERE
        e.expiryDate < :now */ delete evt1_0 
    from
        email_verification_tokens evt1_0 
    where
        evt1_0.expiry_date<?
2025-10-11 14:16:43 [scheduling-1] INFO  c.n.a.s.EmailVerificationService - تم تنظيف رموز تأكيد البريد الإلكتروني المنتهية الصلاحية
2025-10-11 14:16:46 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-11 14:16:46 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-11 14:16:46 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-11 14:16:46 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/clinics
2025-10-11 14:16:46 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 14:16:46 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 14:16:46 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/clinics
2025-10-11 14:16:46 [http-nio-8080-exec-1] INFO  c.n.amancare.service.PublicService - Fetching active clinics for public
2025-10-11 14:16:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.is_active
2025-10-11 14:17:05 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/announcements/active
2025-10-11 14:17:05 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 14:17:05 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 14:17:05 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/announcements/active
2025-10-11 14:17:05 [http-nio-8080-exec-3] INFO  c.n.amancare.service.PublicService - Fetching active announcements
2025-10-11 14:17:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Announcement a 
    WHERE
        a.isActive = true 
        AND a.startDate <= :today 
        AND (
            a.endDate IS NULL 
            OR a.endDate >= :today
        ) 
    ORDER BY
        a.priority DESC,
        a.createdAt DESC */ select
            a1_0.id,
            a1_0.action_text,
            a1_0.action_url,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.doctor_id,
            a1_0.end_date,
            a1_0.image_url,
            a1_0.is_active,
            a1_0.message,
            a1_0.priority,
            a1_0.start_date,
            a1_0.title,
            a1_0.type,
            a1_0.updated_at 
        from
            announcements a1_0 
        where
            a1_0.is_active=1 
            and a1_0.start_date<=? 
            and (
                a1_0.end_date is null 
                or a1_0.end_date>=?
            ) 
        order by
            a1_0.priority desc,
            a1_0.created_at desc
2025-10-11 14:17:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available?clinicId=100
2025-10-11 14:17:13 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 14:17:13 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 14:17:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/doctors/available?clinicId=100
2025-10-11 14:17:13 [http-nio-8080-exec-5] INFO  c.n.amancare.service.PublicService - Fetching available doctors for clinic: 100
2025-10-11 14:17:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 14:17:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.clinic_id=? 
        and u1_0.role=? 
        and u1_0.is_active
2025-10-11 14:17:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 14:17:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 14:17:19 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available?clinicId=9
2025-10-11 14:17:19 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 14:17:19 [http-nio-8080-exec-7] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 14:17:19 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/doctors/available?clinicId=9
2025-10-11 14:17:19 [http-nio-8080-exec-7] INFO  c.n.amancare.service.PublicService - Fetching available doctors for clinic: 9
2025-10-11 14:17:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 14:17:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.clinic_id=? 
        and u1_0.role=? 
        and u1_0.is_active
2025-10-11 14:17:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
2025-10-11 14:17:27 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available?clinicId=4
2025-10-11 14:17:27 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 14:17:27 [http-nio-8080-exec-9] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 14:17:27 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/doctors/available?clinicId=4
2025-10-11 14:17:27 [http-nio-8080-exec-9] INFO  c.n.amancare.service.PublicService - Fetching available doctors for clinic: 4
2025-10-11 14:17:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 14:17:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.clinic_id=? 
        and u1_0.role=? 
        and u1_0.is_active
2025-10-11 14:19:55 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-11 14:19:55 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-11 14:19:55 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-11 14:19:55 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-11 14:19:55 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-11 14:19:57 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 76008 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-10-11 14:19:57 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-11 14:19:57 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-11 14:19:57 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-11 14:19:57 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-11 14:19:57 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 47 ms. Found 18 JPA repository interfaces.
2025-10-11 14:19:58 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-11 14:19:58 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-11 14:19:58 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-11 14:19:58 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-10-11 14:19:58 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1123 ms
2025-10-11 14:19:58 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-11 14:19:58 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-11 14:19:58 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-11 14:19:58 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-11 14:19:58 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-11 14:19:58 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@65a39d8b
2025-10-11 14:19:58 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-11 14:19:58 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-11 14:19:58 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-11 14:19:59 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-11 14:19:59 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table activity_logs 
       modify column action_type enum ('CREATE','DELETE','PATCH','UPDATE') not null
2025-10-11 14:19:59 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table announcements 
       modify column priority enum ('HIGH','LOW','MEDIUM','URGENT')
2025-10-11 14:19:59 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table announcements 
       modify column type enum ('CLINIC_HOURS','DOCTOR_AVAILABLE','EMERGENCY','GENERAL','HEALTH_TIP','SPECIAL_OFFER') not null
2025-10-11 14:19:59 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table audit_logs 
       modify column severity enum ('CRITICAL','ERROR','INFO','WARNING')
2025-10-11 14:19:59 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table clinics 
       modify column working_days varchar(20)
2025-10-11 14:20:00 [restartedMain] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:576)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:516)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:334)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:233)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:112)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:280)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:144)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:141)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:324)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:463)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1517)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:66)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:419)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:400)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1873)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:691)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1725)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1690)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1752)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:230)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:184)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:179)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:164)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:271)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:245)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4464)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:203)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:412)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:870)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:438)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:128)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:107)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:517)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:219)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:193)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:167)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:621)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)
	at com.nakqeeb.amancare.AmancareApplication.main(AmancareApplication.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: java.sql.SQLException: Data truncated for column 'working_days' at row 13
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:114)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:837)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:685)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:95)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 125 common frames omitted
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoice_items 
       modify column category enum ('CONSULTATION','EQUIPMENT','LAB_TEST','MEDICATION','OTHER','PROCEDURE','RADIOLOGY','SURGERY','THERAPY','VACCINATION') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoices 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE')
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_diagnoses 
       modify column type enum ('DIFFERENTIAL','FINAL','PRIMARY','PROVISIONAL','RULED_OUT','SECONDARY') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column category enum ('BIOCHEMISTRY','CARDIOLOGY','COAGULATION','ENDOCRINOLOGY','GENETICS','HEMATOLOGY','HEPATOLOGY','IMMUNOLOGY','MICROBIOLOGY','NEPHROLOGY','ONCOLOGY','TOXICOLOGY') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_prescriptions 
       modify column route enum ('INHALATION','INJECTION','INTRAMUSCULAR','INTRAVENOUS','NASAL','OPHTHALMIC','ORAL','OTIC','RECTAL','SUBCUTANEOUS','SUBLINGUAL','TOPICAL') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_procedures 
       modify column category enum ('COSMETIC','DIAGNOSTIC','EMERGENCY','PREVENTIVE','REHABILITATION','SURGICAL','THERAPEUTIC') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column test_type enum ('ANGIOGRAPHY','BONE_SCAN','CT_SCAN','FLUOROSCOPY','MAMMOGRAPHY','MRI','NUCLEAR_MEDICINE','PET_SCAN','ULTRASOUND','X_RAY') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column priority enum ('EMERGENCY','ROUTINE','URGENT') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column referral_type enum ('DENTISTRY','EMERGENCY','ENT','HOSPITAL','LABORATORY','OPHTHALMOLOGY','PHYSIOTHERAPY','PSYCHIATRY','RADIOLOGY','SPECIALIST') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column status enum ('CANCELLED','COMPLETED','DRAFT','IN_PROGRESS','LOCKED','REVIEWED') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column visit_type enum ('CHRONIC_CARE','CONSULTATION','EMERGENCY','FOLLOW_UP','PREVENTIVE_CARE','PROCEDURE','REHABILITATION','ROUTINE_CHECKUP','SURGERY','VACCINATION') not null
2025-10-11 14:20:00 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table payments 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE') not null
2025-10-11 14:20:00 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-11 14:20:00 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-11 14:20:01 [restartedMain] INFO  c.n.a.config.WebConverterConfig - WebConverterConfig initialized - Custom converters will be registered
2025-10-11 14:20:01 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported BloodType formats: O+, O-, A+, A-, B+, B-, AB+, AB-, O_POSITIVE, etc.
2025-10-11 14:20:01 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported Gender formats: MALE, FEMALE, M, F, ذكر, أنثى
2025-10-11 14:20:02 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-11 14:20:02 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-11 14:20:02 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToBloodTypeConverter
2025-10-11 14:20:02 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToGenderConverter
2025-10-11 14:20:02 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-11 14:20:02 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-11 14:20:02 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-10-11 14:20:02 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 5.981 seconds (process running for 6.225)
2025-10-11 14:20:02 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        PasswordResetToken p 
    WHERE
        p.expiryDate < :now */ delete prt1_0 
    from
        password_reset_tokens prt1_0 
    where
        prt1_0.expiry_date<?
2025-10-11 14:20:02 [scheduling-1] INFO  c.n.a.service.PasswordResetService - تم تنظيف الرموز المنتهية الصلاحية
2025-10-11 14:20:02 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        EmailVerificationToken e 
    WHERE
        e.expiryDate < :now */ delete evt1_0 
    from
        email_verification_tokens evt1_0 
    where
        evt1_0.expiry_date<?
2025-10-11 14:20:02 [scheduling-1] INFO  c.n.a.s.EmailVerificationService - تم تنظيف رموز تأكيد البريد الإلكتروني المنتهية الصلاحية
2025-10-11 14:20:11 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-11 14:20:11 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-11 14:20:11 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-11 14:20:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /public/doctors/available?clinicId=9
2025-10-11 14:20:11 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-11 14:20:11 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-11 14:20:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /public/doctors/available?clinicId=9
2025-10-11 14:20:11 [http-nio-8080-exec-1] INFO  c.n.amancare.service.PublicService - Fetching available doctors for clinic: 9
2025-10-11 14:20:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-11 14:20:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.clinic_id=? 
        and u1_0.role=? 
        and u1_0.is_active
2025-10-11 14:20:11 [http-nio-8080-exec-1] INFO  c.n.amancare.service.PublicService - Found 1 doctors for clinic 9
2025-10-11 14:20:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor = :doctor 
        AND ds.dayOfWeek = :dayOfWeek 
        AND ds.isActive = true 
        AND (
            ds.effectiveDate IS NULL 
            OR ds.effectiveDate <= :date
        ) 
        AND (
            ds.endDate IS NULL 
            OR ds.endDate >= :date
        ) 
    ORDER BY
        ds.effectiveDate DESC */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        where
            ds1_0.doctor_id=? 
            and ds1_0.day_of_week=? 
            and ds1_0.is_active=1 
            and (
                ds1_0.effective_date is null 
                or ds1_0.effective_date<=?
            ) 
            and (
                ds1_0.end_date is null 
                or ds1_0.end_date>=?
            ) 
        order by
            ds1_0.effective_date desc
