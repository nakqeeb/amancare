2025-10-04 00:02:55 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 00:02:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 00:02:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 00:02:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 00:02:55 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 00:02:55 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 00:02:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 00:02:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/28
2025-10-04 00:02:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/28
2025-10-04 00:02:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 00:02:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/28
2025-10-04 00:02:55 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientById(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 00:02:55 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientById(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 00:02:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 00:02:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 00:02:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/search?page=0&size=20&sortBy=timestamp&sortDirection=DESC
2025-10-04 00:02:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/search?page=0&size=20&sortBy=timestamp&sortDirection=DESC
2025-10-04 00:02:56 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 00:02:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/search?page=0&size=20&sortBy=timestamp&sortDirection=DESC
2025-10-04 00:02:56 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.searchActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,com.nakqeeb.amancare.entity.ActionType,java.lang.String,java.time.LocalDateTime,java.time.LocalDateTime,java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 00:02:56 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.searchActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,com.nakqeeb.amancare.entity.ActionType,java.lang.String,java.time.LocalDateTime,java.time.LocalDateTime,java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 00:02:56 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        ActivityLog a 
    WHERE
        a.clinicId = :clinicId 
        AND (
            :userId IS NULL 
            OR a.userId = :userId
        ) 
        AND (
            :actionType IS NULL 
            OR a.actionType = :actionType
        ) 
        AND (
            :entityType IS NULL 
            OR a.entityType = :entityType
        ) 
        AND (
            :startDate IS NULL 
            OR a.timestamp >= :startDate
        ) 
        AND (
            :endDate IS NULL 
            OR a.timestamp <= :endDate
        ) 
        AND (
            :searchTerm IS NULL 
            OR LOWER(a.description) LIKE LOWER(CONCAT('%', :searchTerm, '%')) 
            OR LOWER(a.entityName) LIKE LOWER(CONCAT('%', :searchTerm, '%'))
        ) 
    ORDER BY
        a.timestamp DESC,
        a.timestamp desc */ select
            al1_0.id,
            al1_0.action_type,
            al1_0.clinic_id,
            al1_0.clinic_name,
            al1_0.created_at,
            al1_0.description,
            al1_0.duration_ms,
            al1_0.endpoint,
            al1_0.entity_id,
            al1_0.entity_name,
            al1_0.entity_type,
            al1_0.error_message,
            al1_0.http_method,
            al1_0.ip_address,
            al1_0.new_value,
            al1_0.old_value,
            al1_0.success,
            al1_0.timestamp,
            al1_0.updated_at,
            al1_0.user_agent,
            al1_0.user_full_name,
            al1_0.user_id,
            al1_0.user_role,
            al1_0.username 
        from
            activity_logs al1_0 
        where
            al1_0.clinic_id=? 
            and (
                ? is null 
                or al1_0.user_id=?
            ) 
            and (
                ? is null 
                or al1_0.action_type=?
            ) 
            and (
                ? is null 
                or al1_0.entity_type=?
            ) 
            and (
                ? is null 
                or al1_0.timestamp>=?
            ) 
            and (
                ? is null 
                or al1_0.timestamp<=?
            ) 
            and (
                ? is null 
                or lower(al1_0.description) like lower(concat('%', ?, '%')) escape '' 
                or lower(al1_0.entity_name) like lower(concat('%', ?, '%')) escape ''
            ) 
        order by
            al1_0.timestamp desc,
            al1_0.timestamp desc 
        limit
            ?
2025-10-04 00:02:57 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-03
2025-10-04 00:02:57 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics
2025-10-04 00:02:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-03
2025-10-04 00:02:57 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics
2025-10-04 00:02:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 00:02:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 00:02:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-03
2025-10-04 00:02:57 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics
2025-10-04 00:02:57 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 00:02:57 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 00:02:57 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 00:02:57 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 00:02:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 00:02:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 00:02:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 00:02:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 00:02:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 00:02:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 00:02:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 00:02:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 00:02:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 00:02:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 00:02:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 00:02:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 00:02:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 00:02:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 00:02:58 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=51m47s659ms).
2025-10-04 01:22:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 01:22:38 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 01:22:38 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 01:22:38 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 01:22:38 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 01:22:38 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 01:22:38 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 01:40:10 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h37m11s479ms).
2025-10-04 02:36:44 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 02:36:44 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 02:36:44 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 02:36:44 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 02:36:44 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 02:36:44 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 02:36:44 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 02:52:50 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h12m40s505ms).
2025-10-04 03:57:42 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 03:57:42 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 03:57:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 03:57:42 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 03:57:42 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 03:57:42 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 03:57:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 04:05:54 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h13m3s677ms).
2025-10-04 05:06:56 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:06:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:06:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:06:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:06:56 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:06:56 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:06:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:23:39 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h17m45s685ms).
2025-10-04 05:32:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:32:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:32:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:32:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:32:51 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:32:51 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:32:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:32:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/search?page=0&size=20&sortBy=timestamp&sortDirection=DESC
2025-10-04 05:32:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/search?page=0&size=20&sortBy=timestamp&sortDirection=DESC
2025-10-04 05:32:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:32:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/search?page=0&size=20&sortBy=timestamp&sortDirection=DESC
2025-10-04 05:32:51 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.searchActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,com.nakqeeb.amancare.entity.ActionType,java.lang.String,java.time.LocalDateTime,java.time.LocalDateTime,java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:32:51 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.searchActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,com.nakqeeb.amancare.entity.ActionType,java.lang.String,java.time.LocalDateTime,java.time.LocalDateTime,java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:32:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        ActivityLog a 
    WHERE
        a.clinicId = :clinicId 
        AND (
            :userId IS NULL 
            OR a.userId = :userId
        ) 
        AND (
            :actionType IS NULL 
            OR a.actionType = :actionType
        ) 
        AND (
            :entityType IS NULL 
            OR a.entityType = :entityType
        ) 
        AND (
            :startDate IS NULL 
            OR a.timestamp >= :startDate
        ) 
        AND (
            :endDate IS NULL 
            OR a.timestamp <= :endDate
        ) 
        AND (
            :searchTerm IS NULL 
            OR LOWER(a.description) LIKE LOWER(CONCAT('%', :searchTerm, '%')) 
            OR LOWER(a.entityName) LIKE LOWER(CONCAT('%', :searchTerm, '%'))
        ) 
    ORDER BY
        a.timestamp DESC,
        a.timestamp desc */ select
            al1_0.id,
            al1_0.action_type,
            al1_0.clinic_id,
            al1_0.clinic_name,
            al1_0.created_at,
            al1_0.description,
            al1_0.duration_ms,
            al1_0.endpoint,
            al1_0.entity_id,
            al1_0.entity_name,
            al1_0.entity_type,
            al1_0.error_message,
            al1_0.http_method,
            al1_0.ip_address,
            al1_0.new_value,
            al1_0.old_value,
            al1_0.success,
            al1_0.timestamp,
            al1_0.updated_at,
            al1_0.user_agent,
            al1_0.user_full_name,
            al1_0.user_id,
            al1_0.user_role,
            al1_0.username 
        from
            activity_logs al1_0 
        where
            al1_0.clinic_id=? 
            and (
                ? is null 
                or al1_0.user_id=?
            ) 
            and (
                ? is null 
                or al1_0.action_type=?
            ) 
            and (
                ? is null 
                or al1_0.entity_type=?
            ) 
            and (
                ? is null 
                or al1_0.timestamp>=?
            ) 
            and (
                ? is null 
                or al1_0.timestamp<=?
            ) 
            and (
                ? is null 
                or lower(al1_0.description) like lower(concat('%', ?, '%')) escape '' 
                or lower(al1_0.entity_name) like lower(concat('%', ?, '%')) escape ''
            ) 
        order by
            al1_0.timestamp desc,
            al1_0.timestamp desc 
        limit
            ?
2025-10-04 05:32:52 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/28
2025-10-04 05:32:52 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/28
2025-10-04 05:32:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:32:52 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/28
2025-10-04 05:32:52 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientById(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:32:52 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientById(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:32:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 05:32:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 05:32:52 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04
2025-10-04 05:32:52 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics
2025-10-04 05:32:52 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04
2025-10-04 05:32:52 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics
2025-10-04 05:32:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:32:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:32:52 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04
2025-10-04 05:32:52 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics
2025-10-04 05:32:52 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 05:32:52 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 05:32:52 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:32:52 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:32:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 05:32:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 05:32:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 05:32:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 05:32:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 05:32:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 05:32:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 05:32:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 05:32:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 05:32:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:32:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:32:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 05:32:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 05:32:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 05:33:12 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=9m32s213ms).
2025-10-04 05:33:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:33:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:33:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:33:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:33:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:33:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:33:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:33:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:33:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:33:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:33:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:33:51 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:33:51 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:33:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:34:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:34:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:34:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:34:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:34:21 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:34:21 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:34:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:34:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:34:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:34:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:34:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:34:51 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:34:51 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:34:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:35:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:35:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:35:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:35:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:35:21 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:35:21 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:35:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:35:29 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/28
2025-10-04 05:35:29 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/28
2025-10-04 05:35:29 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:35:29 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/28
2025-10-04 05:35:29 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientById(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:35:29 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientById(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:35:29 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 05:35:29 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 05:35:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:35:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:35:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:35:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:35:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:35:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:35:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:36:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:36:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:36:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:36:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:36:21 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:36:21 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:36:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:36:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:36:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:36:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:36:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:36:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:36:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:36:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:37:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:37:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:37:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:37:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:37:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:37:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:37:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:37:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:37:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:37:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:37:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:37:51 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:37:51 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:37:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:38:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:38:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:38:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:38:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:38:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:38:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:38:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:38:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:38:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:38:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:38:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:38:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:38:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:38:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:39:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:39:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:39:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:39:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:39:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:39:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:39:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:39:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:39:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:39:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:39:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:39:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:39:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:39:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:40:18 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/28
2025-10-04 05:40:18 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/28
2025-10-04 05:40:18 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/28
2025-10-04 05:40:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:40:18 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/28
2025-10-04 05:40:18 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientById(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:40:18 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientById(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:40:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 05:40:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 05:40:18 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing DELETE /patients/28
2025-10-04 05:40:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:40:18 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured DELETE /patients/28
2025-10-04 05:40:18 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.deletePatient(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:40:18 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.deletePatient(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:40:18 [http-nio-8080-exec-3] INFO  c.n.amancare.service.PatientService - Deleting patient in clinic 2 by user amal
2025-10-04 05:40:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 05:40:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 05:40:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for com.nakqeeb.amancare.entity.Patient */update patients 
    set
        address=?,
        allergies=?,
        blood_type=?,
        chronic_diseases=?,
        clinic_id=?,
        date_of_birth=?,
        email=?,
        emergency_contact_name=?,
        emergency_contact_phone=?,
        first_name=?,
        gender=?,
        is_active=?,
        last_name=?,
        notes=?,
        patient_number=?,
        phone=?,
        updated_at=? 
    where
        id=?
2025-10-04 05:40:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:40:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 05:40:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.ActivityLog */insert 
    into
        activity_logs (action_type, clinic_id, clinic_name, created_at, description, duration_ms, endpoint, entity_id, entity_name, entity_type, error_message, http_method, ip_address, new_value, old_value, success, timestamp, updated_at, user_agent, user_full_name, user_id, user_role, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-04 05:40:18 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients?page=0&size=10&sortBy=firstName&sortDirection=asc
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc
2025-10-04 05:40:18 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:40:18 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:40:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 05:40:18 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics
2025-10-04 05:40:18 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:40:18 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:40:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.clinic_id=? 
        and p1_0.is_active 
    order by
        p1_0.first_name 
    limit
        ?
2025-10-04 05:40:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 05:40:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 05:40:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 05:40:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 05:40:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 05:40:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 05:40:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 05:40:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 05:40:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:40:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:40:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:40:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:40:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:40:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:40:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:40:27 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/search?page=0&size=10&isActive=false
2025-10-04 05:40:27 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/search?page=0&size=10&isActive=false
2025-10-04 05:40:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:40:27 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/search?page=0&size=10&isActive=false
2025-10-04 05:40:27 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.searchPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,com.nakqeeb.amancare.entity.Gender,com.nakqeeb.amancare.entity.BloodType,java.lang.Boolean,int,int); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:40:27 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.searchPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,com.nakqeeb.amancare.entity.Gender,com.nakqeeb.amancare.entity.BloodType,java.lang.Boolean,int,int); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:40:27 [http-nio-8080-exec-4] INFO  c.n.amancare.service.PatientService - Searching patients - clinicId: 2, search: null, gender: null, bloodType: null, isActive: false
2025-10-04 05:40:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 05:40:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        p 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND (
            :search IS NULL 
            OR :search = '' 
            OR LOWER(p.firstName) LIKE LOWER(CONCAT('%', :search, '%')) 
            OR LOWER(p.lastName) LIKE LOWER(CONCAT('%', :search, '%')) 
            OR p.phone LIKE CONCAT('%', :search, '%') 
            OR p.patientNumber LIKE CONCAT('%', :search, '%')
        ) 
        AND (
            :gender IS NULL 
            OR p.gender = :gender
        ) 
        AND (
            :bloodType IS NULL 
            OR p.bloodType = :bloodType
        ) 
        AND (
            :isActive IS NULL 
            OR p.isActive = :isActive
        ) 
    order by
        p.firstName asc,
        p.lastName asc */ select
            p1_0.id,
            p1_0.address,
            p1_0.allergies,
            p1_0.blood_type,
            p1_0.chronic_diseases,
            p1_0.clinic_id,
            p1_0.created_at,
            p1_0.date_of_birth,
            p1_0.email,
            p1_0.emergency_contact_name,
            p1_0.emergency_contact_phone,
            p1_0.first_name,
            p1_0.gender,
            p1_0.is_active,
            p1_0.last_name,
            p1_0.notes,
            p1_0.patient_number,
            p1_0.phone,
            p1_0.updated_at 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and (
                ? is null 
                or ?='' 
                or lower(p1_0.first_name) like lower(concat('%', ?, '%')) escape '' 
                or lower(p1_0.last_name) like lower(concat('%', ?, '%')) escape '' 
                or p1_0.phone like concat('%', ?, '%') escape '' 
                or p1_0.patient_number like concat('%', ?, '%') escape ''
            ) 
            and (
                ? is null 
                or p1_0.gender=?
            ) 
            and (
                ? is null 
                or p1_0.blood_type=?
            ) 
            and (
                ? is null 
                or p1_0.is_active=?
            ) 
        order by
            p1_0.first_name,
            p1_0.last_name 
        limit
            ?
2025-10-04 05:40:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 05:40:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 05:40:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 05:40:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 05:40:27 [http-nio-8080-exec-4] INFO  c.n.amancare.service.PatientService - Found 3 patients matching criteria
2025-10-04 05:40:35 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/22
2025-10-04 05:40:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/22
2025-10-04 05:40:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:40:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/22
2025-10-04 05:40:35 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientById(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:40:35 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientById(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 05:40:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 05:40:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 05:40:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:40:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:40:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:40:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:40:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:40:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:40:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:41:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:41:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:41:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:41:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:41:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:41:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:41:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:41:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:41:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:41:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:41:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:41:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:41:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:41:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:42:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:42:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:42:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:42:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:42:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:42:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:42:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:42:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:42:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:42:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:42:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:42:51 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:42:51 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:42:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:43:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:43:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:43:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:43:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:43:21 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:43:21 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:43:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:43:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:43:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:43:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:43:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:43:51 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:43:51 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:43:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:44:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:44:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:44:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:44:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:44:21 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:44:21 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:44:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:44:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:44:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:44:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:44:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:44:51 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:44:51 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:44:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:45:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:45:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:45:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:45:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:45:21 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:45:21 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:45:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:45:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:45:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:45:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:45:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:45:51 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:45:51 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:45:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:46:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:46:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:46:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:46:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:46:21 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:46:21 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:46:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:46:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:46:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:46:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:46:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:46:51 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:46:51 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:46:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:47:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:47:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:47:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:47:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:47:21 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:47:21 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:47:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:47:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:47:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:47:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:47:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:47:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:47:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:47:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:48:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:48:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:48:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:48:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:48:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:48:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:48:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:48:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:48:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:48:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:48:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:48:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:48:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:48:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:49:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:49:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:49:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:49:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:49:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:49:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:49:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:49:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:49:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:49:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:49:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:49:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:49:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:49:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:50:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:50:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:50:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:50:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:50:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:50:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:50:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:50:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:50:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:50:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:50:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:50:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:50:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:50:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:51:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:51:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:51:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:51:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:51:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:51:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:51:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:51:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:51:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:51:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:51:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:51:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:51:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:51:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:52:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:52:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:52:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:52:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:52:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:52:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:52:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:52:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:52:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:52:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:52:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:52:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:52:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:52:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:53:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:53:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:53:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:53:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:53:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:53:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:53:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:53:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:53:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:53:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:53:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:53:51 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:53:51 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:53:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:54:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:54:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:54:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:54:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:54:21 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:54:21 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:54:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:54:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:54:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:54:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:54:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:54:51 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:54:51 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:54:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:55:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:55:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:55:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:55:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:55:21 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:55:21 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:55:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:55:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:55:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:55:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:55:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:55:51 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:55:51 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:55:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:56:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:56:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:56:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:56:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:56:21 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:56:21 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:56:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:56:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:56:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:56:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:56:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:56:51 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:56:51 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:56:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:57:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:57:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:57:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:57:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:57:21 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:57:21 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:57:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:57:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:57:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:57:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:57:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:57:51 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:57:51 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:57:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:58:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:58:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:58:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:58:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:58:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:58:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:58:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:58:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:58:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:58:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:58:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:58:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:58:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:58:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:59:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:59:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:59:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:59:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:59:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:59:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:59:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 05:59:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 05:59:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 05:59:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 05:59:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 05:59:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:59:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 05:59:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:00:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:00:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:00:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:00:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:00:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:00:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:00:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:00:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:00:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:00:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:00:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:00:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:00:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:00:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:01:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:01:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:01:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:01:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:01:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:01:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:01:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:01:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:01:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:01:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:01:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:01:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:01:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:01:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:02:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:02:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:02:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:02:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:02:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:02:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:02:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:02:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:02:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:02:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:02:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:02:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:02:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:02:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:03:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:03:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:03:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:03:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:03:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:03:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:03:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:03:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:03:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:03:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:03:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:03:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:03:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:03:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:04:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:04:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:04:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:04:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:04:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:04:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:04:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:04:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:04:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:04:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:04:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:04:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:04:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:04:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:05:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:05:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:05:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:05:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:05:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:05:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:05:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:05:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:05:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:05:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:05:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:05:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:05:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:05:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:06:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:06:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:06:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:06:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:06:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:06:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:06:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:06:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:06:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:06:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:06:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:06:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:06:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:06:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:07:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:07:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:07:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:07:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:07:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:07:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:07:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:07:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:07:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:07:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:07:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:07:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:07:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:07:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:08:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:08:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:08:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:08:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:08:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:08:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:08:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:08:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:08:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:08:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:08:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:08:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:08:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:08:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:09:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:09:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:09:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:09:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:09:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:09:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:09:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:09:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:09:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:09:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:09:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:09:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:09:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:09:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:10:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:10:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:10:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:10:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:10:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:10:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:10:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:10:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:10:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:10:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:10:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:10:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:10:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:10:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:11:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:11:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:11:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:11:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:11:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:11:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:11:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:11:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:11:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:11:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:11:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:11:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:11:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:11:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:12:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:12:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:12:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:12:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:12:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:12:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:12:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:12:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:12:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:12:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:12:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:12:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:12:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:12:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:13:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:13:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:13:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:13:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:13:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:13:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:13:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:13:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:13:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:13:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:13:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:13:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:13:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:13:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:14:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:14:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:14:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:14:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:14:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:14:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:14:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:14:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:14:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:14:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:14:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:14:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:14:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:14:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:15:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:15:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:15:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:15:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:15:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:15:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:15:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:15:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:15:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:15:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:15:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:15:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:15:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:15:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:16:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:16:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:16:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:16:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:16:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:16:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:16:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:16:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:16:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:16:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:16:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:16:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:16:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:16:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:17:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:17:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:17:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:17:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:17:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:17:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:17:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:17:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:17:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:17:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:17:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:17:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:17:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:17:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:18:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:18:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:18:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:18:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:18:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:18:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:18:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:18:48 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        PasswordResetToken p 
    WHERE
        p.expiryDate < :now */ delete prt1_0 
    from
        password_reset_tokens prt1_0 
    where
        prt1_0.expiry_date<?
2025-10-04 06:18:48 [scheduling-1] INFO  c.n.a.service.PasswordResetService - تم تنظيف الرموز المنتهية الصلاحية
2025-10-04 06:18:48 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        EmailVerificationToken e 
    WHERE
        e.expiryDate < :now */ delete evt1_0 
    from
        email_verification_tokens evt1_0 
    where
        evt1_0.expiry_date<?
2025-10-04 06:18:48 [scheduling-1] INFO  c.n.a.s.EmailVerificationService - تم تنظيف رموز تأكيد البريد الإلكتروني المنتهية الصلاحية
2025-10-04 06:18:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:18:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:18:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:18:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:18:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:18:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:18:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:19:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:19:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:19:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:19:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:19:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:19:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:19:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:19:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:19:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:19:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:19:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:19:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:19:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:19:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:20:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:20:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:20:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:20:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:20:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:20:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:20:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:20:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:20:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:20:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:20:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:20:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:20:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:20:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:21:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:21:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:21:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:21:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:21:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:21:21 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:21:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:21:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:21:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:21:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:21:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:21:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:21:51 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:21:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:22:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:22:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:22:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:22:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:22:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:22:21 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:22:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:22:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:22:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:22:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:22:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:22:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:22:51 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:22:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:23:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:23:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:23:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:23:21 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:23:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:23:21 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:23:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:23:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:23:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:23:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:23:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:23:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:23:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:23:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:24:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:24:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:24:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:24:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:24:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:24:21 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:24:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:24:45 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/logout
2025-10-04 06:24:45 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-10-04 06:24:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:24:45 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-10-04 06:24:45 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AuthController.logout(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.AuthController]
2025-10-04 06:24:45 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AuthController.logout(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.AuthController]
2025-10-04 06:24:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:24:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:24:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.ActivityLog */insert 
    into
        activity_logs (action_type, clinic_id, clinic_name, created_at, description, duration_ms, endpoint, entity_id, entity_name, entity_type, error_message, http_method, ip_address, new_value, old_value, success, timestamp, updated_at, user_agent, user_full_name, user_id, user_role, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-04 06:24:50 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/login
2025-10-04 06:24:50 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-10-04 06:24:50 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 06:24:50 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-10-04 06:24:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-10-04 06:24:51 [http-nio-8080-exec-3] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-04 06:24:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for com.nakqeeb.amancare.entity.User */update users 
    set
        clinic_id=?,
        email=?,
        first_name=?,
        is_active=?,
        last_login=?,
        last_name=?,
        password_hash=?,
        phone=?,
        role=?,
        specialization=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-10-04 06:24:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/me
2025-10-04 06:24:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-10-04 06:24:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:24:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-10-04 06:24:51 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AuthController.getCurrentUser(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.AuthController]
2025-10-04 06:24:51 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AuthController.getCurrentUser(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.AuthController]
2025-10-04 06:24:51 [http-nio-8080-exec-9] INFO  c.n.amancare.service.ClinicService - Fetching clinic with ID: 1 by user: 2
2025-10-04 06:24:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:24:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:24:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:24:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:24:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:24:51 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:24:51 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:24:51 [http-nio-8080-exec-7] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:24:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:24:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:24:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:24:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:24:51 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:24:51 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:24:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:24:52 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=2
2025-10-04 06:24:52 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=2
2025-10-04 06:24:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=2
2025-10-04 06:24:52 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=2
2025-10-04 06:24:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:24:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:24:52 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=2
2025-10-04 06:24:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=2
2025-10-04 06:24:52 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:24:52 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:24:52 [http-nio-8080-exec-3] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 2
2025-10-04 06:24:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:24:52 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:24:52 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:24:52 [http-nio-8080-exec-10] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 2
2025-10-04 06:24:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 06:24:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:24:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:24:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:24:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:24:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:24:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:24:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:24:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:24:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:24:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:24:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:24:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:24:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinics
2025-10-04 06:24:57 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinics
2025-10-04 06:24:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:24:57 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinics
2025-10-04 06:24:57 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:24:57 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:24:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT u.clinic 
    FROM
        User u 
    WHERE
        u.role = 'ADMIN' 
        AND u.isActive = true */ select
            distinct c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            u1_0.role='ADMIN' 
            and u1_0.is_active=1
2025-10-04 06:25:15 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:25:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:25:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:25:15 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:25:15 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:25:15 [http-nio-8080-exec-2] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:25:16 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=107
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=107
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=107
2025-10-04 06:25:16 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=107
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:16 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=107
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=107
2025-10-04 06:25:16 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:25:16 [http-nio-8080-exec-10] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 107
2025-10-04 06:25:16 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:25:16 [http-nio-8080-exec-8] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 107
2025-10-04 06:25:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:25:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:25:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:25:19 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:25:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:19 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:25:19 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:25:19 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:25:19 [http-nio-8080-exec-9] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:25:20 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:25:20 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:25:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:20 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:25:20 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:25:20 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:25:20 [http-nio-8080-exec-6] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:25:21 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:25:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:25:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:25:21 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:25:21 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:25:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:25:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=107
2025-10-04 06:25:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/doctors?clinicId=107
2025-10-04 06:25:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=107
2025-10-04 06:25:29 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors?clinicId=107
2025-10-04 06:25:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:29 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors?clinicId=107
2025-10-04 06:25:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=107
2025-10-04 06:25:29 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:25:29 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:25:29 [http-nio-8080-exec-8] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading doctors from clinic: 107
2025-10-04 06:25:29 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:25:29 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:25:29 [http-nio-8080-exec-10] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading appointments from clinic: 107
2025-10-04 06:25:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:25:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-04 06:25:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.patient_id,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.clinic_id=? 
    order by
        a1_0.appointment_date desc 
    limit
        ?
2025-10-04 06:25:32 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /schedules/all
2025-10-04 06:25:32 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /schedules/all
2025-10-04 06:25:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:32 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /schedules/all
2025-10-04 06:25:32 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-10-04 06:25:32 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.DoctorScheduleController.getAllDoctorsSchedules(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.DoctorScheduleController]
2025-10-04 06:25:32 [http-nio-8080-exec-5] INFO  c.n.a.c.DoctorScheduleController - SYSTEM_ADMIN reading all doctors schedules from clinic: ALL
2025-10-04 06:25:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        ds 
    FROM
        DoctorSchedule ds 
    WHERE
        ds.doctor.clinic.id = :clinicId 
        AND ds.isActive = true */ select
            ds1_0.id,
            ds1_0.break_end_time,
            ds1_0.break_start_time,
            ds1_0.created_at,
            ds1_0.day_of_week,
            ds1_0.doctor_id,
            ds1_0.effective_date,
            ds1_0.end_date,
            ds1_0.end_time,
            ds1_0.is_active,
            ds1_0.notes,
            ds1_0.schedule_type,
            ds1_0.start_time,
            ds1_0.updated_at 
        from
            doctor_schedules ds1_0 
        join
            users d1_0 
                on d1_0.id=ds1_0.doctor_id 
        where
            d1_0.clinic_id=? 
            and ds1_0.is_active=1
2025-10-04 06:25:35 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=107
2025-10-04 06:25:35 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=107
2025-10-04 06:25:35 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=107
2025-10-04 06:25:35 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=107
2025-10-04 06:25:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:35 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=107
2025-10-04 06:25:35 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:25:35 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:25:35 [http-nio-8080-exec-3] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 107
2025-10-04 06:25:35 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=107
2025-10-04 06:25:35 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:25:35 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:25:35 [http-nio-8080-exec-4] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patients from clinic: 107
2025-10-04 06:25:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:25:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:25:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:25:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.clinic_id=? 
        and p1_0.is_active 
    order by
        p1_0.first_name 
    limit
        ?
2025-10-04 06:25:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:25:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:25:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:25:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:25:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:25:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:25:41 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=107
2025-10-04 06:25:41 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=107
2025-10-04 06:25:41 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=107
2025-10-04 06:25:41 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=107
2025-10-04 06:25:41 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:41 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=107
2025-10-04 06:25:41 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:25:41 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:25:41 [http-nio-8080-exec-7] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patients from clinic: 107
2025-10-04 06:25:41 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=107
2025-10-04 06:25:41 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:25:41 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:25:41 [http-nio-8080-exec-6] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 107
2025-10-04 06:25:41 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:25:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:25:41 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.clinic_id=? 
        and p1_0.is_active 
    order by
        p1_0.first_name 
    limit
        ?
2025-10-04 06:25:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:25:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:25:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:25:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:25:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:25:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:25:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:25:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:25:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:25:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:25:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:25:51 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:25:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 06:25:52 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics
2025-10-04 06:25:52 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04
2025-10-04 06:25:52 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics
2025-10-04 06:25:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04
2025-10-04 06:25:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:52 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics
2025-10-04 06:25:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04
2025-10-04 06:25:52 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:25:52 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:25:52 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:25:52 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:25:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:25:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:25:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 06:25:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:25:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:25:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:25:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:25:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:25:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:25:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:25:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:25:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:25:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:26:03 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/doctors
2025-10-04 06:26:03 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc
2025-10-04 06:26:03 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc
2025-10-04 06:26:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc
2025-10-04 06:26:03 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors
2025-10-04 06:26:03 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:26:03 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:26:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.patient_id,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.clinic_id=? 
    order by
        a1_0.appointment_date desc 
    limit
        ?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:11 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:26:11 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:26:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:11 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:26:11 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:26:11 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:26:11 [http-nio-8080-exec-10] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:26:12 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=107
2025-10-04 06:26:12 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=107
2025-10-04 06:26:12 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=107
2025-10-04 06:26:12 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=107
2025-10-04 06:26:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:12 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:12 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=107
2025-10-04 06:26:12 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=107
2025-10-04 06:26:12 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:12 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:26:12 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:26:12 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:12 [http-nio-8080-exec-5] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 107
2025-10-04 06:26:12 [http-nio-8080-exec-6] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 107
2025-10-04 06:26:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:26:12 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:26:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:26:12 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 06:26:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:26:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:26:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:26:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:26:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:26:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:26:16 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinics
2025-10-04 06:26:16 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinics
2025-10-04 06:26:16 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:16 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinics
2025-10-04 06:26:16 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:26:16 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:26:16 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT u.clinic 
    FROM
        User u 
    WHERE
        u.role = 'ADMIN' 
        AND u.isActive = true */ select
            distinct c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            u1_0.role='ADMIN' 
            and u1_0.is_active=1
2025-10-04 06:26:35 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:26:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:26:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:26:35 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:26:35 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:26:35 [http-nio-8080-exec-7] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:26:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=2
2025-10-04 06:26:36 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=2
2025-10-04 06:26:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=2
2025-10-04 06:26:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=2
2025-10-04 06:26:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=2
2025-10-04 06:26:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=2
2025-10-04 06:26:36 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:36 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:36 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:26:36 [http-nio-8080-exec-5] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 2
2025-10-04 06:26:36 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:26:36 [http-nio-8080-exec-2] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 2
2025-10-04 06:26:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:26:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:26:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:26:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 06:26:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:26:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:26:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:26:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:26:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:26:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:26:38 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/doctors?clinicId=2
2025-10-04 06:26:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=2
2025-10-04 06:26:38 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors?clinicId=2
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=2
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:38 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors?clinicId=2
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=2
2025-10-04 06:26:38 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:26:38 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:38 [http-nio-8080-exec-3] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading doctors from clinic: 2
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:38 [http-nio-8080-exec-8] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading appointments from clinic: 2
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:26:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.patient_id,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.clinic_id=? 
    order by
        a1_0.appointment_date desc 
    limit
        ?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:40 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors?clinicId=2
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=2
2025-10-04 06:26:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments?page=0&size=10&sortBy=appointmentDate&sortDirection=desc&clinicId=2
2025-10-04 06:26:40 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors?clinicId=2
2025-10-04 06:26:40 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:40 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:26:40 [http-nio-8080-exec-7] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading doctors from clinic: 2
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getAllAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.time.LocalDate,java.lang.Long,com.nakqeeb.amancare.entity.AppointmentStatus,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:40 [http-nio-8080-exec-10] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading appointments from clinic: 2
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:26:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.patient_id,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.clinic_id=? 
    order by
        a1_0.appointment_date desc 
    limit
        ?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:42 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=2
2025-10-04 06:26:42 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=2
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=2
2025-10-04 06:26:42 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=2
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:42 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=2
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=2
2025-10-04 06:26:42 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:26:42 [http-nio-8080-exec-2] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patients from clinic: 2
2025-10-04 06:26:42 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:26:42 [http-nio-8080-exec-4] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 2
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:26:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:26:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:26:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.clinic_id=? 
        and p1_0.is_active 
    order by
        p1_0.first_name 
    limit
        ?
2025-10-04 06:26:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 06:26:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:26:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 06:26:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:44 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:26:44 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:26:44 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:44 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:26:44 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:26:44 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:26:44 [http-nio-8080-exec-3] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:26:45 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=2
2025-10-04 06:26:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=2
2025-10-04 06:26:45 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=2
2025-10-04 06:26:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:45 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=2
2025-10-04 06:26:45 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:26:45 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=2
2025-10-04 06:26:45 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:26:45 [http-nio-8080-exec-8] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 2
2025-10-04 06:26:45 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:45 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:45 [http-nio-8080-exec-9] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 2
2025-10-04 06:26:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:26:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:26:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:26:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:26:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 06:26:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:26:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:26:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:26:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.id=?
2025-10-04 06:26:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:26:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:26:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:26:48 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinics
2025-10-04 06:26:48 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinics
2025-10-04 06:26:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:48 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinics
2025-10-04 06:26:48 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:26:48 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:26:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT u.clinic 
    FROM
        User u 
    WHERE
        u.role = 'ADMIN' 
        AND u.isActive = true */ select
            distinct c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            u1_0.role='ADMIN' 
            and u1_0.is_active=1
2025-10-04 06:26:58 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:26:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:26:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:26:58 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:26:58 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:26:58 [http-nio-8080-exec-3] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:26:59 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=101
2025-10-04 06:26:59 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=101
2025-10-04 06:26:59 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=101
2025-10-04 06:26:59 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=101
2025-10-04 06:26:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:26:59 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=101
2025-10-04 06:26:59 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=101
2025-10-04 06:26:59 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:26:59 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:59 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:26:59 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:26:59 [http-nio-8080-exec-8] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 101
2025-10-04 06:26:59 [http-nio-8080-exec-10] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 101
2025-10-04 06:26:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:26:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:26:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:26:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 06:26:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:26:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:26:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:26:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:26:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:26:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:27:01 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=101
2025-10-04 06:27:01 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=101
2025-10-04 06:27:01 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=101
2025-10-04 06:27:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:27:01 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=101
2025-10-04 06:27:01 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:27:01 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:27:01 [http-nio-8080-exec-2] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 101
2025-10-04 06:27:01 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:27:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:27:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:27:01 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=101
2025-10-04 06:27:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:27:01 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:27:01 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:27:01 [http-nio-8080-exec-1] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patients from clinic: 101
2025-10-04 06:27:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:27:01 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:27:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:27:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:27:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:27:01 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.clinic_id=? 
        and p1_0.is_active 
    order by
        p1_0.first_name 
    limit
        ?
2025-10-04 06:27:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:27:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=101
2025-10-04 06:27:04 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=101
2025-10-04 06:27:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:27:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:27:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=101
2025-10-04 06:27:04 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=101
2025-10-04 06:27:04 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:27:04 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:27:04 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:27:04 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:27:04 [http-nio-8080-exec-3] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patients from clinic: 101
2025-10-04 06:27:04 [http-nio-8080-exec-7] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 101
2025-10-04 06:27:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:27:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:27:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.clinic_id=? 
        and p1_0.is_active 
    order by
        p1_0.first_name 
    limit
        ?
2025-10-04 06:27:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:27:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:27:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:27:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:27:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:27:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:27:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:28:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/logout
2025-10-04 06:28:19 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-10-04 06:28:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:28:19 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-10-04 06:28:19 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AuthController.logout(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.AuthController]
2025-10-04 06:28:19 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AuthController.logout(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.AuthController]
2025-10-04 06:28:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:28:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:28:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        com.nakqeeb.amancare.entity.ActivityLog */insert 
    into
        activity_logs (action_type, clinic_id, clinic_name, created_at, description, duration_ms, endpoint, entity_id, entity_name, entity_type, error_message, http_method, ip_address, new_value, old_value, success, timestamp, updated_at, user_agent, user_full_name, user_id, user_role, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-10-04 06:28:43 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/login
2025-10-04 06:28:43 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-10-04 06:28:43 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 06:28:43 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-10-04 06:28:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-10-04 06:28:43 [http-nio-8080-exec-4] WARN  o.s.s.c.bcrypt.BCryptPasswordEncoder - Encoded password does not look like BCrypt
2025-10-04 06:28:43 [http-nio-8080-exec-4] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Failed to authenticate since password does not match stored value
2025-10-04 06:28:43 [http-nio-8080-exec-4] DEBUG o.s.s.authentication.ProviderManager - Authentication failed with provider DaoAuthenticationProvider since Bad credentials
2025-10-04 06:28:48 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/login
2025-10-04 06:28:48 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-10-04 06:28:48 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 06:28:48 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-10-04 06:28:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-10-04 06:28:48 [http-nio-8080-exec-3] WARN  o.s.s.c.bcrypt.BCryptPasswordEncoder - Encoded password does not look like BCrypt
2025-10-04 06:28:48 [http-nio-8080-exec-3] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Failed to authenticate since password does not match stored value
2025-10-04 06:28:48 [http-nio-8080-exec-3] DEBUG o.s.s.authentication.ProviderManager - Authentication failed with provider DaoAuthenticationProvider since Bad credentials
2025-10-04 06:29:11 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/login
2025-10-04 06:29:11 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-10-04 06:29:11 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 06:29:11 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-10-04 06:29:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-10-04 06:29:11 [http-nio-8080-exec-10] WARN  o.s.s.c.bcrypt.BCryptPasswordEncoder - Encoded password does not look like BCrypt
2025-10-04 06:29:11 [http-nio-8080-exec-10] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Failed to authenticate since password does not match stored value
2025-10-04 06:29:11 [http-nio-8080-exec-10] DEBUG o.s.s.authentication.ProviderManager - Authentication failed with provider DaoAuthenticationProvider since Bad credentials
2025-10-04 06:29:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-10-04 06:29:13 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 06:29:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-10-04 06:29:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-10-04 06:29:13 [http-nio-8080-exec-8] WARN  o.s.s.c.bcrypt.BCryptPasswordEncoder - Encoded password does not look like BCrypt
2025-10-04 06:29:13 [http-nio-8080-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Failed to authenticate since password does not match stored value
2025-10-04 06:29:13 [http-nio-8080-exec-8] DEBUG o.s.s.authentication.ProviderManager - Authentication failed with provider DaoAuthenticationProvider since Bad credentials
2025-10-04 06:29:15 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-10-04 06:29:15 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 06:29:15 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-10-04 06:29:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-10-04 06:29:15 [http-nio-8080-exec-6] WARN  o.s.s.c.bcrypt.BCryptPasswordEncoder - Encoded password does not look like BCrypt
2025-10-04 06:29:15 [http-nio-8080-exec-6] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Failed to authenticate since password does not match stored value
2025-10-04 06:29:15 [http-nio-8080-exec-6] DEBUG o.s.s.authentication.ProviderManager - Authentication failed with provider DaoAuthenticationProvider since Bad credentials
2025-10-04 06:29:20 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/login
2025-10-04 06:29:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-10-04 06:29:20 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 06:29:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-10-04 06:29:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-10-04 06:29:20 [http-nio-8080-exec-2] WARN  o.s.s.c.bcrypt.BCryptPasswordEncoder - Encoded password does not look like BCrypt
2025-10-04 06:29:20 [http-nio-8080-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Failed to authenticate since password does not match stored value
2025-10-04 06:29:20 [http-nio-8080-exec-2] DEBUG o.s.s.authentication.ProviderManager - Authentication failed with provider DaoAuthenticationProvider since Bad credentials
2025-10-04 06:30:07 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinic-users/stats?clinicId=101
2025-10-04 06:30:07 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinic-users?clinicId=101&activeOnly=true
2025-10-04 06:30:07 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/doctors?clinicId=101
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinic-users/stats?clinicId=101
2025-10-04 06:30:07 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors?clinicId=101
2025-10-04 06:30:07 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinic-users?clinicId=101&activeOnly=true
2025-10-04 06:30:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:30:07 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinic-users/stats?clinicId=101
2025-10-04 06:30:07 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors?clinicId=101
2025-10-04 06:30:07 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinic-users?clinicId=101&activeOnly=true
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUserStats(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:07 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:07 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:07 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:07 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUserStats(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:07 [http-nio-8080-exec-6] INFO  c.n.a.controller.UserController - Controller: Getting clinic users for admin admin, role: null, activeOnly: true
2025-10-04 06:30:07 [http-nio-8080-exec-8] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading doctors from clinic: 101
2025-10-04 06:30:07 [http-nio-8080-exec-10] INFO  c.n.a.controller.UserController - Controller: Getting clinic stats for admin admin
2025-10-04 06:30:07 [http-nio-8080-exec-6] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading users from clinic: 101
2025-10-04 06:30:07 [http-nio-8080-exec-10] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading stats from clinic: 101
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:30:07 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:30:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(u1_0.id) 
    from
        users u1_0 
    where
        u1_0.clinic_id=?
2025-10-04 06:30:07 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.clinic_id=? 
        and u1_0.is_active
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.is_active=1
2025-10-04 06:30:07 [http-nio-8080-exec-6] INFO  c.n.amancare.service.UserService - Found 4 clinic users for clinic ID: 101
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=?
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=?
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=?
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=? 
            and u1_0.is_active=1
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=? 
            and u1_0.is_active=1
2025-10-04 06:30:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=? 
            and u1_0.is_active=1
2025-10-04 06:30:07 [http-nio-8080-exec-10] INFO  c.n.amancare.service.UserService - Clinic stats - Total: 5, Active: 5, Doctors: 2, Nurses: 1, Receptionists: 1
2025-10-04 06:30:16 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/doctors?clinicId=101
2025-10-04 06:30:16 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors?clinicId=101
2025-10-04 06:30:16 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:30:16 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors?clinicId=101
2025-10-04 06:30:16 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:16 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:16 [http-nio-8080-exec-3] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading doctors from clinic: 101
2025-10-04 06:30:16 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-04 06:30:17 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinic-users?clinicId=101&activeOnly=true
2025-10-04 06:30:17 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinic-users?clinicId=101&activeOnly=true
2025-10-04 06:30:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:30:17 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinic-users?clinicId=101&activeOnly=true
2025-10-04 06:30:17 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:17 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:17 [http-nio-8080-exec-7] INFO  c.n.a.controller.UserController - Controller: Getting clinic users for admin admin, role: null, activeOnly: true
2025-10-04 06:30:17 [http-nio-8080-exec-7] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading users from clinic: 101
2025-10-04 06:30:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:30:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.clinic_id=? 
        and u1_0.is_active
2025-10-04 06:30:17 [http-nio-8080-exec-7] INFO  c.n.amancare.service.UserService - Found 4 clinic users for clinic ID: 101
2025-10-04 06:30:41 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinic-users?clinicId=101&activeOnly=true
2025-10-04 06:30:41 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/doctors?clinicId=101
2025-10-04 06:30:41 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinic-users/stats?clinicId=101
2025-10-04 06:30:41 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinic-users/stats?clinicId=101
2025-10-04 06:30:41 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors?clinicId=101
2025-10-04 06:30:41 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinic-users?clinicId=101&activeOnly=true
2025-10-04 06:30:41 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:30:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:30:41 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:30:42 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinic-users/stats?clinicId=101
2025-10-04 06:30:42 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors?clinicId=101
2025-10-04 06:30:42 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinic-users?clinicId=101&activeOnly=true
2025-10-04 06:30:42 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUserStats(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:42 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:42 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:42 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:42 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:42 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUserStats(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:30:42 [http-nio-8080-exec-10] INFO  c.n.a.controller.UserController - Controller: Getting clinic stats for admin admin
2025-10-04 06:30:42 [http-nio-8080-exec-5] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading doctors from clinic: 101
2025-10-04 06:30:42 [http-nio-8080-exec-2] INFO  c.n.a.controller.UserController - Controller: Getting clinic users for admin admin, role: null, activeOnly: true
2025-10-04 06:30:42 [http-nio-8080-exec-10] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading stats from clinic: 101
2025-10-04 06:30:42 [http-nio-8080-exec-2] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading users from clinic: 101
2025-10-04 06:30:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:30:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:30:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-04 06:30:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(u1_0.id) 
    from
        users u1_0 
    where
        u1_0.clinic_id=?
2025-10-04 06:30:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.clinic_id=? 
        and u1_0.is_active
2025-10-04 06:30:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.is_active=1
2025-10-04 06:30:42 [http-nio-8080-exec-2] INFO  c.n.amancare.service.UserService - Found 4 clinic users for clinic ID: 101
2025-10-04 06:30:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=?
2025-10-04 06:30:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=?
2025-10-04 06:30:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=?
2025-10-04 06:30:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=? 
            and u1_0.is_active=1
2025-10-04 06:30:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=? 
            and u1_0.is_active=1
2025-10-04 06:30:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=? 
            and u1_0.is_active=1
2025-10-04 06:30:42 [http-nio-8080-exec-10] INFO  c.n.amancare.service.UserService - Clinic stats - Total: 5, Active: 5, Doctors: 2, Nurses: 1, Receptionists: 1
2025-10-04 06:31:10 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinic-users/stats?clinicId=101
2025-10-04 06:31:10 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/doctors?clinicId=101
2025-10-04 06:31:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinic-users?clinicId=101&activeOnly=true
2025-10-04 06:31:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinic-users/stats?clinicId=101
2025-10-04 06:31:10 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors?clinicId=101
2025-10-04 06:31:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinic-users?clinicId=101&activeOnly=true
2025-10-04 06:31:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:10 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:10 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors?clinicId=101
2025-10-04 06:31:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinic-users?clinicId=101&activeOnly=true
2025-10-04 06:31:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinic-users/stats?clinicId=101
2025-10-04 06:31:10 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:10 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:10 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUserStats(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:10 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUserStats(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:10 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:10 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:10 [http-nio-8080-exec-4] INFO  c.n.a.controller.UserController - Controller: Getting clinic stats for admin admin
2025-10-04 06:31:10 [http-nio-8080-exec-2] INFO  c.n.a.controller.UserController - Controller: Getting clinic users for admin admin, role: null, activeOnly: true
2025-10-04 06:31:10 [http-nio-8080-exec-2] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading users from clinic: 101
2025-10-04 06:31:10 [http-nio-8080-exec-5] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading doctors from clinic: 101
2025-10-04 06:31:10 [http-nio-8080-exec-4] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading stats from clinic: 101
2025-10-04 06:31:10 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:31:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:31:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-04 06:31:10 [http-nio-8080-exec-4] ERROR c.n.a.controller.UserController - Error fetching clinic user stats: 
com.nakqeeb.amancare.exception.ResourceNotFoundException: العيادة غير موجودة
	at com.nakqeeb.amancare.service.UserService.lambda$getClinicUserStats$0(UserService.java:156)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.nakqeeb.amancare.service.UserService.getClinicUserStats(UserService.java:156)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.UserService$$SpringCGLIB$$0.getClinicUserStats(<generated>)
	at com.nakqeeb.amancare.controller.UserController.getClinicUserStats(UserController.java:195)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.UserController$$SpringCGLIB$$0.getClinicUserStats(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:31:10 [http-nio-8080-exec-2] ERROR c.n.a.controller.UserController - Error fetching clinic users: 
com.nakqeeb.amancare.exception.ResourceNotFoundException: العيادة غير موجودة
	at com.nakqeeb.amancare.service.UserService.lambda$getClinicUsers$0(UserService.java:96)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.nakqeeb.amancare.service.UserService.getClinicUsers(UserService.java:96)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.UserService$$SpringCGLIB$$0.getClinicUsers(<generated>)
	at com.nakqeeb.amancare.controller.UserController.getClinicUsers(UserController.java:144)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.UserController$$SpringCGLIB$$0.getClinicUsers(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:31:12 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:31:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:31:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:31:12 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:31:12 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:31:12 [http-nio-8080-exec-3] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:31:13 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=101
2025-10-04 06:31:13 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=101
2025-10-04 06:31:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=101
2025-10-04 06:31:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=101
2025-10-04 06:31:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=101
2025-10-04 06:31:13 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:31:13 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:31:13 [http-nio-8080-exec-6] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 101
2025-10-04 06:31:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=101
2025-10-04 06:31:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:31:13 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:31:13 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:31:13 [http-nio-8080-exec-8] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 101
2025-10-04 06:31:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:31:17 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinics
2025-10-04 06:31:17 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinics
2025-10-04 06:31:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:17 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinics
2025-10-04 06:31:17 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:17 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT u.clinic 
    FROM
        User u 
    WHERE
        u.role = 'ADMIN' 
        AND u.isActive = true */ select
            distinct c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            u1_0.role='ADMIN' 
            and u1_0.is_active=1
2025-10-04 06:31:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinic-users?activeOnly=true
2025-10-04 06:31:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/doctors
2025-10-04 06:31:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinic-users?activeOnly=true
2025-10-04 06:31:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors
2025-10-04 06:31:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinic-users/stats
2025-10-04 06:31:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinic-users/stats
2025-10-04 06:31:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:21 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinic-users?activeOnly=true
2025-10-04 06:31:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:21 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:21 [http-nio-8080-exec-3] INFO  c.n.a.controller.UserController - Controller: Getting clinic users for admin admin, role: null, activeOnly: true
2025-10-04 06:31:21 [http-nio-8080-exec-3] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading users from clinic: ALL
2025-10-04 06:31:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinic-users/stats
2025-10-04 06:31:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors
2025-10-04 06:31:21 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:21 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUserStats(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:21 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:21 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUserStats(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:21 [http-nio-8080-exec-6] INFO  c.n.a.controller.UserController - Controller: Getting clinic stats for admin admin
2025-10-04 06:31:21 [http-nio-8080-exec-6] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading stats from clinic: ALL
2025-10-04 06:31:21 [http-nio-8080-exec-1] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading doctors from clinic: ALL
2025-10-04 06:31:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-04 06:31:21 [http-nio-8080-exec-3] ERROR c.n.a.controller.UserController - Error fetching clinic users: 
org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:371)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:560)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:343)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:160)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223)
	at jdk.proxy4/jdk.proxy4.$Proxy200.findById(Unknown Source)
	at com.nakqeeb.amancare.service.UserService.getClinicUsers(UserService.java:95)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.UserService$$SpringCGLIB$$0.getClinicUsers(<generated>)
	at com.nakqeeb.amancare.controller.UserController.getClinicUsers(UserController.java:144)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.UserController$$SpringCGLIB$$0.getClinicUsers(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
Caused by: java.lang.IllegalArgumentException: The given id must not be null
	at org.springframework.util.Assert.notNull(Assert.java:181)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findById(SimpleJpaRepository.java:323)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:515)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:284)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:734)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:174)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:149)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:69)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	... 141 common frames omitted
2025-10-04 06:31:21 [http-nio-8080-exec-6] ERROR c.n.a.controller.UserController - Error fetching clinic user stats: 
org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:371)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:560)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:343)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:160)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223)
	at jdk.proxy4/jdk.proxy4.$Proxy200.findById(Unknown Source)
	at com.nakqeeb.amancare.service.UserService.getClinicUserStats(UserService.java:155)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.UserService$$SpringCGLIB$$0.getClinicUserStats(<generated>)
	at com.nakqeeb.amancare.controller.UserController.getClinicUserStats(UserController.java:195)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.UserController$$SpringCGLIB$$0.getClinicUserStats(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
Caused by: java.lang.IllegalArgumentException: The given id must not be null
	at org.springframework.util.Assert.notNull(Assert.java:181)
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findById(SimpleJpaRepository.java:323)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:515)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:284)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:734)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:174)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:149)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:69)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	... 141 common frames omitted
2025-10-04 06:31:24 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:31:24 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:31:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:24 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:31:24 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:31:24 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:31:24 [http-nio-8080-exec-5] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:31:25 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics
2025-10-04 06:31:25 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04
2025-10-04 06:31:25 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics
2025-10-04 06:31:25 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04
2025-10-04 06:31:25 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:25 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics
2025-10-04 06:31:25 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04
2025-10-04 06:31:25 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:31:25 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:31:25 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:31:25 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:31:25 [http-nio-8080-exec-9] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: ALL
2025-10-04 06:31:25 [http-nio-8080-exec-10] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: ALL
2025-10-04 06:31:27 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinics
2025-10-04 06:31:27 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinics
2025-10-04 06:31:27 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:27 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinics
2025-10-04 06:31:27 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:27 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:27 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT u.clinic 
    FROM
        User u 
    WHERE
        u.role = 'ADMIN' 
        AND u.isActive = true */ select
            distinct c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            u1_0.role='ADMIN' 
            and u1_0.is_active=1
2025-10-04 06:31:33 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:31:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:31:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:31:33 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:31:33 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:31:33 [http-nio-8080-exec-8] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:31:34 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=9
2025-10-04 06:31:34 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=9
2025-10-04 06:31:34 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=9
2025-10-04 06:31:34 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=9
2025-10-04 06:31:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:34 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=9
2025-10-04 06:31:34 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=9
2025-10-04 06:31:34 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:31:34 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:31:34 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:31:34 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:31:34 [http-nio-8080-exec-4] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 9
2025-10-04 06:31:34 [http-nio-8080-exec-9] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 9
2025-10-04 06:31:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:31:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:31:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:31:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 06:31:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:31:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:31:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:31:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:31:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:31:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:31:37 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:31:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:37 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:31:37 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:31:37 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:31:37 [http-nio-8080-exec-1] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:31:37 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:31:37 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:37 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:31:37 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:31:37 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:31:37 [http-nio-8080-exec-3] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:31:40 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/doctors?clinicId=9
2025-10-04 06:31:40 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinic-users?clinicId=9&activeOnly=true
2025-10-04 06:31:40 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinic-users/stats?clinicId=9
2025-10-04 06:31:40 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors?clinicId=9
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinic-users/stats?clinicId=9
2025-10-04 06:31:40 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinic-users?clinicId=9&activeOnly=true
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:40 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors?clinicId=9
2025-10-04 06:31:40 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinic-users?clinicId=9&activeOnly=true
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinic-users/stats?clinicId=9
2025-10-04 06:31:40 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:40 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:40 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:40 [http-nio-8080-exec-5] INFO  c.n.a.controller.UserController - Controller: Getting clinic users for admin admin, role: null, activeOnly: true
2025-10-04 06:31:40 [http-nio-8080-exec-5] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading users from clinic: 9
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUserStats(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUserStats(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:40 [http-nio-8080-exec-9] INFO  c.n.a.controller.UserController - Controller: Getting clinic stats for admin admin
2025-10-04 06:31:40 [http-nio-8080-exec-9] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading stats from clinic: 9
2025-10-04 06:31:40 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 06:31:40 [http-nio-8080-exec-4] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading doctors from clinic: 9
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:31:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:31:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(u1_0.id) 
    from
        users u1_0 
    where
        u1_0.clinic_id=?
2025-10-04 06:31:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.clinic_id=? 
        and u1_0.is_active
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.is_active=1
2025-10-04 06:31:40 [http-nio-8080-exec-5] INFO  c.n.amancare.service.UserService - Found 2 clinic users for clinic ID: 9
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=?
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=?
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=?
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=? 
            and u1_0.is_active=1
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=? 
            and u1_0.is_active=1
2025-10-04 06:31:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=? 
            and u1_0.is_active=1
2025-10-04 06:31:40 [http-nio-8080-exec-9] INFO  c.n.amancare.service.UserService - Clinic stats - Total: 3, Active: 3, Doctors: 1, Nurses: 0, Receptionists: 1
2025-10-04 06:31:44 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=9
2025-10-04 06:31:44 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=9
2025-10-04 06:31:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=9
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=9
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=9
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=9
2025-10-04 06:31:44 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:31:44 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:31:44 [http-nio-8080-exec-8] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patients from clinic: 9
2025-10-04 06:31:44 [http-nio-8080-exec-2] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 9
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:31:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:31:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:31:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:31:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.clinic_id=? 
        and p1_0.is_active 
    order by
        p1_0.first_name 
    limit
        ?
2025-10-04 06:31:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 06:31:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:31:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:31:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        cm1_0.medical_record_id,
        cm1_0.medication 
    from
        medical_record_medications cm1_0 
    where
        cm1_0.medical_record_id=?
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 06:31:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 06:31:47 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:31:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:31:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:31:47 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:31:47 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:31:47 [http-nio-8080-exec-10] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:31:48 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=9
2025-10-04 06:31:48 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=9
2025-10-04 06:31:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:48 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=9
2025-10-04 06:31:48 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=9
2025-10-04 06:31:48 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:31:48 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:31:48 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:31:48 [http-nio-8080-exec-7] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 9
2025-10-04 06:31:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:31:48 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=9
2025-10-04 06:31:48 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:31:48 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:31:48 [http-nio-8080-exec-6] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 9
2025-10-04 06:31:48 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:31:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:31:48 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 06:31:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:31:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:31:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:31:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:31:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:31:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:32:06 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:32:06 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:32:06 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:32:06 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/search?page=0&size=20&sortBy=timestamp&sortDirection=DESC
2025-10-04 06:32:06 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/search?page=0&size=20&sortBy=timestamp&sortDirection=DESC
2025-10-04 06:32:06 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:32:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:32:06 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:32:06 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:32:06 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/search?page=0&size=20&sortBy=timestamp&sortDirection=DESC
2025-10-04 06:32:06 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.searchActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,com.nakqeeb.amancare.entity.ActionType,java.lang.String,java.time.LocalDateTime,java.time.LocalDateTime,java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:32:06 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.searchActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,com.nakqeeb.amancare.entity.ActionType,java.lang.String,java.time.LocalDateTime,java.time.LocalDateTime,java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:32:06 [http-nio-8080-exec-4] ERROR c.n.a.c.ActivityLogController - Error searching activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.searchActivities(ActivityLogController.java:140)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.searchActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:32:06 [http-nio-8080-exec-8] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:32:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=9
2025-10-04 06:32:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=9
2025-10-04 06:32:08 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=9
2025-10-04 06:32:08 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=9
2025-10-04 06:32:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:32:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:32:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=9
2025-10-04 06:32:08 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=9
2025-10-04 06:32:08 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:32:08 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:32:08 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 06:32:08 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 06:32:08 [http-nio-8080-exec-6] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 9
2025-10-04 06:32:08 [http-nio-8080-exec-10] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 9
2025-10-04 06:32:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:32:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 06:32:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 06:32:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 06:32:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 06:32:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 06:32:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 06:32:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 06:32:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 06:32:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 06:47:08 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 06:47:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 06:47:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 06:47:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 06:47:08 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:47:08 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 06:47:08 [http-nio-8080-exec-5] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 06:47:13 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m1s254ms).
2025-10-04 07:04:42 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=16m58s79ms).
2025-10-04 07:13:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 07:13:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 07:13:54 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:13:54 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 07:13:54 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:13:54 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:13:54 [http-nio-8080-exec-8] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 07:13:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=9
2025-10-04 07:13:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=9
2025-10-04 07:13:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=9
2025-10-04 07:13:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=9
2025-10-04 07:13:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:13:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:13:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=9
2025-10-04 07:13:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=9
2025-10-04 07:13:54 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:13:54 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:13:54 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:13:54 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:13:54 [http-nio-8080-exec-6] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 9
2025-10-04 07:13:54 [http-nio-8080-exec-9] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 9
2025-10-04 07:13:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:13:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:13:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 07:13:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 07:13:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 07:13:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 07:13:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 07:13:55 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 07:13:55 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 07:13:55 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 07:14:23 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 07:14:23 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 07:14:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:14:23 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 07:14:23 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:14:24 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:14:24 [http-nio-8080-exec-2] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 07:14:25 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinics
2025-10-04 07:14:25 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinics
2025-10-04 07:14:25 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:14:25 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinics
2025-10-04 07:14:25 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 07:14:25 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 07:14:25 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT u.clinic 
    FROM
        User u 
    WHERE
        u.role = 'ADMIN' 
        AND u.isActive = true */ select
            distinct c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            u1_0.role='ADMIN' 
            and u1_0.is_active=1
2025-10-04 07:14:34 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 07:14:34 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 07:14:34 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:14:34 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 07:14:34 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:14:34 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:14:34 [http-nio-8080-exec-6] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 07:14:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=106
2025-10-04 07:14:35 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=106
2025-10-04 07:14:35 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=106
2025-10-04 07:14:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=106
2025-10-04 07:14:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:14:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:14:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=106
2025-10-04 07:14:35 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=106
2025-10-04 07:14:35 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:14:35 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:14:35 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:14:35 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:14:35 [http-nio-8080-exec-7] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 106
2025-10-04 07:14:35 [http-nio-8080-exec-3] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 106
2025-10-04 07:14:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:14:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:14:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 07:14:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 07:14:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 07:14:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 07:14:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 07:14:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 07:14:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 07:14:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 07:14:39 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/doctors?clinicId=106
2025-10-04 07:14:39 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinic-users?clinicId=106&activeOnly=true
2025-10-04 07:14:39 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinic-users/stats?clinicId=106
2025-10-04 07:14:39 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/doctors?clinicId=106
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinic-users/stats?clinicId=106
2025-10-04 07:14:39 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinic-users?clinicId=106&activeOnly=true
2025-10-04 07:14:39 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:14:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:14:39 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/doctors?clinicId=106
2025-10-04 07:14:39 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinic-users?clinicId=106&activeOnly=true
2025-10-04 07:14:39 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 07:14:39 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getDoctors(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 07:14:39 [http-nio-8080-exec-6] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading doctors from clinic: 106
2025-10-04 07:14:39 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 07:14:39 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUsers(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,java.lang.String,boolean); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 07:14:39 [http-nio-8080-exec-9] INFO  c.n.a.controller.UserController - Controller: Getting clinic users for admin admin, role: null, activeOnly: true
2025-10-04 07:14:39 [http-nio-8080-exec-9] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading users from clinic: 106
2025-10-04 07:14:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinic-users/stats?clinicId=106
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUserStats(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getClinicUserStats(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 07:14:39 [http-nio-8080-exec-10] INFO  c.n.a.controller.UserController - Controller: Getting clinic stats for admin admin
2025-10-04 07:14:39 [http-nio-8080-exec-10] INFO  c.n.a.controller.UserController - SYSTEM_ADMIN reading stats from clinic: 106
2025-10-04 07:14:39 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    JOIN
        
    FETCH
        u.clinic 
    WHERE
        u.clinic.id = :clinicId 
        AND u.role = 'DOCTOR' 
        AND u.isActive = true 
    ORDER BY
        u.firstName,
        u.lastName */ select
            u1_0.id,
            u1_0.clinic_id,
            c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            c1_0.id=? 
            and u1_0.role='DOCTOR' 
            and u1_0.is_active=1 
        order by
            u1_0.first_name,
            u1_0.last_name
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:14:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.clinic_id=? 
        and u1_0.is_active
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(u1_0.id) 
    from
        users u1_0 
    where
        u1_0.clinic_id=?
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.is_active=1
2025-10-04 07:14:39 [http-nio-8080-exec-9] INFO  c.n.amancare.service.UserService - Found 1 clinic users for clinic ID: 106
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=?
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=?
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=?
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=? 
            and u1_0.is_active=1
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=? 
            and u1_0.is_active=1
2025-10-04 07:14:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(u) 
    FROM
        User u 
    WHERE
        u.clinic = :clinic 
        AND u.role = :role 
        AND u.isActive = true */ select
            count(u1_0.id) 
        from
            users u1_0 
        where
            u1_0.clinic_id=? 
            and u1_0.role=? 
            and u1_0.is_active=1
2025-10-04 07:14:39 [http-nio-8080-exec-10] INFO  c.n.amancare.service.UserService - Clinic stats - Total: 2, Active: 2, Doctors: 1, Nurses: 0, Receptionists: 0
2025-10-04 07:14:49 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=106
2025-10-04 07:14:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=106
2025-10-04 07:14:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=106
2025-10-04 07:14:49 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=106
2025-10-04 07:14:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:14:49 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:14:49 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=106
2025-10-04 07:14:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=106
2025-10-04 07:14:49 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:14:49 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:14:49 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:14:49 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:14:49 [http-nio-8080-exec-1] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 106
2025-10-04 07:14:49 [http-nio-8080-exec-4] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patients from clinic: 106
2025-10-04 07:14:49 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:14:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:14:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 07:14:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 07:14:49 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.clinic_id=? 
        and p1_0.is_active 
    order by
        p1_0.first_name 
    limit
        ?
2025-10-04 07:14:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 07:14:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 07:14:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 07:14:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 07:14:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 07:18:09 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 07:18:09 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 07:18:09 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:18:09 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 07:18:09 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:18:09 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:18:09 [http-nio-8080-exec-10] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 07:18:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=106
2025-10-04 07:18:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=106
2025-10-04 07:18:10 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=106
2025-10-04 07:18:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=106
2025-10-04 07:18:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:18:10 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:18:10 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=106
2025-10-04 07:18:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=106
2025-10-04 07:18:10 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:18:10 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:18:10 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:18:10 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:18:10 [http-nio-8080-exec-2] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 106
2025-10-04 07:18:10 [http-nio-8080-exec-5] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 106
2025-10-04 07:18:10 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:18:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:18:12 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinics
2025-10-04 07:18:12 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinics
2025-10-04 07:18:12 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:18:12 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinics
2025-10-04 07:18:12 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 07:18:12 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 07:18:12 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT u.clinic 
    FROM
        User u 
    WHERE
        u.role = 'ADMIN' 
        AND u.isActive = true */ select
            distinct c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            u1_0.role='ADMIN' 
            and u1_0.is_active=1
2025-10-04 07:18:18 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 07:18:18 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 07:18:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:18:18 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 07:18:18 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:18:18 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:18:18 [http-nio-8080-exec-9] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 07:18:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics
2025-10-04 07:18:19 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04
2025-10-04 07:18:19 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04
2025-10-04 07:18:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics
2025-10-04 07:18:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:18:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:18:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics
2025-10-04 07:18:19 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04
2025-10-04 07:18:19 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:18:19 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:18:19 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:18:19 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:18:19 [http-nio-8080-exec-7] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: ALL
2025-10-04 07:18:19 [http-nio-8080-exec-2] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: ALL
2025-10-04 07:18:48 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 07:18:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 07:18:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:18:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 07:18:48 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:18:48 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:18:48 [http-nio-8080-exec-8] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 07:40:36 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /users/clinics
2025-10-04 07:40:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /users/clinics
2025-10-04 07:40:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:40:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /users/clinics
2025-10-04 07:40:36 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 07:40:36 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.UserController.getAllClinics(); target is of class [com.nakqeeb.amancare.controller.UserController]
2025-10-04 07:40:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        DISTINCT u.clinic 
    FROM
        User u 
    WHERE
        u.role = 'ADMIN' 
        AND u.isActive = true */ select
            distinct c1_0.id,
            c1_0.address,
            c1_0.created_at,
            c1_0.description,
            c1_0.email,
            c1_0.is_active,
            c1_0.name,
            c1_0.phone,
            c1_0.subscription_end_date,
            c1_0.subscription_plan,
            c1_0.subscription_start_date,
            c1_0.updated_at,
            c1_0.working_days,
            c1_0.working_hours_end,
            c1_0.working_hours_start 
        from
            users u1_0 
        join
            clinics c1_0 
                on c1_0.id=u1_0.clinic_id 
        where
            u1_0.role='ADMIN' 
            and u1_0.is_active=1
2025-10-04 07:40:44 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 07:40:44 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 07:40:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:40:44 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 07:40:44 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:40:44 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:40:44 [http-nio-8080-exec-10] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 07:40:45 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=104
2025-10-04 07:40:45 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 07:40:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=104
2025-10-04 07:40:45 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 07:40:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:40:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=104
2025-10-04 07:40:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:40:45 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:40:45 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:40:45 [http-nio-8080-exec-7] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 104
2025-10-04 07:40:45 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 07:40:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:40:45 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:40:45 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:40:45 [http-nio-8080-exec-5] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 104
2025-10-04 07:40:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:40:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 07:40:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 07:40:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 07:40:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 07:40:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 07:40:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 07:40:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 07:40:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 07:40:46 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=104
2025-10-04 07:40:46 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=104
2025-10-04 07:40:46 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=104
2025-10-04 07:40:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:40:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:40:46 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=104
2025-10-04 07:40:46 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:40:46 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:40:46 [http-nio-8080-exec-4] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 104
2025-10-04 07:40:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:40:46 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=104
2025-10-04 07:40:46 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:40:46 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:40:46 [http-nio-8080-exec-1] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patients from clinic: 104
2025-10-04 07:40:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 07:40:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:40:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 07:40:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 07:40:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 07:40:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 07:40:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 07:40:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 07:40:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.clinic_id=? 
        and p1_0.is_active 
    order by
        p1_0.first_name 
    limit
        ?
2025-10-04 07:47:27 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=104
2025-10-04 07:47:27 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=104
2025-10-04 07:47:27 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=104
2025-10-04 07:47:27 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=104
2025-10-04 07:47:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:47:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:47:27 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=104
2025-10-04 07:47:27 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients?page=0&size=10&sortBy=firstName&sortDirection=asc&clinicId=104
2025-10-04 07:47:27 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:47:27 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:47:27 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:47:27 [http-nio-8080-exec-3] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 104
2025-10-04 07:47:27 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getAllPatients(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:47:27 [http-nio-8080-exec-2] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patients from clinic: 104
2025-10-04 07:47:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:47:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:47:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 07:47:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 07:47:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 07:47:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 07:47:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        p1_0.id,
        p1_0.address,
        p1_0.allergies,
        p1_0.blood_type,
        p1_0.chronic_diseases,
        p1_0.clinic_id,
        p1_0.created_at,
        p1_0.date_of_birth,
        p1_0.email,
        p1_0.emergency_contact_name,
        p1_0.emergency_contact_phone,
        p1_0.first_name,
        p1_0.gender,
        p1_0.is_active,
        p1_0.last_name,
        p1_0.notes,
        p1_0.patient_number,
        p1_0.phone,
        p1_0.updated_at 
    from
        patients p1_0 
    where
        p1_0.clinic_id=? 
        and p1_0.is_active 
    order by
        p1_0.first_name 
    limit
        ?
2025-10-04 07:47:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 07:47:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 07:47:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 07:47:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 07:47:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 07:47:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 07:47:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.patient_id,
        a1_0.id,
        a1_0.appointment_date,
        a1_0.appointment_time,
        a1_0.appointment_type,
        a1_0.chief_complaint,
        a1_0.clinic_id,
        a1_0.created_at,
        a1_0.created_by,
        a1_0.doctor_id,
        a1_0.duration_minutes,
        a1_0.notes,
        a1_0.status,
        a1_0.updated_at 
    from
        appointments a1_0 
    where
        a1_0.patient_id=?
2025-10-04 07:47:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        mr1_0.id,
        mr1_0.appointment_id,
        mr1_0.chief_complaint,
        mr1_0.clinic_id,
        mr1_0.created_at,
        mr1_0.created_by,
        mr1_0.doctor_id,
        mr1_0.family_history,
        mr1_0.follow_up_date,
        mr1_0.follow_up_instructions,
        mr1_0.is_confidential,
        mr1_0.notes,
        mr1_0.past_medical_history,
        mr1_0.patient_id,
        mr1_0.physical_examination,
        mr1_0.present_illness,
        mr1_0.social_history,
        mr1_0.status,
        mr1_0.systemic_examination,
        mr1_0.treatment_plan,
        mr1_0.updated_at,
        mr1_0.updated_by,
        mr1_0.visit_date,
        mr1_0.visit_type,
        mr1_0.blood_pressure_diastolic,
        mr1_0.blood_pressure_systolic,
        mr1_0.blood_sugar,
        mr1_0.bmi,
        mr1_0.heart_rate,
        mr1_0.height,
        mr1_0.oxygen_saturation,
        mr1_0.pain_scale,
        mr1_0.respiratory_rate,
        mr1_0.temperature,
        mr1_0.weight,
        a2_0.medical_record_id,
        a2_0.allergy 
    from
        medical_records mr1_0 
    left join
        medical_record_allergies a2_0 
            on mr1_0.id=a2_0.medical_record_id 
    where
        mr1_0.appointment_id=?
2025-10-04 07:47:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 07:47:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 07:47:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:47:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 07:47:33 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:47:33 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:47:33 [http-nio-8080-exec-4] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 07:47:34 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=104
2025-10-04 07:47:34 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 07:47:34 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=104
2025-10-04 07:47:34 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 07:47:34 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:47:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:47:34 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 07:47:34 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=104
2025-10-04 07:47:34 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:47:34 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:47:34 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:47:34 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:47:34 [http-nio-8080-exec-10] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 104
2025-10-04 07:47:34 [http-nio-8080-exec-9] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 104
2025-10-04 07:47:34 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:47:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:47:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 07:47:34 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 07:47:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 07:47:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 07:47:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 07:47:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 07:47:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 07:47:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 07:48:03 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 07:48:03 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 07:48:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:48:03 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 07:48:03 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:48:03 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:48:03 [http-nio-8080-exec-5] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 07:48:09 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 07:48:09 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 07:48:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:48:09 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 07:48:09 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:48:09 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:48:09 [http-nio-8080-exec-4] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 07:48:10 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=104
2025-10-04 07:48:10 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 07:48:10 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 07:48:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=104
2025-10-04 07:48:10 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:48:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:48:10 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 07:48:10 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:48:10 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 07:48:10 [http-nio-8080-exec-10] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 104
2025-10-04 07:48:10 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:48:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=104
2025-10-04 07:48:10 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:48:10 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 07:48:10 [http-nio-8080-exec-9] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 104
2025-10-04 07:48:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 07:48:10 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 07:48:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 07:48:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 07:48:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 07:48:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 07:48:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 07:48:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 07:48:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 07:48:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/search?page=0&size=20&sortBy=timestamp&sortDirection=DESC
2025-10-04 07:48:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/search?page=0&size=20&sortBy=timestamp&sortDirection=DESC
2025-10-04 07:48:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:48:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/search?page=0&size=20&sortBy=timestamp&sortDirection=DESC
2025-10-04 07:48:10 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.searchActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,com.nakqeeb.amancare.entity.ActionType,java.lang.String,java.time.LocalDateTime,java.time.LocalDateTime,java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:48:10 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.searchActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,com.nakqeeb.amancare.entity.ActionType,java.lang.String,java.time.LocalDateTime,java.time.LocalDateTime,java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:48:10 [http-nio-8080-exec-3] ERROR c.n.a.c.ActivityLogController - Error searching activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.searchActivities(ActivityLogController.java:140)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.searchActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 07:48:39 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 07:48:39 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 07:48:39 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:48:39 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 07:48:39 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:48:39 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:48:39 [http-nio-8080-exec-8] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 07:48:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.html
2025-10-04 07:48:55 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 07:48:55 [http-nio-8080-exec-4] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 07:48:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.html
2025-10-04 07:48:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui.css
2025-10-04 07:48:55 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 07:48:55 [http-nio-8080-exec-6] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 07:48:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui.css
2025-10-04 07:48:55 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-standalone-preset.js
2025-10-04 07:48:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.css
2025-10-04 07:48:55 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 07:48:55 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 07:48:55 [http-nio-8080-exec-9] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 07:48:55 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-standalone-preset.js
2025-10-04 07:48:55 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 07:48:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.css
2025-10-04 07:48:55 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-bundle.js
2025-10-04 07:48:55 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 07:48:55 [http-nio-8080-exec-10] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 07:48:55 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-bundle.js
2025-10-04 07:48:55 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-initializer.js
2025-10-04 07:48:55 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 07:48:55 [http-nio-8080-exec-2] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 07:48:55 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-initializer.js
2025-10-04 07:48:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/favicon-32x32.png
2025-10-04 07:48:55 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 07:48:55 [http-nio-8080-exec-7] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 07:48:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/favicon-32x32.png
2025-10-04 07:48:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs/swagger-config
2025-10-04 07:48:55 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 07:48:55 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 07:48:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs/swagger-config
2025-10-04 07:48:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs
2025-10-04 07:48:55 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 07:48:55 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 07:48:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs
2025-10-04 07:48:57 [http-nio-8080-exec-5] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 2173 ms
2025-10-04 07:49:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-10-04 07:49:19 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 07:49:19 [http-nio-8080-exec-10] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 07:49:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-10-04 07:49:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-10-04 07:49:19 [http-nio-8080-exec-10] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-04 07:49:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for com.nakqeeb.amancare.entity.User */update users 
    set
        clinic_id=?,
        email=?,
        first_name=?,
        is_active=?,
        last_login=?,
        last_name=?,
        password_hash=?,
        phone=?,
        role=?,
        specialization=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-10-04 07:49:30 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-04 07:49:30 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-04 07:49:30 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-04 07:49:30 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-04 07:49:30 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-04 07:49:32 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 55038 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-10-04 07:49:32 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-04 07:49:32 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-04 07:49:32 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-04 07:49:33 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-04 07:49:33 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43 ms. Found 16 JPA repository interfaces.
2025-10-04 07:49:33 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-04 07:49:33 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-04 07:49:33 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-04 07:49:33 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-10-04 07:49:33 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1180 ms
2025-10-04 07:49:33 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-04 07:49:33 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-04 07:49:33 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-04 07:49:34 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-04 07:49:34 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-04 07:49:34 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2119e865
2025-10-04 07:49:34 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-04 07:49:34 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-04 07:49:34 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-04 07:49:35 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table activity_logs 
       modify column action_type enum ('CREATE','DELETE','PATCH','UPDATE') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table audit_logs 
       modify column severity enum ('CRITICAL','ERROR','INFO','WARNING')
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table clinics 
       modify column working_days varchar(20)
2025-10-04 07:49:35 [restartedMain] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:576)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:516)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:334)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:233)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:112)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:280)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:144)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:141)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:324)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:463)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1517)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:66)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:419)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:400)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1873)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:691)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1725)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1690)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1752)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:230)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:184)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:179)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:164)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:271)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:245)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4464)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:203)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:412)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:870)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:438)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:128)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:107)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:517)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:219)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:193)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:167)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:621)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)
	at com.nakqeeb.amancare.AmancareApplication.main(AmancareApplication.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: java.sql.SQLException: Data truncated for column 'working_days' at row 13
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:114)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:837)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:685)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:95)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 125 common frames omitted
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoice_items 
       modify column category enum ('CONSULTATION','EQUIPMENT','LAB_TEST','MEDICATION','OTHER','PROCEDURE','RADIOLOGY','SURGERY','THERAPY','VACCINATION') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoices 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE')
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_diagnoses 
       modify column type enum ('DIFFERENTIAL','FINAL','PRIMARY','PROVISIONAL','RULED_OUT','SECONDARY') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column category enum ('BIOCHEMISTRY','CARDIOLOGY','COAGULATION','ENDOCRINOLOGY','GENETICS','HEMATOLOGY','HEPATOLOGY','IMMUNOLOGY','MICROBIOLOGY','NEPHROLOGY','ONCOLOGY','TOXICOLOGY') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_prescriptions 
       modify column route enum ('INHALATION','INJECTION','INTRAMUSCULAR','INTRAVENOUS','NASAL','OPHTHALMIC','ORAL','OTIC','RECTAL','SUBCUTANEOUS','SUBLINGUAL','TOPICAL') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_procedures 
       modify column category enum ('COSMETIC','DIAGNOSTIC','EMERGENCY','PREVENTIVE','REHABILITATION','SURGICAL','THERAPEUTIC') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column test_type enum ('ANGIOGRAPHY','BONE_SCAN','CT_SCAN','FLUOROSCOPY','MAMMOGRAPHY','MRI','NUCLEAR_MEDICINE','PET_SCAN','ULTRASOUND','X_RAY') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column priority enum ('EMERGENCY','ROUTINE','URGENT') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column referral_type enum ('DENTISTRY','EMERGENCY','ENT','HOSPITAL','LABORATORY','OPHTHALMOLOGY','PHYSIOTHERAPY','PSYCHIATRY','RADIOLOGY','SPECIALIST') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column status enum ('CANCELLED','COMPLETED','DRAFT','IN_PROGRESS','LOCKED','REVIEWED') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column visit_type enum ('CHRONIC_CARE','CONSULTATION','EMERGENCY','FOLLOW_UP','PREVENTIVE_CARE','PROCEDURE','REHABILITATION','ROUTINE_CHECKUP','SURGERY','VACCINATION') not null
2025-10-04 07:49:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table payments 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE') not null
2025-10-04 07:49:35 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-04 07:49:36 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-04 07:49:37 [restartedMain] INFO  c.n.a.config.WebConverterConfig - WebConverterConfig initialized - Custom converters will be registered
2025-10-04 07:49:37 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported BloodType formats: O+, O-, A+, A-, B+, B-, AB+, AB-, O_POSITIVE, etc.
2025-10-04 07:49:37 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported Gender formats: MALE, FEMALE, M, F, ذكر, أنثى
2025-10-04 07:49:37 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-04 07:49:37 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-04 07:49:38 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToBloodTypeConverter
2025-10-04 07:49:38 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToGenderConverter
2025-10-04 07:49:38 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-04 07:49:38 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-04 07:49:39 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-10-04 07:49:39 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 6.815 seconds (process running for 7.393)
2025-10-04 07:49:39 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        PasswordResetToken p 
    WHERE
        p.expiryDate < :now */ delete prt1_0 
    from
        password_reset_tokens prt1_0 
    where
        prt1_0.expiry_date<?
2025-10-04 07:49:39 [scheduling-1] INFO  c.n.a.service.PasswordResetService - تم تنظيف الرموز المنتهية الصلاحية
2025-10-04 07:49:39 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        EmailVerificationToken e 
    WHERE
        e.expiryDate < :now */ delete evt1_0 
    from
        email_verification_tokens evt1_0 
    where
        evt1_0.expiry_date<?
2025-10-04 07:49:39 [scheduling-1] INFO  c.n.a.s.EmailVerificationService - تم تنظيف رموز تأكيد البريد الإلكتروني المنتهية الصلاحية
2025-10-04 07:50:20 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-04 07:50:20 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-04 07:50:20 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 6 ms
2025-10-04 07:50:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=50
2025-10-04 07:50:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 07:50:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=50
2025-10-04 07:50:20 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:50:20 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 07:50:20 [http-nio-8080-exec-1] ERROR c.n.a.c.ActivityLogController - Error fetching recent activities: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
com.nakqeeb.amancare.exception.ForbiddenOperationException: SYSTEM_ADMIN يجب أن يحدد سياق العيادة للقيام بعمليات الكتابة. استخدم header 'X-Acting-Clinic-Id' لتحديد العيادة المستهدفة
	at com.nakqeeb.amancare.service.ClinicContextService.getEffectiveClinicId(ClinicContextService.java:69)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.service.ClinicContextService$$SpringCGLIB$$0.getEffectiveClinicId(<generated>)
	at com.nakqeeb.amancare.controller.ActivityLogController.getEffectiveClinicId(ActivityLogController.java:317)
	at com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(ActivityLogController.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:360)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:268)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:263)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:196)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728)
	at com.nakqeeb.amancare.controller.ActivityLogController$$SpringCGLIB$$0.getRecentActivities(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:991)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:896)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:66)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.nakqeeb.amancare.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$4(HandlerMappingIntrospector.java:267)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1769)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1447)
2025-10-04 08:00:01 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-10-04 08:00:01 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-10-04 08:00:01 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-10-04 08:00:01 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-10-04 08:00:01 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-10-04 08:00:03 [restartedMain] INFO  c.n.amancare.AmancareApplication - Starting AmancareApplication using Java 24.0.1 with PID 57582 (/Users/khaledyafey/MyProjects/spring-boot/amancare/target/classes started by khaledyafey in /Users/khaledyafey/MyProjects/spring-boot/amancare)
2025-10-04 08:00:03 [restartedMain] INFO  c.n.amancare.AmancareApplication - No active profile set, falling back to 1 default profile: "default"
2025-10-04 08:00:03 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-10-04 08:00:03 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-10-04 08:00:04 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-10-04 08:00:04 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 83 ms. Found 16 JPA repository interfaces.
2025-10-04 08:00:04 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-10-04 08:00:04 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-10-04 08:00:04 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.44]
2025-10-04 08:00:04 [restartedMain] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring embedded WebApplicationContext
2025-10-04 08:00:04 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1137 ms
2025-10-04 08:00:04 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-10-04 08:00:05 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.26.Final
2025-10-04 08:00:05 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-10-04 08:00:05 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-10-04 08:00:05 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-10-04 08:00:05 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6f551c5b
2025-10-04 08:00:05 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-10-04 08:00:05 [restartedMain] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-10-04 08:00:05 [restartedMain] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 9.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-10-04 08:00:06 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table activity_logs 
       modify column action_type enum ('CREATE','DELETE','PATCH','UPDATE') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table audit_logs 
       modify column severity enum ('CRITICAL','ERROR','INFO','WARNING')
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table clinics 
       modify column working_days varchar(20)
2025-10-04 08:00:06 [restartedMain] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table clinics 
       modify column working_days varchar(20)" via JDBC [Data truncated for column 'working_days' at row 13]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:576)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:516)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:334)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:233)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:112)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:280)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:144)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:141)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:324)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:463)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1517)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:66)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:419)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:400)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1873)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:691)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1725)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1690)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1752)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1635)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:146)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1459)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:230)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:184)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:179)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:164)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:271)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:245)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4464)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:203)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:412)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:870)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:438)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:128)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:107)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:517)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:219)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:193)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:167)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:621)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)
	at com.nakqeeb.amancare.AmancareApplication.main(AmancareApplication.java:22)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: java.sql.SQLException: Data truncated for column 'working_days' at row 13
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:114)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:837)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:685)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:95)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 125 common frames omitted
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoice_items 
       modify column category enum ('CONSULTATION','EQUIPMENT','LAB_TEST','MEDICATION','OTHER','PROCEDURE','RADIOLOGY','SURGERY','THERAPY','VACCINATION') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table invoices 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE')
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_diagnoses 
       modify column type enum ('DIFFERENTIAL','FINAL','PRIMARY','PROVISIONAL','RULED_OUT','SECONDARY') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column category enum ('BIOCHEMISTRY','CARDIOLOGY','COAGULATION','ENDOCRINOLOGY','GENETICS','HEMATOLOGY','HEPATOLOGY','IMMUNOLOGY','MICROBIOLOGY','NEPHROLOGY','ONCOLOGY','TOXICOLOGY') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_lab_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_prescriptions 
       modify column route enum ('INHALATION','INJECTION','INTRAMUSCULAR','INTRAVENOUS','NASAL','OPHTHALMIC','ORAL','OTIC','RECTAL','SUBCUTANEOUS','SUBLINGUAL','TOPICAL') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_procedures 
       modify column category enum ('COSMETIC','DIAGNOSTIC','EMERGENCY','PREVENTIVE','REHABILITATION','SURGICAL','THERAPEUTIC') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column status enum ('CANCELLED','COLLECTED','COMPLETED','DELAYED','IN_PROGRESS','ORDERED') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column test_type enum ('ANGIOGRAPHY','BONE_SCAN','CT_SCAN','FLUOROSCOPY','MAMMOGRAPHY','MRI','NUCLEAR_MEDICINE','PET_SCAN','ULTRASOUND','X_RAY') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_radiology_tests 
       modify column urgency enum ('ASAP','ROUTINE','STAT','URGENT') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column priority enum ('EMERGENCY','ROUTINE','URGENT') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_record_referrals 
       modify column referral_type enum ('DENTISTRY','EMERGENCY','ENT','HOSPITAL','LABORATORY','OPHTHALMOLOGY','PHYSIOTHERAPY','PSYCHIATRY','RADIOLOGY','SPECIALIST') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column status enum ('CANCELLED','COMPLETED','DRAFT','IN_PROGRESS','LOCKED','REVIEWED') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table medical_records 
       modify column visit_type enum ('CHRONIC_CARE','CONSULTATION','EMERGENCY','FOLLOW_UP','PREVENTIVE_CARE','PROCEDURE','REHABILITATION','ROUTINE_CHECKUP','SURGERY','VACCINATION') not null
2025-10-04 08:00:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table payments 
       modify column payment_method enum ('BANK_TRANSFER','CASH','CHECK','CREDIT_CARD','DEBIT_CARD','INSTALLMENT','INSURANCE','ONLINE') not null
2025-10-04 08:00:06 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-10-04 08:00:06 [restartedMain] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-10-04 08:00:07 [restartedMain] INFO  c.n.a.config.WebConverterConfig - WebConverterConfig initialized - Custom converters will be registered
2025-10-04 08:00:07 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported BloodType formats: O+, O-, A+, A-, B+, B-, AB+, AB-, O_POSITIVE, etc.
2025-10-04 08:00:07 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Supported Gender formats: MALE, FEMALE, M, F, ذكر, أنثى
2025-10-04 08:00:08 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-10-04 08:00:08 [restartedMain] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-10-04 08:00:09 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToBloodTypeConverter
2025-10-04 08:00:09 [restartedMain] INFO  c.n.a.config.WebConverterConfig - Registered converter: StringToGenderConverter
2025-10-04 08:00:09 [restartedMain] DEBUG o.s.s.web.DefaultSecurityFilterChain - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-10-04 08:00:09 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-10-04 08:00:09 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api/v1'
2025-10-04 08:00:09 [restartedMain] INFO  c.n.amancare.AmancareApplication - Started AmancareApplication in 6.326 seconds (process running for 6.577)
2025-10-04 08:00:09 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        PasswordResetToken p 
    WHERE
        p.expiryDate < :now */ delete prt1_0 
    from
        password_reset_tokens prt1_0 
    where
        prt1_0.expiry_date<?
2025-10-04 08:00:09 [scheduling-1] INFO  c.n.a.service.PasswordResetService - تم تنظيف الرموز المنتهية الصلاحية
2025-10-04 08:00:09 [scheduling-1] DEBUG org.hibernate.SQL - 
    /* DELETE 
    FROM
        EmailVerificationToken e 
    WHERE
        e.expiryDate < :now */ delete evt1_0 
    from
        email_verification_tokens evt1_0 
    where
        evt1_0.expiry_date<?
2025-10-04 08:00:09 [scheduling-1] INFO  c.n.a.s.EmailVerificationService - تم تنظيف رموز تأكيد البريد الإلكتروني المنتهية الصلاحية
2025-10-04 08:00:12 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api/v1] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-10-04 08:00:12 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-10-04 08:00:12 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-10-04 08:00:12 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.html
2025-10-04 08:00:12 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 08:00:12 [http-nio-8080-exec-1] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 08:00:12 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.html
2025-10-04 08:00:13 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui.css
2025-10-04 08:00:13 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 08:00:13 [http-nio-8080-exec-2] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 08:00:13 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui.css
2025-10-04 08:00:13 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/index.css
2025-10-04 08:00:13 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 08:00:13 [http-nio-8080-exec-3] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 08:00:13 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/index.css
2025-10-04 08:00:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-standalone-preset.js
2025-10-04 08:00:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-ui-bundle.js
2025-10-04 08:00:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/swagger-initializer.js
2025-10-04 08:00:13 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 08:00:13 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 08:00:13 [http-nio-8080-exec-5] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 08:00:13 [http-nio-8080-exec-6] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 08:00:13 [http-nio-8080-exec-4] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 08:00:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-initializer.js
2025-10-04 08:00:13 [http-nio-8080-exec-5] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 08:00:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-bundle.js
2025-10-04 08:00:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/swagger-ui-standalone-preset.js
2025-10-04 08:00:13 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs/swagger-config
2025-10-04 08:00:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /swagger-ui/favicon-32x32.png
2025-10-04 08:00:13 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 08:00:13 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 08:00:13 [http-nio-8080-exec-7] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 08:00:13 [http-nio-8080-exec-8] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 08:00:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /swagger-ui/favicon-32x32.png
2025-10-04 08:00:13 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs/swagger-config
2025-10-04 08:00:13 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /docs
2025-10-04 08:00:13 [http-nio-8080-exec-9] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 08:00:13 [http-nio-8080-exec-9] DEBUG o.s.s.w.s.SessionManagementFilter - Request requested invalid session id 2F16A8B404D563D304AD54AF1C090868
2025-10-04 08:00:13 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /docs
2025-10-04 08:00:14 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 1261 ms
2025-10-04 08:00:25 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=50
2025-10-04 08:00:25 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:00:25 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=50
2025-10-04 08:00:25 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:00:25 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:00:25 [http-nio-8080-exec-4] INFO  c.n.a.c.ActivityLogController - SYSTEM_ADMIN reading recent activities for clinic: ALL
2025-10-04 08:00:29 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?clinicId=9&limit=50
2025-10-04 08:00:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:00:29 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?clinicId=9&limit=50
2025-10-04 08:00:29 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:00:29 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:00:29 [http-nio-8080-exec-6] INFO  c.n.a.c.ActivityLogController - SYSTEM_ADMIN reading recent activities for clinic: 9
2025-10-04 08:00:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 08:01:15 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/login
2025-10-04 08:01:15 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-10-04 08:01:15 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-10-04 08:01:15 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-10-04 08:01:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        u 
    FROM
        User u 
    WHERE
        u.username = :usernameOrEmail 
        OR u.email = :usernameOrEmail */ select
            u1_0.id,
            u1_0.clinic_id,
            u1_0.created_at,
            u1_0.email,
            u1_0.first_name,
            u1_0.is_active,
            u1_0.last_login,
            u1_0.last_name,
            u1_0.password_hash,
            u1_0.phone,
            u1_0.role,
            u1_0.specialization,
            u1_0.updated_at,
            u1_0.username 
        from
            users u1_0 
        where
            u1_0.username=? 
            or u1_0.email=?
2025-10-04 08:01:16 [http-nio-8080-exec-1] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-10-04 08:01:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for com.nakqeeb.amancare.entity.User */update users 
    set
        clinic_id=?,
        email=?,
        first_name=?,
        is_active=?,
        last_login=?,
        last_name=?,
        password_hash=?,
        phone=?,
        role=?,
        specialization=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-10-04 08:01:16 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /auth/me
2025-10-04 08:01:16 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-10-04 08:01:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:16 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-10-04 08:01:16 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AuthController.getCurrentUser(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.AuthController]
2025-10-04 08:01:16 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AuthController.getCurrentUser(com.nakqeeb.amancare.security.UserPrincipal); target is of class [com.nakqeeb.amancare.controller.AuthController]
2025-10-04 08:01:16 [http-nio-8080-exec-10] INFO  c.n.amancare.service.ClinicService - Fetching clinic with ID: 9 by user: 14
2025-10-04 08:01:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 08:01:16 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 08:01:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:16 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:16 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 08:01:17 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04
2025-10-04 08:01:17 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics
2025-10-04 08:01:17 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04
2025-10-04 08:01:17 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics
2025-10-04 08:01:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:17 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:17 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics
2025-10-04 08:01:17 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04
2025-10-04 08:01:17 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 08:01:17 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 08:01:17 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 08:01:17 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 08:01:17 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 08:01:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 08:01:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 08:01:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 08:01:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 08:01:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 08:01:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 08:01:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 08:01:17 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 08:01:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 08:01:27 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 08:01:27 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:27 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:27 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:27 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 08:01:28 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics
2025-10-04 08:01:28 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04
2025-10-04 08:01:28 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics
2025-10-04 08:01:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04
2025-10-04 08:01:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04
2025-10-04 08:01:28 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics
2025-10-04 08:01:28 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 08:01:28 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 08:01:28 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 08:01:28 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 08:01:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 08:01:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 08:01:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 08:01:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 08:01:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 08:01:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 08:01:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 08:01:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 08:01:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 08:01:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 08:01:31 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:31 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:31 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:31 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 08:01:31 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:31 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:31 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:31 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:31 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:31 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 08:01:31 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:31 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:31 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:31 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:31 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:31 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 08:01:31 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:31 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:31 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:31 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:31 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:31 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 08:01:32 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 08:01:32 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:32 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:32 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:32 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 08:01:32 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:32 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:32 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:32 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 08:01:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:32 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:32 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 08:01:32 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:32 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:32 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:32 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:32 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:32 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 08:01:49 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 08:01:49 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:49 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:49 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:49 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:49 [http-nio-8080-exec-1] INFO  c.n.a.c.ActivityLogController - SYSTEM_ADMIN reading recent activities for clinic: ALL
2025-10-04 08:01:50 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 08:01:50 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /patients/statistics?clinicId=104
2025-10-04 08:01:50 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=104
2025-10-04 08:01:50 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 08:01:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:50 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 08:01:50 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=104
2025-10-04 08:01:50 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 08:01:50 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 08:01:50 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 08:01:50 [http-nio-8080-exec-3] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 08:01:50 [http-nio-8080-exec-3] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 104
2025-10-04 08:01:50 [http-nio-8080-exec-5] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 104
2025-10-04 08:01:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 08:01:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 08:01:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 08:01:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 08:01:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 08:01:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 08:01:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 08:01:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 08:01:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 08:01:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 08:01:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:51 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:51 [http-nio-8080-exec-4] INFO  c.n.a.c.ActivityLogController - SYSTEM_ADMIN reading recent activities for clinic: ALL
2025-10-04 08:01:52 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 08:01:52 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /patients/statistics?clinicId=104
2025-10-04 08:01:52 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:52 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /patients/statistics?clinicId=104
2025-10-04 08:01:52 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /appointments/today?date=2025-10-04&clinicId=104
2025-10-04 08:01:52 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 08:01:52 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.AppointmentController.getTodayAppointments(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.AppointmentController]
2025-10-04 08:01:52 [http-nio-8080-exec-6] INFO  c.n.a.c.AppointmentController - SYSTEM_ADMIN reading today's appointments from clinic: 104
2025-10-04 08:01:52 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 08:01:52 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.PatientController.getPatientStatistics(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long); target is of class [com.nakqeeb.amancare.controller.PatientController]
2025-10-04 08:01:52 [http-nio-8080-exec-8] INFO  c.n.a.controller.PatientController - SYSTEM_ADMIN reading patient statistics from clinic: 104
2025-10-04 08:01:52 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 08:01:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.address,
        c1_0.created_at,
        c1_0.description,
        c1_0.email,
        c1_0.is_active,
        c1_0.name,
        c1_0.phone,
        c1_0.subscription_end_date,
        c1_0.subscription_plan,
        c1_0.subscription_start_date,
        c1_0.updated_at,
        c1_0.working_days,
        c1_0.working_hours_end,
        c1_0.working_hours_start 
    from
        clinics c1_0 
    where
        c1_0.id=?
2025-10-04 08:01:52 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        a 
    FROM
        Appointment a 
    WHERE
        a.clinic = :clinic 
        AND a.appointmentDate = CURRENT_DATE() 
    ORDER BY
        a.appointmentTime */ select
            a1_0.id,
            a1_0.appointment_date,
            a1_0.appointment_time,
            a1_0.appointment_type,
            a1_0.chief_complaint,
            a1_0.clinic_id,
            a1_0.created_at,
            a1_0.created_by,
            a1_0.doctor_id,
            a1_0.duration_minutes,
            a1_0.notes,
            a1_0.patient_id,
            a1_0.status,
            a1_0.updated_at 
        from
            appointments a1_0 
        where
            a1_0.clinic_id=? 
            and a1_0.appointment_date=current_date 
        order by
            a1_0.appointment_time
2025-10-04 08:01:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=?
2025-10-04 08:01:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = true */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=1
2025-10-04 08:01:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.isActive = false */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.is_active=0
2025-10-04 08:01:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.createdAt >= :startDateTime 
        AND p.createdAt <= :endDateTime */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.created_at>=? 
            and p1_0.created_at<=?
2025-10-04 08:01:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'MALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='MALE'
2025-10-04 08:01:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(p) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.gender = 'FEMALE' */ select
            count(p1_0.id) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.gender='FEMALE'
2025-10-04 08:01:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        AVG(YEAR(CURRENT_DATE()) - YEAR(p.dateOfBirth)) 
    FROM
        Patient p 
    WHERE
        p.clinic = :clinic 
        AND p.dateOfBirth IS NOT NULL */ select
            avg((year(current_date)-year(p1_0.date_of_birth))) 
        from
            patients p1_0 
        where
            p1_0.clinic_id=? 
            and p1_0.date_of_birth is not null
2025-10-04 08:01:57 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 08:01:57 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:57 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:57 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:57 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        al1_0.id,
        al1_0.action_type,
        al1_0.clinic_id,
        al1_0.clinic_name,
        al1_0.created_at,
        al1_0.description,
        al1_0.duration_ms,
        al1_0.endpoint,
        al1_0.entity_id,
        al1_0.entity_name,
        al1_0.entity_type,
        al1_0.error_message,
        al1_0.http_method,
        al1_0.ip_address,
        al1_0.new_value,
        al1_0.old_value,
        al1_0.success,
        al1_0.timestamp,
        al1_0.updated_at,
        al1_0.user_agent,
        al1_0.user_full_name,
        al1_0.user_id,
        al1_0.user_role,
        al1_0.username 
    from
        activity_logs al1_0 
    where
        al1_0.clinic_id=? 
    order by
        al1_0.timestamp desc 
    limit
        ?
2025-10-04 08:01:57 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing OPTIONS /admin/activities/recent?limit=20
2025-10-04 08:01:57 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/activities/recent?limit=20
2025-10-04 08:01:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.clinic_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.is_active,
        u1_0.last_login,
        u1_0.last_name,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role,
        u1_0.specialization,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-10-04 08:01:57 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/activities/recent?limit=20
2025-10-04 08:01:57 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:57 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.nakqeeb.amancare.controller.ActivityLogController.getRecentActivities(com.nakqeeb.amancare.security.UserPrincipal,java.lang.Long,int); target is of class [com.nakqeeb.amancare.controller.ActivityLogController]
2025-10-04 08:01:57 [http-nio-8080-exec-5] INFO  c.n.a.c.ActivityLogController - SYSTEM_ADMIN reading recent activities for clinic: ALL
